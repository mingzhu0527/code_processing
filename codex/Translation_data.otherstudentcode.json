{"Java-Python": {"id": {"0": 14023, "1": 14022, "2": 14021, "3": 14020, "4": 13987, "5": 13967, "6": 13966, "7": 13899, "8": 13898, "9": 13897, "10": 13876, "11": 13875, "12": 13830, "13": 13829, "14": 13757, "15": 13684, "16": 13673, "17": 13672, "18": 13671, "19": 13660, "20": 13633, "21": 13606, "22": 13575, "23": 13535, "24": 13504, "25": 13501, "26": 13489, "27": 13468, "28": 13460, "29": 13454, "30": 13453, "31": 13448, "32": 13432, "33": 13431, "34": 13430, "35": 13429, "36": 13409, "37": 13401, "38": 13400, "39": 13352, "40": 13307, "41": 13291, "42": 13290, "43": 13288, "44": 13251, "45": 13250, "46": 13241, "47": 13240, "48": 13236, "49": 13180, "50": 13179, "51": 13144, "52": 13141, "53": 13140, "54": 13049, "55": 13048, "56": 13040, "57": 13022, "58": 12991, "59": 12983, "60": 12971, "61": 12970, "62": 12906, "63": 12905, "64": 12895, "65": 12891, "66": 12855, "67": 12844, "68": 12842, "69": 12810, "70": 12799, "71": 12794, "72": 12765, "73": 12764, "74": 12750, "75": 12747, "76": 12745, "77": 12716, "78": 12715, "79": 12714, "80": 12686, "81": 12646, "82": 12645, "83": 12639, "84": 12638, "85": 12615, "86": 12604, "87": 12603, "88": 12587, "89": 12564, "90": 12561, "91": 12550, "92": 12548, "93": 12547, "94": 12533, "95": 12532, "96": 12523, "97": 12520, "98": 12496, "99": 12486, "100": 12485, "101": 12462, "102": 12439, "103": 12430, "104": 12422, "105": 12340, "106": 12333, "107": 12316, "108": 12315, "109": 12314, "110": 12264, "111": 12261, "112": 12239, "113": 12228, "114": 12225, "115": 12192, "116": 12191, "117": 12185, "118": 12180, "119": 12170, "120": 12157, "121": 12147, "122": 12117, "123": 12078, "124": 12077, "125": 12076, "126": 12070, "127": 12058, "128": 12037, "129": 12035, "130": 12002, "131": 11998, "132": 11948, "133": 11906, "134": 11815, "135": 11774, "136": 11772, "137": 11748, "138": 11722, "139": 11709, "140": 11707, "141": 11687, "142": 11677, "143": 11667, "144": 11658, "145": 11629, "146": 11628, "147": 11627, "148": 11626, "149": 11613, "150": 11611, "151": 11549, "152": 11533, "153": 11523, "154": 11510, "155": 11435, "156": 11418, "157": 11404, "158": 11387, "159": 11370, "160": 11343, "161": 11342, "162": 11331, "163": 11315, "164": 11306, "165": 11302, "166": 11294, "167": 11283, "168": 11253, "169": 11217, "170": 11204, "171": 11199, "172": 11196, "173": 11194, "174": 11182, "175": 11180, "176": 11139, "177": 11102, "178": 11094, "179": 11088, "180": 11060, "181": 11052, "182": 11051, "183": 11045, "184": 11015, "185": 11014, "186": 10974, "187": 10960, "188": 10952, "189": 10951, "190": 10937, "191": 10936, "192": 10932, "193": 10921, "194": 10897, "195": 10885, "196": 10874, "197": 10812, "198": 10801, "199": 10768, "200": 10753, "201": 10751, "202": 10721, "203": 10719, "204": 10707, "205": 10706, "206": 10703, "207": 10694, "208": 10677, "209": 10668, "210": 10653, "211": 10573, "212": 10569, "213": 10568, "214": 10546, "215": 10540, "216": 10539, "217": 10502, "218": 10492, "219": 10475, "220": 10474, "221": 10462, "222": 10452, "223": 10445, "224": 10438, "225": 10434, "226": 10423, "227": 10408, "228": 10406, "229": 10394, "230": 10377, "231": 10367, "232": 10345, "233": 10337, "234": 10335, "235": 10330, "236": 10325, "237": 10309, "238": 10269, "239": 10267, "240": 10238, "241": 10237, "242": 10233, "243": 10228, "244": 10212, "245": 10186, "246": 10174, "247": 10155, "248": 10145, "249": 10124, "250": 10123, "251": 10120, "252": 10114, "253": 10076, "254": 10071, "255": 10064, "256": 10063, "257": 10062, "258": 10058, "259": 10057, "260": 10054, "261": 10049, "262": 10041, "263": 10030, "264": 9989, "265": 9979, "266": 9971, "267": 9963, "268": 9958, "269": 9948, "270": 9935, "271": 9915, "272": 9905, "273": 9889, "274": 9877, "275": 9849, "276": 9829, "277": 9824, "278": 9818, "279": 9805, "280": 9804, "281": 9787, "282": 9777, "283": 9759, "284": 9738, "285": 9736, "286": 9735, "287": 9727, "288": 9726, "289": 9707, "290": 9704, "291": 9702, "292": 9686, "293": 9685, "294": 9673, "295": 9639, "296": 9638, "297": 9608, "298": 9574, "299": 9567, "300": 9528, "301": 9507, "302": 9505, "303": 9496, "304": 9478, "305": 9476, "306": 9468, "307": 9467, "308": 9458, "309": 9457, "310": 9452, "311": 9446, "312": 9445, "313": 9432, "314": 9430, "315": 9423, "316": 9405, "317": 9369, "318": 9362, "319": 9359, "320": 9358, "321": 9348, "322": 9346, "323": 9329, "324": 9318, "325": 9305, "326": 9302}, "Java": {"0": "static int subtract(int x, int y)\n        {\n                if (y == 0)\n                        return x;\n                return subtract(x ^ y, (~x & y) << 1);\n        }", "1": "static int subtract(int x, int y)\n        {\n        while (y != 0)\n        {\n                int borrow = (~x) & y;\n                x = x ^ y;\n                y = borrow << 1;\n        }\n        return x;\n}", "2": "static int multiplyBySevenByEight(int n)\n        {\n                return ((n << 3) -n) >> 3;\n        }", "3": "static int multiplyBySevenByEight(int n)\n        {\n                return (n - (n >> 3));\n        }", "4": "private static int maxConsecutiveOnes(int x)\r\n\t{\r\n\t\tint count = 0;\r\n\t\twhile (x!=0)\r\n\t\t{\r\n\t\t\tx = (x & (x << 1));\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\treturn count;\r\n\t}", "5": "static int countTrailingZero(int x)\r\n{\r\n\tint lookup[] = {32, 0, 1, 26, 2, 23, \r\n\t\t\t\t\t27, 0, 3, 16, 24, 30,\r\n\t\t\t\t\t28, 11, 0, 13, 4, 7,\r\n\t\t\t\t\t17, 0, 25, 22, 31, 15,\r\n\t\t\t\t\t29, 10, 12, 6, 0, 21,\r\n\t\t\t\t\t14, 9, 5, 20, 8, 19, 18};\r\n\treturn lookup[(-x & x) % 37];\r\n}", "6": "public static int countTrailingZero(int x)\r\n\t{\r\n\t\tint count = 0;\r\n\t\twhile ((x & 1) == 0)\r\n\t\t{\r\n\t\t\tx = x >> 1;\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\treturn count;\r\n\t}", "7": "static int setBitNumber(int n)\r\n\t{\r\n\t\tint k = (int)(Math.log(n) / Math.log(2));\r\n\t\treturn 1 << k;\r\n\t}", "8": "static int setBitNumber(int n)\r\n\t{\r\n\t\tn |= n >> 1;\r\n\t\tn |= n >> 2;\r\n\t\tn |= n >> 4;\r\n\t\tn |= n >> 8;\r\n\t\tn |= n >> 16;\r\n\t\tn = n + 1;\r\n\t\treturn (n >> 1);\r\n\t}", "9": "static int setBitNumber(int n)\r\n\t{\r\n\t\tif (n == 0)\r\n\t\t\treturn 0;\r\n\t\tint msb = 0;\r\n\t\tn = n / 2;\r\n\t\twhile (n != 0) {\r\n\t\t\tn = n / 2;\r\n\t\t\tmsb++;\r\n\t\t}\r\n\t\treturn (1 << msb);\r\n\t}", "10": "static long answer(long n)\r\n\t{\r\n\t\tlong m = 2;\r\n\t\tlong ans = 1;\r\n\t\tlong r = 1;\r\n\t\twhile (r < n) {\r\n\t\t\tr = ((long)Math.pow(2, m) - 1) *\r\n\t\t\t\t((long)Math.pow(2, m - 1));\r\n\t\t\tif (r < n)\r\n\t\t\t\tans = r;\r\n\t\t\tm++;\r\n\t\t}\r\n\t\treturn ans;\r\n\t}\r\n", "11": "static boolean isDivisibleby17(int n)\r\n\t{\r\n\t\tif (n == 0 n == 17)\r\n\t\t\treturn true;\r\n\t\tif (n < 17)\r\n\t\t\treturn false;\r\n\t\treturn isDivisibleby17((int)(n >> 4)\r\n\t\t\t\t\t\t\t- (int)(n & 15));\r\n\t}", "12": "static void printSubsets(int n)\n        {\n        for (int i = n; i > 0; i = (i - 1) & n)\n                System.out.print(i + \" \");\n                System.out.print(\" 0 \");\n        }", "13": "static void printSubsets(int n)\n        {\n                for (int i = 0; i <= n; i++)\n                        if ((n & i) == i)\n                                System.out.print(i + \" \");\n        }", "14": "static int hammingDistance(int n1, int n2)\n{\n        int x = n1 ^ n2;\n        int setBits = 0;\n        while (x > 0)\n        {\n                setBits += x & 1;\n                x >>= 1;\n        }\n        return setBits;\n}", "15": "static long bit_q(int i, int j)\n{\n        long sum = 0;\n        while (j > 0)\n        {\n                sum += bit[j];\n                j -= (j & (j * -1));\n        }\n        i--;\n        while (i > 0)\n        {\n                sum -= bit[i];\n                i -= (i & (i * -1));\n        }\n        return sum;\n}\nstatic void bit_up(int i, long diff)\n{\n        while (i <= n)\n        {\n                bit[i] += diff;\n                i += i & -i;\n        }\n}\nstatic void dfs(int node)\n{\n        Ideal_pair += bit_q(Math.max(1, node - k),\n                                                Math.min(n, node + k));\n        bit_up(node, 1);\n        for(int i = 0; i < al[node].size(); i++)\n                dfs(al[node].get(i));\n        bit_up(node, -1);\n}\nstatic void initialise()\n{\n        Ideal_pair = 0;\n        for (int i = 0; i <= n; i++) {\n                root_node[i] = true;\n                bit[i] = 0;\n        }\n}\nstatic void Add_Edge(int x, int y)\n{\n        al[x].add(y);\n        root_node[y] = false;\n}\nstatic long Idealpairs()\n{\n        int r = -1;\n        for(int i = 1; i <= n; i++)\n                if (root_node[i])\n                {\n                        r = i;\n                        break;\n                }\n        dfs(r);\n        return Ideal_pair;\n}", "16": "static void insert(TrieNode node, int num, int index)\n{\n        for (int bits = lg; bits >= 0; bits--)\n        {\n                int curr_bit = (num >> bits) & 1;\n                if (node.children[curr_bit] == null)\n                {\n                        node.children[curr_bit]\n                                = new TrieNode();\n                }\n                node = node.children[curr_bit];\n        }\n        node.sum_of_indexes += index;\n        node.number_of_indexes++;\n}\nstatic int query(TrieNode node, int num, int index)\n{\n        for (int bits = lg; bits >= 0; bits--)\n        {\n                int curr_bit = (num >> bits) & 1;\n                if (node.children[curr_bit] == null)\n                {\n                        return 0;\n                }\n                node = node.children[curr_bit];\n        }\n        int sz = node.number_of_indexes;\n        int sum = node.sum_of_indexes;\n        int ans = (sz * index) - (sum);\n        return ans;\n}\nstatic int no_of_triplets(int arr[], int n)\n{\n        int curr_xor = 0;\n        int number_of_triplets = 0;\n        TrieNode root = new TrieNode();\n        for (int i = 0; i < n; i++)\n        {\n                int x = arr[i];\n                insert(root, curr_xor, i);\n                curr_xor ^= x;\n                number_of_triplets\n                        += query(root, curr_xor, i);\n        }\n        return number_of_triplets;\n}", "17": "static int xor_triplet(int arr[], int n)\n{\n        int ans = 0;\n        for (int i = 0; i < n; i++)\n        {\n                for (int j = i + 1; j < n; j++)\n                {\n                        for (int k = j; k < n; k++)\n                        {\n                                int xor1 = 0, xor2 = 0;\n                                for (int x = i; x < j; x++)\n                                {\n                                        xor1 ^= arr[x];\n                                }\n                                for (int x = j; x <= k; x++)\n                                {\n                                        xor2 ^= arr[x];\n                                }\n                                if (xor1 == xor2)\n                                {\n                                        ans++;\n                                }\n                        }\n                }\n        }\n        return ans;\n}\n", "18": "static int cntElements(int arr[], int n)\n{\n        int cnt = 0;\n        for (int i = 0; i < n - 2; i++)\n        {\n                if (arr[i] == (arr[i + 1] ^ arr[i + 2]))\n                {\n                        cnt++;\n                }\n        }\n        return cnt;\n}", "19": "static int extraElement(int A[], int B[], int n)\n        {\n                int ans = 0;\n                for (int i = 0; i < n; i++)\n                        ans ^= A[i];\n                for (int i = 0; i < n + 1; i++)\n                        ans ^= B[i];\n                return ans;\n        }", "20": "static int RecursiveFunction(ArrayList<Integer> ref, int bit)\n{\n        if (ref.size() == 0 bit < 0)\n                return 0;\n        ArrayList<Integer> curr_on = new ArrayList<>();\n        ArrayList<Integer> curr_off = new ArrayList<>();\n        for(int i = 0; i < ref.size(); i++)\n        {\n                if (((ref.get(i) >> bit) & 1) == 0)\n                        curr_off.add(ref.get(i));\n                else\n                        curr_on.add(ref.get(i));\n        }\n        if (curr_off.size() == 0)\n                return RecursiveFunction(curr_on, bit - 1);\n        if (curr_on.size() == 0)\n                return RecursiveFunction(curr_off, bit - 1);\n        return Math.min(RecursiveFunction(curr_off, bit - 1),\n                                        RecursiveFunction(curr_on, bit - 1)) +\n                                                                        (1 << bit);\n}\nstatic void PrintMinimum(int a[], int n)\n{\n        ArrayList<Integer> v = new ArrayList<>();\n        for(int i = 0; i < n; i++)\n                v.add(a[i]);\n        System.out.println(RecursiveFunction(v, 30));\n}", "21": "static void constructArray(int A[], int N, int K)\n{\n        int B[] = new int[N];\n        int totalXOR = A[0] ^ K;\n        for(int i = 0; i < N; i++)\n                B[i] = totalXOR ^ A[i];\n        for(int i = 0; i < N; i++)\n        {\n                System.out.print(B[i] + \" \");\n        }\n}\n", "22": "static int reversDigits(int num)\n        {\n                if (num > 0) {\n                        reversDigits(num / 10);\n                        rev_num += (num % 10) * base_pos;\n                        base_pos *= 10;\n                }\n                return rev_num;\n        }", "23": "static void printSquares(int n)\n{\n        int square = 0, odd = 1;\n        for (int x = 0; x < n; x++)\n        {\n                System.out.print(square + \" \" );\n                square = square + odd;\n                odd = odd + 2;\n        }\n}", "24": "static boolean isLucky(int n)\n        {\n                boolean arr[]=new boolean[10];\n                for (int i = 0; i < 10; i++)\n                        arr[i] = false;\n                while (n > 0)\n                {\n                        int digit = n % 10;\n                        if (arr[digit])\n                        return false;\n                        arr[digit] = true;\n                        n = n / 10;\n                }\n                return true;\n        }", "25": "static int eval(int a, char op, int b)\n        {\n                if (op == '+')\n                {\n                        return a + b;\n                }\n                if (op == '-')\n                {\n                        return a - b;\n                }\n                if (op == '*')\n                {\n                        return a * b;\n                }\n                return Integer.MAX_VALUE;\n        }\nstatic Vector<Integer> evaluateAll(String expr, int low, int high)\n        {\n                Vector<Integer> res = new Vector<Integer>();\n                if (low == high)\n                {\n                        res.add(expr.charAt(low) - '0');\n                        return res;\n                }\n                if (low == (high - 2))\n                {\n                        int num = eval(expr.charAt(low) - '0',\n                                                expr.charAt(low + 1),\n                                                expr.charAt(low + 2) - '0');\n                        res.add(num);\n                        return res;\n                }\n                for (int i = low + 1; i <= high; i += 2)\n                {\n                        Vector<Integer> l = evaluateAll(expr, low, i - 1);\n                        Vector<Integer> r = evaluateAll(expr, i + 1, high);\n                        for (int s1 = 0; s1 < l.size(); s1++)\n                        {\n                                for (int s2 = 0; s2 < r.size(); s2++)\n                                {\n                                        int val = eval(l.get(s1), expr.charAt(i), r.get(s2));\n                                        res.add(val);\n                                }\n                        }\n                }\n                return res;\n        }", "26": "static boolean isInside(int circle_x, int circle_y, int rad, int x, int y)\n        {\n                if ((x - circle_x) * (x - circle_x) +\n                        (y - circle_y) * (y - circle_y) <= rad * rad)\n                        return true;\n                else\n                        return false;\n        }", "27": "static int power(int x, int y, int p) {\n                int res = 1;\n                x = x % p;\n                while (y > 0) {\n                        if ((y & 1) == 1)\n                                res = (res * x) % p;\n                        x = (x * x) % p;\n                }\n                return res;\n        }\nstatic boolean miillerTest(int d, int n) {\n                int a = 2 + (int)(Math.random() % (n - 4));\n                int x = power(a, d, n);\n                if (x == 1 x == n - 1)\n                        return true;\n                while (d != n - 1) {\n                        x = (x * x) % n;\n                        d *= 2;\n                        if (x == 1)\n                                return false;\n                        if (x == n - 1)\n                                return true;\n                }\n                return false;\n        }\nstatic boolean isPrime(int n, int k) {\n                if (n <= 1 n == 4)\n                        return false;\n                if (n <= 3)\n                        return true;\n                int d = n - 1;\n                while (d % 2 == 0)\n                        d /= 2;\n                for (int i = 0; i < k; i++)\n                        if (!miillerTest(d, n))\n                                return false;\n                return true;\n        }\n", "28": "static int power(int x, int y, int p)\n{\n        while (y > 0) {\n                if (y %2== 1)\n                        res = (res * x) % p;\n                x = (x * x) % p;\n        }\n        return res;\n}\nstatic void squareRoot(int n, int p)\n{\n        if (p % 4 != 3) {\n                System.out.print(\"Invalid Input\");\n                return;\n        }\n        n = n % p;\n        int x = power(n, (p + 1) / 4, p);\n        if ((x * x) % p == n) {\n                System.out.print(\"Square root is \" + x);\n                return;\n        }\n        x = p - x;\n        if ((x * x) % p == n) {\n                System.out.print(\"Square root is \" + x);\n                return;\n        }\n        System.out.print(\"Square root doesn't exist \");\n}\n", "29": "static int SieveOfSundaram(int n) {\n        int nNew = (n - 1) / 2;\n        boolean marked[] = new boolean[nNew + 1];\n        Arrays.fill(marked, false);\n        for (int i = 1; i <= nNew; i++)\n        for (int j = i; (i + j + 2 * i * j) <= nNew; j++)\n                marked[i + j + 2 * i * j] = true;\n        if (n > 2)\n        System.out.print(2 + \" \");\n        for (int i = 1; i <= nNew; i++)\n        if (marked[i] == false)\n                System.out.print(2 * i + 1 + \" \");\n        return -1;\n}", "30": "static int SieveOfAtkin(int limit)\n        {\n                if (limit > 2)\n                        System.out.print(2 + \" \");\n                if (limit > 3)\n                        System.out.print(3 + \" \");\n                boolean sieve[] = new boolean[limit];\n                for (int i = 0; i < limit; i++)\n                        sieve[i] = false;\n                for (int x = 1; x * x < limit; x++) {\n                        for (int y = 1; y * y < limit; y++) {\n                                int n = (4 * x * x) + (y * y);\n                                if (n <= limit && (n % 12 == 1 n % 12 == 5))\n                                        sieve[n] ^= true;\n                                n = (3 * x * x) + (y * y);\n                                if (n <= limit && n % 12 == 7)\n                                        sieve[n] ^= true;\n                                n = (3 * x * x) - (y * y);\n                                if (x > y && n <= limit && n % 12 == 11)\n                                        sieve[n] ^= true;\n                        }\n                }\n                for (int r = 5; r * r < limit; r++) {\n                        if (sieve[r]) {\n                                for (int i = r * r; i < limit; i += r * r)\n                                        sieve[i] = false;\n                        }\n                }\n                for (int a = 5; a < limit; a++)\n                        if (sieve[a])\n                                System.out.print(a + \" \");\n                return 0;\n        }", "31": "static double interpolate(Data f[], int xi, int n)\n{\n        for (int i = 0; i < n; i++)\n        {\n                double term = f[i].y;\n                for (int j = 0; j < n; j++)\n                {\n                        if (j != i)\n                                term = term*(xi - f[j].x) / (f[i].x - f[j].x);\n                }\n                result += term;\n        }\n        return result;\n}\n", "32": "static void printDivisors(int n)\n        {\n                for (int i=1; i<=Math.sqrt(n); i++)\n                {\n                        if (n%i==0)\n                        {\n                                if (n/i == i)\n                                        System.out.print(\" \"+ i);\n                                        System.out.print(i+\" \" + n/i + \" \" );\n                        }\n                }\n        }", "33": "static void printDivisors(int n)\n        {\n                for (int i=1;i<=n;i++)\n                        if (n%i==0)\n                                System.out.print(i+\" \");\n        }", "34": "public static void printDivisors(int n)\n{ int i;\n        for( i = 1; i * i < n; i++)\n        {\n                if (n % i == 0)\n                        System.out.print(i + \" \");\n        }\n        if(i-(n/i)==1)\n        {\n        i--;\n        }\n        for(; i >= 1; i--)\n        {\n                if (n % i == 0)\n                        System.out.print(n / i + \" \");\n        }\n}", "35": "static void printDivisors(int n)\n        {\n                Vector<Integer> v = new Vector<>();\n                for (int i = 1; i <= Math.sqrt(n); i++) {\n                        if (n % i == 0) {\n                                if (n / i == i)\n                                        System.out.printf(\"%d \", i);\n                                else {\n                                        System.out.printf(\"%d \", i);\n                                        v.add(n / i);\n                                }\n                        }\n                }\n                for (int i = v.size() - 1; i >= 0; i--)\n                        System.out.printf(\"%d \", v.get(i));\n        }\n", "36": "static int gcd(int a, int b)\n{\n        while (b != 0)\n        {\n                int t = b;\n                b = a % b;\n                a = t;\n        }\n        return a;\n}\nstatic int findMinDiff(int a, int b, int x, int y)\n{\n        int g = gcd(a,b);\n        int diff = Math.abs(x - y) % g;\n        return Math.min(diff, g - diff);\n}", "37": "static void findPairs(int n)\n{\n        int cubeRoot = (int) Math.pow(n, 1.0/3.0);\n        HashMap<Integer, pair> s = new HashMap<Integer, pair>();\n        for (int x = 1; x < cubeRoot; x++)\n        {\n                for (int y = x + 1; y <= cubeRoot; y++)\n                {\n                        int sum = x*x*x + y*y*y;\n                        if (sum != n)\n                                continue;\n                        if (s.containsKey(sum))\n                        {\n                                System.out.print(\"(\" + s.get(sum).first+ \", \"\n                                        + s.get(sum).second+ \") and (\" + x+ \", \" + y+ \")\" +\"\\n\");\n                        }\n                        else\n                                s.put(sum, new pair(x, y));\n                }\n        }\n}", "38": "static void findPairs(int n)\n{\n        int cubeRoot = (int)Math.pow( n, 1.0 / 3.0);\n        int cube[] = new int[cubeRoot + 1];\n        for (int i = 1; i <= cubeRoot; i++)\n                cube[i] = i * i * i;\n        int l = 1;\n        int r = cubeRoot;\n        while (l < r)\n        {\n                if (cube[l] + cube[r] < n)\n                        l++;\n                else if(cube[l] + cube[r] > n)\n                        r--;\n                else {\n                        System.out.println(\"(\" + l + \", \" + r + \")\" );\n                        l++; r--;\n                }\n        }\n}", "39": "static int divSum(int num)\n        {\n                int result = 0;\n                for (int i = 2; i <= Math.sqrt(num); i++)\n                {\n                        if (num % i == 0)\n                        {\n                                if (i == (num / i))\n                                        result += i;\n                                else\n                                        result += (i + num / i);\n                        }\n                }\n                return (result + 1);\n        }", "40": "static int aModM(String s, int mod)\n        {\n                int number = 0;\n                for (int i = 0; i < s.length(); i++)\n                {\n                        number = (number * 10 );\n                        int x = Character.getNumericValue(s.charAt(i));\n                        number = number + x;\n                        number %= mod;\n                }\n                return number;\n        }\nstatic int ApowBmodM(String a, int b, int m)\n        {\n                int ans = aModM(a, m);\n                int mul = ans;\n                for (int i = 1; i < b; i++)\n                        ans = (ans * mul) % m;\n                return ans;\n        }", "41": "static int highestPowerof2(int x)\n        {\n                x |= x >> 1;\n                x |= x >> 2;\n                x |= x >> 4;\n                x |= x >> 8;\n                x |= x >> 16;\n                return x ^ (x >> 1); \n        }", "42": "static int highestPowerof2(int n)\n{\n        int p = (int)(Math.log(n) /\n                                Math.log(2));\n        return (int)Math.pow(2, p);\n}", "43": "static int highestPowerof2(int n)\n{\n        int res = 0;\n        for(int i = n; i >= 1; i--)\n        {\n                if ((i & (i-1)) == 0)\n                {\n                        res = i;\n                        break;\n                }\n        }\n        return res;\n}\n", "44": "public static long SubArraySum( int arr[] , int n )\n        {\n                long result = 0;\n                for (int i=0; i<n; i++)\n                        result += (arr[i] * (i+1) * (n-i));\n                return result ;\n        }", "45": "public static long SubArraySum(int arr[], int n)\n        {\n                long result = 0,temp=0;\n                for (int i = 0; i < n; i ++)\n                {\n                        temp=0;\n                        for (int j = i; j < n; j ++)\n                        {\n                                temp+=arr[j];\n                                result += temp ;\n                        }\n                }\n                return result ;\n        }", "46": "static int maxPrimefactorNum(int N) {\n                boolean arr[] = new boolean[N + 5];\n                for (int i = 3; i * i <= N; i += 2) {\n                        if (!arr[i]) {\n                                for (int j = i * i; j <= N; j += i) {\n                                        arr[j] = true;\n                                }\n                        }\n                }\n                Vector<Integer> prime = new Vector<>();\n                prime.add(prime.size(), 2);\n                for (int i = 3; i <= N; i += 2) {\n                        if (!arr[i]) {\n                                prime.add(prime.size(), i);\n                        }\n                }\n                int i = 0, ans = 1;\n                while (ans * prime.get(i) <= N && i < prime.size()) {\n                        ans *= prime.get(i);\n                        i++;\n                }\n                return ans;\n        }", "47": "static int maxPrimefactorNum(int N) {\n                int arr[] = new int[N + 5];\n                Arrays.fill(arr, 0);\n                for (int i = 2; i * i <= N; i++) {\n                        if (arr[i] == 0) {\n                                for (int j = 2 * i; j <= N; j += i) {\n                                        arr[j]++;\n                                }\n                        }\n                        arr[i] = 1;\n                }\n                int maxval = 0, maxint = 1;\n                for (int i = 1; i <= N; i++) {\n                        if (arr[i] > maxval) {\n                                maxval = arr[i];\n                                maxint = i;\n                        }\n                }\n                return maxint;\n        }", "48": "static int getDigitProduct(int x)\n{\n        if (x < 10)\n        return x;\n        if (prodDig[x] != 0)\n        return prodDig[x];\n        int prod = (x % 10) * getDigitProduct(x/10);\n        return (prodDig[x] = prod);\n}\nstatic void findSeed(int n)\n{\n        List<Integer> res = new ArrayList<Integer>();\n        for (int i=1; i<=n/2; i++)\n                if (i*getDigitProduct(i) == n)\n                        res.add(i);\n        if (res.size() == 0)\n        {\n                System.out.println(\"NO seed exists\");\n                return;\n        }\n        for (int i=0; i<res.size(); i++)\n                System.out.print(res.get(i)+\" \");\n}", "49": "static int convert(int m, int n)\n        {\n                if (m == n)\n                        return 0;\n                if (m > n)\n                        return m - n;\n                if (m <= 0 && n > 0)\n                        return -1;\n                if (n % 2 == 1)\n                        return 1 + convert(m, n + 1);\n                else\n                        return 1 + convert(m, n / 2);\n        }", "50": "static boolean checkPandigital(int b, String n) {\n if (n.length() < b)\n return false;\n boolean hash[] = new boolean[b];\n Arrays.fill(hash, false);\n for (int i = 0; i < n.length(); i++) {\n if (n.charAt(i) >= '0' && n.charAt(i) <= '9')\n hash[n.charAt(i) - '0'] = true;\n else if (n.charAt(i) - 'A' <= b - 11)\n hash[n.charAt(i) - 'A' + 10] = true;\n }\n for (int i = 0; i < b; i++)\n if (hash[i] == false)\n return false;\n return true;\n }", "51": "static boolean isAutomorphic(int N)\n {\n int sq = N * N;\n while (N > 0) {\n if (N % 10 != sq % 10)\n return false;\n N /= 10;\n sq /= 10;\n }\n return true;\n }", "52": "static void sieve(int n)\n {\n boolean[] prime=new boolean[n+1];\n for (int p = 2; p*p <= n; p++)\n {\n if (prime[p] == false)\n {\n for (int i = p*2; i <= n; i += p)\n prime[i] = true;\n }\n }\n for (int p = 2; p <= n; p++)\n if (prime[p]==false)\n allPrimes.add(p);\n }\n static int factorialDivisors(int n)\n {\n int result = 1;\n for (int i = 0; i < allPrimes.size(); i++)\n {\n int p = allPrimes.get(i);\n int exp = 0;\n while (p <= n)\n {\n exp = exp + (n/p);\n p = p*allPrimes.get(i);\n }\n result = result*((int)Math.pow(allPrimes.get(i), exp+1)-1)/\n (allPrimes.get(i)-1);\n }\n return result;\n }", "53": "static int fact(int n)\n {\n if (n == 0)\n return 1;\n return n*fact(n-1);\n }\n static int div(int x)\n {\n int ans = 0;\n for (int i = 1; i<= x; i++)\n if (x%i == 0)\n ans += i;\n return ans;\n }\n static int sumFactDiv(int n)\n {\n return div(fact(n));\n }", "54": "static void sieveOfEratostheneses()\n {\n isPrime[1] = true;\n for (int i = 2; i * i < MAX; i++)\n {\n if (!isPrime[i])\n {\n for (int j = 2 * i; j < MAX; j += i)\n isPrime[j] = true;\n }\n }\n }\n static int findPrime(int n)\n {\n int num = n + 1;\n while (num > 0)\n {\n if (!isPrime[num])\n return num;\n num = num + 1;\n }\n return 0;\n }\n static int minNumber(int arr[], int n)\n {\n sieveOfEratostheneses();\n int sum = 0;\n for (int i = 0; i < n; i++)\n sum += arr[i];\n if (!isPrime[sum])\n return 0;\n int num = findPrime(sum);\n return num - sum;\n }", "55": "static boolean isPrime(int n)\n {\n if (n <= 1)\n return false;\n for (int i = 2; i < n; i++)\n if (n % i == 0)\n return false;\n return true;\n }\n static int findPrime(int n)\n {\n int num = n + 1;\n while (num > 0)\n {\n if (isPrime(num))\n return num;\n num = num + 1;\n }\n return 0;\n }\n static int minNumber(int arr[], int n)\n {\n int sum = 0;\n for (int i = 0; i < n; i++)\n sum += arr[i];\n if (isPrime(sum))\n return 0;\n int num = findPrime(sum);\n return num - sum;\n }", "56": "static int countConsecutive(int N)\n {\n int count = 0;\n for (int L = 1; L * (L + 1) < 2 * N; L++) {\n double a = (double)((1.0 * N - (L * (L + 1)) / 2) / (L + 1));\n if (a - (int)a == 0.0)\n count++;\n }\n return count;\n }", "57": "static int area_fun(int side)\n {\n int area = side * side;\n return area;\n }", "58": "static boolean isComposite(int n)\n {\n if (n <= 1)\n System.out.println(\"False\");\n if (n <= 3)\n System.out.println(\"False\");\n if (n % 2 == 0 n % 3 == 0) return true;\n for (int i = 5; i * i <= n; i = i + 6)\n if (n % i == 0 || n % (i + 2) == 0)\n return true;\n return false;\n }", "59": "public static void printTaxicab2(int N)\n {\n int i = 1, count = 0;\n while (count < N)\n {\n int int_count = 0;\n for (int j = 1; j <= Math.pow(i, 1.0/3); j++)\n for (int k = j + 1; k <= Math.pow(i, 1.0/3); k++)\n if (j * j * j + k * k * k == i)\n int_count++;\n if (int_count == 2)\n {\n count++;\n System.out.println(count + \" \" + i); \n }\n i++;\n }\n }", "60": "static void SieveOfEratosthenes(int largest, ArrayList<Integer> prime)\n  {\n boolean[] isPrime = new boolean[largest + 1];\n Arrays.fill(isPrime, true);\n for (int p = 2; p * p <= largest; p++)\n {\n if (isPrime[p] == true)\n {\n for (int i = p * 2; i <= largest; i += p)\n isPrime[i] = false;\n }\n }\n for (int p = 2; p <= largest; p++)\n if (isPrime[p])\n prime.add(p);\n  }\n static long countDivisorsMult(int[] arr, int n)\n  {\n int largest = 0;\n for(int a : arr )\n {\n largest=Math.max(largest, a);\n }\n ArrayList<Integer> prime = new ArrayList<Integer>();\n SieveOfEratosthenes(largest, prime);\n Map<Integer,Integer> mp = new HashMap<>();\n for (int i = 0; i < n; i++)\n {\n for (int j = 0; j < prime.size(); j++)\n {\n while(arr[i] > 1 && arr[i]%prime.get(j) == 0)\n {\n arr[i] /= prime.get(j);\n if(mp.containsKey(prime.get(j)))\n {\n mp.put(prime.get(j), mp.get(prime.get(j)) + 1);\n }\n else\n {\n mp.put(prime.get(j), 1);\n }\n }\n }\n if (arr[i] != 1)\n {\n if(mp.containsKey(arr[i]))\n {\n mp.put(arr[i], mp.get(arr[i]) + 1);\n }\n else\n {\n mp.put(arr[i], 1);\n }\n }\n }\n long res = 1;\n for (int it : mp.keySet())\n res *= (mp.get(it) + 1L);\n return res;\n  }", "61": "static int counDivisors(int X)\n {\n int count = 0;\n for (int i = 1; i <= X; ++i)\n {\n if (X % i == 0) {\n count++;\n }\n }\n return count;\n }\n static int countDivisorsMult(int arr[], int n)\n {\n int mul = 1;\n for (int i = 0; i < n; ++i)\n mul *= arr[i];\n return counDivisors(mul);\n }", "62": "static long ispowerof2 ( long num )\n {\n if ((num & (num - 1)) == 0)\n return 1;\n return 0;\n }", "63": "static int isPowerOf2(String s)\n {\n char []str = s.toCharArray();\n int len_str = s.length();\n int num = 0;\n if (len_str == 1 && str[len_str - 1] == '1')\n return 0;\n while (len_str != 1 str[len_str - 1] != '1')\n {\n if ((str[len_str - 1] - '0') % 2 == 1)\n return 0;\n int j = 0;\n for (int i = 0; i < len_str; i++)\n {\n num = num * 10 + (int)str[i] - (int)'0';\n if (num < 2)\n {\n if (i != 0)\n str[j++] = '0'; \n continue;\n }\n str[j++] = (char)((int)(num / 2) + (int)'0');\n num = (num) - (num / 2) * 2;\n }\n str[j] = '\\0';\n len_str = j;\n }\n return 1;\n }", "64": "static int horner(int poly[], int n, int x)\n {\n int result = poly[0];\n for (int i = 1; i < n; i++)\n result = result * x + poly[i];\n return result;\n }\n static int findSign(int poly[], int n, int x)\n {\n int result = horner(poly, n, x);\n if (result > 0)\n return 1;\n else if (result < 0)\n return -1;\n return 0;\n }", "65": "static int calculate_sum(int a, int N) {\n int m = N / a;\n int sum = m * (m + 1) / 2;\n int ans = a * sum;\n return ans;\n }", "66": "static String prevNum(String str)\n {\n int len = str.length();\n int index = -1;\n for (int i = len - 2; i >= 0; i--)\n {\n if (str.charAt(i) > str.charAt(i + 1))\n {\n index = i;\n break;\n }\n }\n int smallGreatDgt = -1;\n for (int i = len - 1; i > index; i--)\n {\n if (str.charAt(i) < str.charAt(index))\n {\n if (smallGreatDgt == -1)\n {\n smallGreatDgt = i;\n }\n else if (str.charAt(i) >=\n str.charAt(smallGreatDgt))\n {\n smallGreatDgt = i;\n }\n }\n }\n if (index == -1)\n {\n return \"-1\";\n }\n if (smallGreatDgt != -1)\n {\n str = swap(str, index, smallGreatDgt);\n return str;\n }\n return \"-1\";\n }\n static String swap(String str, int i, int j)\n {\n char ch[] = str.toCharArray();\n char temp = ch[i];\n ch[i] = ch[j];\n ch[j] = temp;\n return String.valueOf(ch);\n }", "67": "static void max_area(int n, int m, int k)\n {\n if (k > (n + m - 2))\n System.out.println(\"Not possible\");\n else {\n int result;\n if (k < Math.max(m, n) - 1)\n {\n result = Math.max(m * (n / (k + 1)),\n n * (m / (k + 1)));\n }\n else {\n result = Math.max(m / (k - n + 2),\n n / (k - m + 2));\n }\n System.out.println(result);\n }\n }", "68": "static int sum(int L, int R)\n {\n int p = R / 6;\n int q = (L - 1) / 6;\n int sumR = 3 * (p * (p + 1));\n int sumL = (q * (q + 1)) * 3;\n return sumR - sumL;\n }", "69": "static float avgOfFirstN(int n)\n {\n return (float)(1 + n) / 2;\n }", "70": "static int sn(int n, int an)\n {\n return (n * (1 + an)) / 2;\n }\n static int trace(int n, int m)\n {\n int an = 1 + (n - 1) * (m + 1);\n int rowmajorSum = sn(n, an);\n an = 1 + (n - 1) * (n + 1);\n int colmajorSum = sn(n, an);\n return rowmajorSum + colmajorSum;\n }", "71": "static double Convert(double radian){\n double pi = 3.14159;\n return(radian * (180/pi));\n }", "72": "public static int counLastDigitK(int low, int high, int k)\n {\n int mlow = 10 * (int)\n Math.ceil(low/10.0);\n int mhigh = 10 * (int)\n Math.floor(high/10.0);\n int count = (mhigh - mlow)/10;\n if (high % 10 >= k)\n count++;\n if (low % 10 <= k && (low%10) > 0)\n count++;\n return count;\n }", "73": "public static int counLastDigitK(int low, int high, int k)\n {\n int count = 0;\n for (int i = low; i <= high; i++)\n if (i % 10 == k)\n count++;\n return count;\n }", "74": "static int gcd(int a, int b)\n {\n if (a == 0 b == 0)\n return 0;\n if (a == b)\n return a;\n if (a > b)\n return gcd(a - b, b);\n return gcd(a, b - a);\n }\n static int cpFact(int x, int y)\n {\n while (gcd(x, y) != 1) {\n x = x / gcd(x, y);\n }\n return x;\n }", "75": "static int sumOfLargePrimeFactor(int n)\n {\n int prime[] = new int[n + 1], sum = 0;\n Arrays.fill(prime, 0);\n int max = n / 2;\n for (int p = 2; p <= max; p++)\n {\n if (prime[p] == 0)\n {\n for (int i = p * 2; i <= n; i += p)\n prime[i] = p;\n }\n }\n for (int p = 2; p <= n; p++)\n {\n if (prime[p] != 0)\n sum += prime[p];\n else\n sum += p;\n }\n return sum; \n }", "76": "public static boolean isPrime(int n)\n {\n if (n <= 1)\n return false;\n for (int i = 2; i < n; i++)\n if (n % i == 0)\n return false;\n return true;\n }\n public static boolean isEmirp(int n)\n {\n if (isPrime(n) == false)\n return false;\n int rev = 0;\n while (n != 0) {\n int d = n % 10;\n rev = rev * 10 + d;\n n /= 10;\n }\n return isPrime(rev);\n }", "77": "static int Series(int n)\n {\n int i;\n int sums = 0;\n for (i = 1; i <= n; i++)\n sums += (i * i);\n return sums;\n }", "78": "public static int TrinomialValue(int dp[][], int n, int k)\n {\n if (k < 0)\n k = -k;\n if (dp[n][k] != 0)\n return dp[n][k];\n if (n == 0 && k == 0)\n return 1;\n if (k < -n k > n)\n return 0;\n return (dp[n][k] = TrinomialValue(dp, n - 1, k - 1)\n + TrinomialValue(dp, n - 1, k)\n + TrinomialValue(dp, n - 1, k + 1));\n }\n public static void printTrinomial(int n)\n {\n int[][] dp = new int[MAX][MAX];\n for (int i = 0; i < n; i++) {\n for (int j = -i; j <= 0; j++)\n System.out.print(TrinomialValue(dp, i, j) + \" \");\n for (int j = 1; j <= i; j++)\n System.out.print(TrinomialValue(dp, i, j) + \" \");\n System.out.println();\n }\n }", "79": "public static int TrinomialValue(int n, int k)\n {\n if (n == 0 && k == 0)\n return 1;\n if (k < -n k > n)\n return 0;\n return TrinomialValue(n - 1, k - 1)\n + TrinomialValue(n - 1, k)\n + TrinomialValue(n - 1, k + 1);\n }\n public static void printTrinomial(int n)\n {\n for (int i = 0; i < n; i++)\n {\n for (int j = -i; j <= 0; j++)\n System.out.print(TrinomialValue(i, j) + \" \");\n for (int j = 1; j <= i; j++)\n System.out.print(TrinomialValue(i, j) + \" \");\n System.out.println();\n }\n }", "80": "static int lcm(int a, int b)\n {\n return (a * b) / (__gcd(a, b));\n }\n static Rational maxRational(Rational first, Rational sec)\n {\n int k = lcm(first.deno, sec.deno);\n int nume1 = first.nume;\n int nume2 = sec.nume;\n nume1 *= k / (first.deno);\n nume2 *= k / (sec.deno);\n return (nume2 < nume1)? first : sec;\n }\n static int __gcd(int a, int b)\n {\n return b == 0 ? a:__gcd(b, a % b); \n }", "81": "static int averageOdd(int n)\n {\n if (n % 2 == 0)\n {\n System.out.println(\"Invalid Input\");\n return -1;\n }\n return (n + 1) / 2;\n }", "82": "static int averageOdd(int n)\n {\n if (n % 2 == 0) {\n System.out.println(\"Invalid Input\");\n return -1;\n }\n int sum = 0, count = 0;\n while (n >= 1) {\n count++;\n sum += n;\n n = n - 2;\n }\n return sum / count;\n }", "83": "static int averageEven(int n)\n {\n if (n % 2 != 0) {\n System.out.println(\"Invalid Input\");\n return -1;\n }\n return (n + 2) / 2;\n }", "84": "static int averageEven(int n)\n {\n if (n % 2 != 0) {\n System.out.println(\"Invalid Input\");\n return -1;\n }\n int sum = 0, count = 0;\n while (n >= 2) {\n count++;\n sum += n;\n n = n - 2;\n }\n return sum / count;\n }", "85": "static void fib(int f[], int N)\n {\n f[1] = 1;\n f[2] = 1;\n for (int i = 3; i <= N; i++)\n f[i] = f[i - 1] + f[i - 2];\n }\n static void fiboTriangle(int n)\n {\n int N = n * (n + 1) / 2;\n int f[] = new int[N + 1];\n fib(f, N);\n int fiboNum = 1;\n for (int i = 1; i <= n; i++) {\n for (int j = 1; j <= i; j++)\n System.out.print(f[fiboNum++] + \" \");\n System.out.println();\n }\n }", "86": "static int avg_of_odd_num(int n)\n {\n return n;\n }", "87": "static int avg_of_odd_num(int n)\n {\n int sum = 0;\n for (int i = 0; i < n; i++)\n sum += (2 * i + 1);\n return sum / n;\n }", "88": "static boolean Div_by_8(int n)\n {\n return (((n >> 3) << 3) == n);\n }", "89": "static int digitNumber(long n) {\n if (n == 0)\n return 1;\n if (n == 1)\n return 9;\n if (n % 2 != 0) {\n int temp = digitNumber((n - 1) / 2) % mod;\n return (9 * (temp * temp) % mod) % mod;\n }\n else {\n int temp = digitNumber(n / 2) % mod;\n return (temp * temp) % mod;\n }\n }\n static int countExcluding(int n, int d) {\n if (d == 0)\n return (9 * digitNumber(n - 1)) % mod;\n else\n return (8 * digitNumber(n - 1)) % mod;\n }", "90": "static int power(int n, int r) {\n int count = 0;\n for (int i = r; (n / i) >= 1; i = i * r)\n count += n / i;\n return count;\n }", "91": "public static boolean checkdigit(int n, int k)\n {\n while (n != 0)\n {\n int rem = n % 10;\n if (rem == k)\n return true;\n n = n / 10;\n }\n return false;\n }\n public static int findNthNumber(int n, int k)\n {\n for (int i = k + 1, count = 1; count < n; i++)\n {\n if (checkdigit(i, k) || (i % k == 0))\n count++;\n if (count == n)\n return i;\n }\n return -1;\n }", "92": "static int seiresSum(int n, int[] a)\n {\n return n * (a[0] * a[0] - a[2 * n - 1] * a[2 * n - 1]) / (2 * n - 1);\n }", "93": "static int seiresSum(int n, int[] a)\n {\n int res = 0, i;\n for (i = 0; i < 2 * n; i++)\n {\n if (i % 2 == 0)\n res += a[i] * a[i];\n else\n res -= a[i] * a[i];\n }\n return res;\n }", "94": "static void series(int A, int X, int n)\n {\n int term = (int)Math.pow(A, n);\n System.out.print(term + \" \");\n for (int i = 1; i <= n; i++) {\n term = term * X * (n - i + 1)\n / (i * A);\n System.out.print(term + \" \");\n }\n }", "95": "static int factorial(int n)\n {\n int f = 1;\n for (int i = 2; i <= n; i++)\n f *= i;\n return f;\n }\n static void series(int A, int X, int n)\n {\n int nFact = factorial(n);\n for (int i = 0; i < n + 1; i++) {\n int niFact = factorial(n - i);\n int iFact = factorial(i);\n int aPow = (int)Math.pow(A, n - i);\n int xPow = (int)Math.pow(X, i);\n System.out.print((nFact * aPow * xPow)\n / (niFact * iFact) + \" \");\n }\n }", "96": "static void pythagoreanTriplet(int n)\n {\n for (int i = 1; i <= n / 3; i++)\n {\n for (int j = i + 1; j <= n / 2; j++)\n {\n int k = n - i - j;\n if (i * i + j * j == k * k)\n {\n System.out.print(i + \", \"+ j + \", \" + k);\n return;\n }\n }\n }\n System.out.print(\"No Triplet\");\n }", "97": "public static boolean isUndulating(String n)\n {\n if (n.length() <= 2)\n return false;\n for (int i = 2; i < n.length(); i++)\n if (n.charAt(i-2) != n.charAt(i))\n return false;\n return true;\n }", "98": "static boolean possibleToReach(int a, int b)\n {\n int c = (int)Math.cbrt(a * b);\n int re1 = a / c;\n int re2 = b / c;\n if ((re1 * re1 * re2 == a) &&\n (re2 * re2 * re1 == b))\n return true;\n else\n return false;\n }", "99": "static void possibleTripletInRange(int L, int R)\n {\n boolean flag = false;\n int possibleA = 0,\n possibleB = 0,\n possibleC = 0;\n int numbersInRange = (R - L + 1);\n if (numbersInRange < 3)\n {\n flag = false;\n }\n else if (numbersInRange > 3)\n {\n flag = true;\n if (L % 2 > 0)\n {\n L++;\n }\n possibleA = L;\n possibleB = L + 1;\n possibleC = L + 2;\n }\n else\n {\n if (!(L % 2 > 0))\n {\n flag = true;\n possibleA = L;\n possibleB = L + 1;\n possibleC = L + 2;\n }\n else\n {\n flag = false;\n }\n }\n if (flag == true)\n {\n System.out.println(\"(\" + possibleA + \", \" + possibleB + \", \" + possibleC + \")\" + \" is one such possible\" + \" triplet between \" + L + \" and \" + R );\n }\n else {\n System.out.println(\"No Such Triplet\" + \" exists between \" + L + \" and \" + R);\n }\n }", "100": "static int gcd(int a, int b)\n {\n if (a == 0)\n return b;\n return gcd(b % a, a);\n }\n static boolean coprime(int a, int b)\n {\n return (gcd(a, b) == 1);\n }\n static void possibleTripletInRange(int L, int R)\n {\n boolean flag = false;\n int possibleA = 0, possibleB = 0,\n possibleC = 0;\n for (int a = L; a <= R; a++) {\n for (int b = a + 1; b <= R; b++) {\n for (int c = b + 1; c <= R; c++)\n {\n if (coprime(a, b) && coprime(b, c)\n && !coprime(a, c))\n {\n flag = true;\n possibleA = a;\n possibleB = b;\n possibleC = c;\n break;\n }\n }\n }\n }\n if (flag == true) {\n System.out.println(\"(\" + possibleA + \", \" + possibleB + \", \" + possibleC + \")\" + \" is one such possible triplet \" + \"between \" + L + \" and \" + R);\n }\n else {\n System.out.println(\"No Such Triplet exists\" + \"between \" + L + \" and \" + R);\n }\n }", "101": "static int fact(int n)\n {\n if (n == 0 n == 1)\n return 1 ;\n int ans = 1;\n for (int i = 1 ; i <= n; i++)\n ans = ans * i ;\n return ans ;\n }\n static int nCr(int n, int r)\n {\n int Nr = n , Dr = 1 , ans = 1;\n for (int i = 1 ; i <= r ; i++ )\n {\n ans = ( ans * Nr ) / ( Dr ) ;\n Nr-- ;\n Dr++ ;\n }\n return ans ;\n }\n static int solve ( int n )\n {\n int N = 2 * n - 2 ;\n int R = n - 1 ;\n return nCr (N, R) * fact(n - 1) ;\n }", "102": "static int findpos(String n)\n {\n int pos = 0;\n for (int i = 0; i < n.length(); i++)\n {\n switch (n.charAt(i))\n {\n case '2':\n pos = pos * 4 + 1;\n break;\n case '3':\n pos = pos * 4 + 2;\n break;\n case '5':\n pos = pos * 4 + 3;\n break;\n case '7':\n pos = pos * 4 + 4;\n break;\n }\n }\n return pos;\n }", "103": NaN, "104": "static String find_Square_369(String num)\n {\n char a, b, c, d;\n if (num.charAt(0) == '3')\n {a = '1'; b = '0'; c = '8'; d = '9';}\n else if (num.charAt(0) == '6')\n {a = '4'; b = '3'; c = '5'; d = '6';}\n else\n {a = '9'; b = '8'; c = '0'; d = '1';}\n String result = \"\";\n int size = num.length();\n for (int i = 1; i < size; i++)\n result += a;\n result += b;\n for (int i = 1; i < size; i++)\n result += c;\n result += d;\n return result;\n }", "105": "static long power(long x, long y, long p)\n {\n x = x % p;\n while (y > 0)\n {\n if ((y & 1) > 0)\n res = (res * x) % p;\n x = (x * x) % p;\n }\n return res;\n }", "106": "static int findNthNonSquare(int n)\n {\n double x = (double)n;\n double ans = x + Math.floor(0.5 +\n Math.sqrt(x));\n return (int)ans;\n }", "107": "static boolean isPrime(int n)\n {\n if (n <= 1)\n return false;\n if (n <= 3)\n return true;\n if (n % 2 == 0 n % 3 == 0)\n return false;\n for(int i = 5; i * i <= n; i = i + 6)\n if (n % i == 0 || n % (i + 2) == 0)\n return false;\n return true;\n }\n static int SumOfPrimeDivisors(int n)\n {\n int sum = 0;\n int root_n = (int)Math.sqrt(n);\n for(int i = 1; i <= root_n; i++)\n {\n if (n % i == 0)\n {\n if (i == n / i && isPrime(i))\n {\n sum += i;\n }\n else\n {\n if (isPrime(i))\n {\n sum += i;\n }\n if (isPrime(n / i))\n {\n sum += (n / i);\n }\n }\n }\n }\n return sum;\n }", "108": "static int Sum(int N)\n {\n int SumOfPrimeDivisors[] = new int[N + 1];\n for (int i = 2; i <= N; ++i)\n {\n if (SumOfPrimeDivisors[i] == 0)\n {\n for (int j = i; j <= N; j += i)\n {\n SumOfPrimeDivisors[j] += i;\n }\n }\n }\n return SumOfPrimeDivisors[N];\n }", "109": "static boolean isPrime(int n)\n {\n if (n <= 1)\n return false;\n if (n <= 3)\n return true;\n if (n % 2 == 0 n % 3 == 0)\n return false;\n for (int i = 5; i * i <= n; i = i + 6)\n if (n % i == 0 ||\n n % (i + 2) == 0)\n return false;\n return true;\n }\n static int SumOfPrimeDivisors(int n)\n {\n int sum = 0;\n for (int i = 1; i <= n; i++)\n {\n if (n % i == 0)\n {\n if (isPrime(i))\n sum += i;\n }\n }\n return sum;\n }", "110": "static int check(int n)\n {\n int sum = 0;\n while (n != 0)\n {\n sum += n % 10;\n n = n / 10;\n }\n if (sum % 7 == 0)\n return 1;\n else\n return 0;\n }", "111": "static boolean isPrime(int n)\n {\n int i, c = 0;\n for (i = 1; i < n / 2; i++)\n {\n if (n % i == 0)\n c++;\n }\n if (c == 1)\n {\n return true;\n }\n else\n {\n return false;\n }\n }\n static void findMinNum(int arr[], int n)\n {\n int first = 0, last = 0, num, rev, i;\n int hash[] = new int[10];\n for ( i = 0; i < n; i++)\n {\n hash[arr[i]]++;\n }\n System.out.print(\"Minimum number: \");\n for ( i = 0; i <= 9; i++)\n {\n for (int j = 0; j < hash[i]; j++)\n System.out.print(i);\n }\n System.out.println();\n System.out.println();\n for (i = 0; i <= 9; i++)\n {\n if (hash[i] != 0)\n {\n first = i;\n break;\n }\n }\n for (i = 9; i >= 0; i--)\n {\n if (hash[i] != 0)\n {\n last = i;\n break;\n }\n }\n num = first * 10 + last;\n rev = last * 10 + first;\n System.out.print( \"Prime combinations: \");\n if (isPrime(num) && isPrime(rev))\n {\n System.out.println(num + \" \" + rev);\n } \n else if (isPrime(num))\n {\n System.out.println(num);\n } \n else if (isPrime(rev))\n {\n System.out.println(rev);\n } \n else\n {\n System.out.println(\"No combinations exist\");\n }\n }", "112": "static float Time(float arr[], int n, float Emptypipe)\n {\n float fill = 0;\n for (int i = 0; i < n; i++)\n fill += 1 / arr[i];\n fill = fill - (1 / (float)Emptypipe);\n return 1 / fill;\n }", "113": "static int calculateSum(int n)\n {\n return ((int)Math.pow(2, n + 1) + n - 2);\n }", "114": "static int Race(int B, int C)\n {\n int result = 0;\n result = ((C * 100) / B);\n return 100 - result;\n }", "115": "public int nthTerm(int N)\n {\n return (N * ((N / 2) + ((N % 2) * 2) + N));\n }", "116": "static int nextPerfectCube(int N)\n {\n int nextN = (int)Math.floor(Math.cbrt(N)) + 1;\n return nextN * nextN * nextN;\n }", "117": "static boolean arePermutations(int a[], int b[], int n, int m)\n {\n int sum1 = 0, sum2 = 0, mul1 = 1, mul2 = 1;\n for (int i = 0; i < n; i++) {\n sum1 += a[i];\n mul1 *= a[i];\n }\n for (int i = 0; i < m; i++) {\n sum2 += b[i];\n mul2 *= b[i];\n }\n return ((sum1 == sum2) && (mul1 == mul2));\n }", "118": "static int printNthElement(int n)\n {\n int arr[] = new int[n + 1];\n arr[1] = 3;\n arr[2] = 5;\n for (int i = 3; i <= n; i++) {\n if (i % 2 != 0)\n arr[i] = arr[i / 2] * 10 + 3;\n else\n arr[i] = arr[(i / 2) - 1] * 10 + 5;\n }\n return arr[n];\n }", "119": "static String findNthNo(int n)\n {\n String res = \"\";\n while (n >= 1) {\n if ((n & 1) == 1) {\n res = res + \"3\";\n n = (n - 1) / 2;\n }\n else {\n res = res + \"5\";\n n = (n - 2) / 2;\n }\n }\n StringBuilder sb = new StringBuilder(res);\n sb.reverse();\n return new String(sb);\n }", "120": "static int calculateSum(int n)\n {\n return n * (n + 1) / 2 \n + (int)Math.pow((n * (n + 1) / 2), 2);\n }", "121": "static int nthTerm(int n)\n {\n return 3 * (int) Math.pow(n, 2) - 4 * n + 2;\n }", "122": "static float area(float a)\n {\n if (a < 0)\n return -1;\n float area = (float)Math.pow((a * Math.sqrt(3)) / (Math.sqrt(2)), 2);\n return area;\n }", "123": "static boolean isPrime(int n)\n {\n if (n <= 1)\n return false;\n if (n <= 3)\n return true;\n if (n % 2 == 0 n % 3 == 0)\n return false;\n for (int i = 5; i * i <= n; i = i + 6) {\n if (n % i == 0 || n % (i + 2) == 0) {\n return false;\n }\n }\n return true;\n }\n static boolean isPowerOfTwo(int n)\n {\n return n != 0 && ((n & (n - 1)) == 0);\n }", "124": "static void SieveOfEratosthenes()\n {\n boolean []prime = new boolean[MAX];\n Arrays.fill(prime, true);\n prime[0] = false;\n prime[1] = false;\n for (int p = 2; p * p < MAX; p++)\n {\n if (prime[p] == true)\n {\n for (int i = p * 2; i < MAX; i += p)\n prime[i] = false;\n }\n }\n int product = 1;\n for (int p = 2; p < MAX; p++)\n {\n if (prime[p])\n {\n product = product * p;\n s.add(product + 1);\n }\n }\n }\n static boolean isEuclid(int n)\n {\n if (s.contains(n))\n return true;\n else\n return false;\n }", "125": "static void SieveOfEratosthenes()\n {\n boolean[] prime = new boolean[MAX];\n for (int i = 0; i < MAX; i++)\n prime[i] = true;\n for (int p = 2; p * p < MAX; p++) {\n if (prime[p] == true) {\n for (int i = p * 2; i < MAX; i += p)\n prime[i] = false;\n }\n }\n for (int p = 2; p < MAX; p++)\n if (prime[p])\n arr.add(p);\n }\n static boolean isEuclid(long n)\n {\n long product = 1;\n int i = 0;\n while (product < n) {\n product = product * arr.get(i);\n if (product + 1 == n)\n return true;\n i++;\n }\n return false;\n }", "126": "static void printLines(int n, int k)\n {\n for (int i = 0; i < n; i++) {\n System.out.println ( k * (6 * i + 1) + \" \"\n + k * (6 * i + 2) + \" \"\n + k * (6 * i + 3) + \" \"\n + k * (6 * i + 5) );\n }\n }", "127": NaN, "128": "static void generateDivisors(int n)\n {\n for (int i = 1; i <= Math.sqrt(n); i++) {\n if (n % i == 0) {\n if (n / i == i)\n arr.add(i);\n {\n arr.add(i);\n arr.add(n / i);\n }\n }\n }\n }\n static double harmonicMean(int n)\n {\n generateDivisors(n);\n double sum = 0.0;\n int len = arr.size();\n for (int i = 0; i < len; i++)\n sum = sum + n / arr.get(i);\n sum = sum / n;\n return arr.size() / sum;\n }\n static boolean isOreNumber(int n)\n {\n double mean = harmonicMean(n);\n if (mean - Math.floor(mean) == 0)\n return true;\n else\n return false;\n }", "129": "static void isHalfReducible(int arr[], int n, int m)\n {\n int frequencyHash[] = new int[m + 1];\n int i;\n for(i = 0 ; i < frequencyHash.length ; i++)\n frequencyHash[i] = 0 ;\n for (i = 0; i < n; i++) {\n frequencyHash[arr[i] % (m + 1)]++;\n }\n for (i = 0; i <= m; i++) {\n if (frequencyHash[i] >= n / 2)\n break;\n }\n if (i <= m)\n System.out.println(\"Yes\") ;\n else\n System.out.println(\"No\") ;\n }", "130": "static double Nth_Term(int n)\n {\n return (2 * Math.pow(n, 3) - 3 *\n Math.pow(n, 2) + n + 6) / 6;\n }", "131": "static int largestPrimeFactor(int n)\n {\n int max = -1;\n while (n % 2 == 0) {\n max = 2;\n }\n for (int i = 3; i <= Math.sqrt(n); i += 2) {\n while (n % i == 0) {\n max = i;\n n = n / i;\n }\n }\n if (n > 2)\n max = n;\n return max;\n }\n static boolean checkUnusual(int n)\n {\n int factor = largestPrimeFactor(n);\n if (factor > Math.sqrt(n)) {\n return true;\n }\n else {\n return false;\n }\n }", "132": "static boolean check(int s)\n {\n int[] freq = new int[10];\n int r,i;\n for(i=0;i<10;i++)\n {\n freq[i]= 0;\n }\n while(s != 0)\n {\n r = s % 10;\n s = (int)(s / 10);\n freq[r] += 1;\n }\n int xor__ = 0;\n for ( i=0;i<10;i++)\n {\n xor__ = xor__ ^ freq[i];\n if(xor__ == 0)\n return true;\n else\n return false;\n }\n return true;\n }", "133": "public static float getSum(int a, int n)\n {\n float sum = 0;\n for (int i = 1; i <= n; ++i) {\n sum += (i / Math.pow(a, i));\n }\n return sum;\n }", "134": "static int countDigitsToBeRemoved(int N, int K)\n {\n String s = Integer.toString(N);\n int res = 0;\n int f_zero = 0;\n for (int i = s.length() - 1; i >= 0; i--) {\n if (K == 0)\n return res;\n if (s.charAt(i) == '0') {\n f_zero = 1;\n K--;\n }\n else\n res++;\n }\n if (K == 0)\n return res;\n else if (f_zero == 1)\n return s.length() - 1;\n return -1;\n }", "135": "static boolean isPrime(long n)\n {\n if (n <= 1)\n return false;\n if (n <= 3)\n return true;\n if (n % 2 == 0 n % 3 == 0)\n return false;\n for (int i = 5; i * i <= n; i = i + 6)\n if (n % i == 0 || n % (i + 2) == 0)\n return false;\n return true;\n }\n static boolean isFactorialPrime(long n)\n {\n if (!isPrime(n))\n return false;\n long fact = 1;\n int i = 1;\n while (fact <= n + 1) {\n fact = fact * i;\n if (n + 1 == fact n - 1 == fact)\n return true;\n i++;\n }\n return false;\n }", "136": "static boolean isPrime(int n)\n {\n if (n <= 1)\n return false;\n if (n <= 3)\n return true;\n if (n % 2 == 0 n % 3 == 0)\n return false;\n for (int i = 5; i * i <= n; i = i + 6)\n if (n % i == 0 || n % (i + 2) == 0)\n return false;\n return true;\n }\n static boolean isStrongPrime(int n)\n {\n if (!isPrime(n) n == 2)\n return false;\n int previous_prime = n - 1;\n int next_prime = n + 1;\n while (!isPrime(next_prime))\n next_prime++;\n while (!isPrime(previous_prime))\n previous_prime--;\n int mean = (previous_prime + next_prime) / 2;\n if (n > mean)\n return true;\n else\n return false;\n }", "137": "static int gcd(int a, int b)\n {\n if (b == 0)\n return a;\n else\n return gcd(b, a % b);\n }\n static int lcmOfArray(int arr[], int n)\n {\n if (n < 1)\n return 0;\n int lcm = arr[0];\n for (int i = 1; i < n; i++)\n lcm = (lcm * arr[i]) / gcd(lcm, arr[i]);\n return lcm;\n }\n static int minPerfectCube(int arr[], int n)\n {\n int minPerfectCube;\n int lcm = lcmOfArray(arr, n);\n minPerfectCube = lcm;\n int cnt = 0;\n while (lcm > 1 && lcm % 2 == 0)\n {\n cnt++;\n lcm /= 2;\n }\n if (cnt % 3 == 2)\n minPerfectCube *= 2;\n else if (cnt % 3 == 1)\n minPerfectCube *= 4;\n int i = 3;\n while (lcm > 1)\n {\n cnt = 0;\n while (lcm % i == 0)\n {\n cnt++;\n lcm /= i;\n }\n if (cnt % 3 == 1)\n minPerfectCube *= i * i;\n else if (cnt % 3 == 2)\n minPerfectCube *= i;\n i += 2;\n }\n return minPerfectCube;\n }", "138": "static int countOdd(int [] arr, int n)\n {\n int odd = 0;\n for (int i = 0; i < n; i++)\n {\n if (arr[i] % 2 == 1)\n odd++;\n }\n return odd;\n }\n static int countValidPairs(int [] arr, int n)\n {\n int odd = countOdd(arr, n);\n return (odd * (odd - 1)) / 2;\n }", "139": "static int minAbsDiff(int n)\n {\n int mod = n % 4;\n if (mod == 0 mod == 3)\n {\n return 0;\n }\n return 1;\n }", "140": "static boolean digitWell(int n, int m, int k)\n {\n int cnt = 0;\n while (n > 0)\n {\n if (n % 10 == m)\n ++cnt;\n n /= 10;\n }\n return cnt == k;\n }\n static int findInt(int n, int m, int k)\n {\n int i = n + 1;\n while (true)\n {\n if (digitWell(i, m, k))\n return i;\n i++;\n }\n }", "141": "static int minValue(int n, int x, int y)\n {\n float val = (y * n) / 100;\n if (x >= val)\n return 0;\n else\n return (int)(Math.ceil(val)-x);\n }", "142": "static void initialize()\n {\n l[0][0] = 1;\n for (int i = 1; i < 1001; i++) {\n l[i][0] = 1;\n for (int j = 1; j < i + 1; j++) {\n l[i][j] = (l[i - 1][j - 1] + l[i - 1][j]);\n }\n }\n }\n static int nCr(int n, int r)\n {\n return l[n][r];\n }", "143": "static int findAndSum(int []arr, int n)\n {\n int sum = 0;\n int mul = 1;\n for (int i = 0; i < 30; i++)\n {\n boolean count_on = false;\n int l = 0;\n for (int j = 0; j < n; j++)\n {\n if ((arr[j] & (1 << i)) > 0)\n if (count_on)\n l++;\n else\n {\n count_on = true;\n l++;\n }\n else if (count_on)\n {\n sum += ((mul * l * (l + 1)) / 2);\n count_on = false;\n l = 0;\n }\n }\n if (count_on)\n {\n sum += ((mul * l * (l + 1)) / 2);\n count_on = false;\n l = 0;\n }\n mul *= 2;\n }\n return sum;\n }", "144": "static int Cycles(int N)\n {\n int fact = 1, result = 0;\n result = N - 1;\n int i = result;\n while (i > 0)\n {\n fact = fact * i;\n i--;\n }\n return fact / 2;\n }", "145": "static void BalanceArray(int [] A, int [][] Q)\n {\n int [] ANS = new int [A.length];\n int i, sum = 0;\n for (i = 0; i < A.length; i++)\n if (A[i] % 2 == 0)\n sum = sum + A[i];\n for (i = 0; i < Q.length; i++)\n {\n int index = Q[i][0];\n int value = Q[i][1];\n if (A[index] % 2 == 0)\n sum = sum - A[index];\n A[index] = A[index] + value;\n if (A[index] % 2 == 0)\n sum = sum + A[index];\n ANS[i]= sum;\n }\n for (i = 0; i < ANS.length; i++)\n System.out.print(ANS[i] + \" \");\n }", "146": "static int EvenSum(int [] A, int index, int value)\n {\n A[index] = A[index] + value;\n int sum = 0;\n for (int i = 0; i < A.length; i++)\n if (A[i] % 2 == 0)\n sum = sum + A[i];\n return sum;\n }\n static void BalanceArray(int [] A, int [][] Q)\n {\n int [] ANS = new int[Q.length];\n int i, sum;\n for (i = 0; i < Q.length; i++)\n {\n int index = Q[i][0];\n int value = Q[i][1];\n sum = EvenSum(A, index, value);\n ANS[i] = sum;\n }\n for (i = 0; i < ANS.length; i++)\n System.out.print(ANS[i] + \" \");\n }", "147": "static int countWays(int N)\n {\n int E = (N * (N - 1)) / 2;\n if (N == 1)\n return 0;\n return (int)Math.pow(2, E - 1);\n }", "148": "static int countNumbers(int L, int R, int K) {\n if (K == 9) {\n K = 0;\n }\n int totalnumbers = R - L + 1;\n int factor9 = totalnumbers / 9;\n int rem = totalnumbers % 9;\n int ans = factor9;\n for (int i = R; i > R - rem; i--) {\n int rem1 = i % 9;\n if (rem1 == K) {\n ans++;\n }\n }\n return ans;\n }", "149": "static int countQuadruples(int a[], int n)\n {\n HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();\n for (int i = 0; i < n; i++)\n if (mp.containsKey(a[i]))\n {\n mp.put(a[i], mp.get(a[i]) + 1);\n }\n else\n {\n mp.put(a[i], 1);\n }\n int count = 0;\n for (int j = 0; j < n; j++)\n {\n for (int k = 0; k < n; k++)\n {\n if (j == k)\n continue;\n mp.put(a[j], mp.get(a[j]) - 1);\n mp.put(a[k], mp.get(a[k]) - 1);\n int first = a[j] - (a[k] - a[j]);\n int fourth = (a[k] * a[k]) / a[j];\n if ((a[k] * a[k]) % a[j] == 0)\n {\n if (a[j] != a[k])\n {\n if (mp.containsKey(first) && mp.containsKey(fourth))\n count += mp.get(first) * mp.get(fourth);\n }\n else if (mp.containsKey(first) && mp.containsKey(fourth))\n count += mp.get(first) * (mp.get(fourth) - 1);\n }\n if (mp.containsKey(a[j]))\n {\n mp.put(a[j], mp.get(a[j]) + 1);\n }\n else\n {\n mp.put(a[j], 1);\n }\n if (mp.containsKey(a[k]))\n {\n mp.put(a[k], mp.get(a[k]) + 1);\n }\n else\n {\n mp.put(a[k], 1);\n }\n }\n }\n return count;\n }", "150": "static void sieve()\n {\n spf[1] = 1;\n for (int i = 2; i < MAXN; i++)\n spf[i] = i;\n for (int i = 4; i < MAXN; i += 2)\n spf[i] = 2;\n for (int i = 3; i * i < MAXN; i++)\n {\n if (spf[i] == i)\n {\n for (int j = i * i; j < MAXN; j += i)\n if (spf[j] == j)\n spf[j] = i;\n }\n }\n }\n static void getFactorization(int x)\n {\n int temp;\n while (x != 1)\n {\n temp = spf[x];\n if (x % temp == 0)\n {\n hash1[spf[x]]++;\n x = x / spf[x];\n }\n while (x % temp == 0)\n x = x / temp;\n }\n }\n static boolean check(int x)\n {\n int temp;\n while (x != 1)\n {\n temp = spf[x];\n if (x % temp == 0 && hash1[temp] > 1)\n return false;\n while (x % temp == 0)\n x = x / temp;\n }\n return true;\n }\n static boolean hasValidNum(int []arr, int n)\n {\n sieve();\n for (int i = 0; i < n; i++)\n getFactorization(arr[i]);\n for (int i = 0; i < n; i++)\n if (check(arr[i]))\n return true;\n return false;\n }", "151": "static void Loss(int SP, int P)\n {\n float loss = 0;\n loss = (float)(2 * P * P * SP) / (100 * 100 - P * P);\n System.out.println(\"Loss = \" + loss);\n }", "152": "static int countSquares(int r, int c, int m)\n {\n int squares = 0;\n for (int i = 1; i <= 8; i++) {\n for (int j = 1; j <= 8; j++) {\n if (Math.max(Math.abs(i - r), Math.abs(j - c)) <= m)\n squares++;\n }\n }\n return squares;\n }", "153": "static int freqPairs(int arr[], int n)\n {\n int max = Arrays.stream(arr).max().getAsInt();\n int freq[] = new int[max + 1];\n int count = 0;\n for (int i = 0; i < n; i++)\n {\n freq[arr[i]]++;\n }\n for (int i = 0; i < n; i++)\n {\n for (int j = 2 * arr[i]; j <= max; j += arr[i])\n {\n if (freq[j] >= 1)\n {\n count += freq[j];\n }\n }\n if (freq[arr[i]] > 1)\n {\n count += freq[arr[i]] - 1;\n freq[arr[i]]--;\n }\n }\n return count;\n }", "154": "static int smallestIndex(int []a, int n)\n {\n int right1 = 0, right0 = 0;\n for (int i = 0; i < n; i++)\n {\n if (a[i] == 1)\n right1 = i;\n else\n right0 = i;\n }\n return Math.min(right1, right0);\n }", "155": "static int max_element(int a[])\n {\n int m = a[0];\n for(int i = 0; i < a.length; i++)\n m = Math.max(a[i], m);\n return m;\n }\n static int primeCount(int arr[], int n)\n {\n int max_val = max_element(arr);\n boolean prime[] = new boolean[max_val + 1];\n for (int p = 0; p <= max_val; p++)\n prime[p] = true;\n prime[0] = false;\n prime[1] = false;\n for (int p = 2; p * p <= max_val; p++)\n {\n if (prime[p] == true)\n {\n for (int i = p * 2; i <= max_val; i += p)\n prime[i] = false;\n }\n }\n int count = 0;\n for (int i = 0; i < n; i++)\n if (prime[arr[i]])\n count++;\n return count;\n }\n static int[] getPrefixArray(int arr[], int n, int pre[])\n {\n pre[0] = arr[0];\n for (int i = 1; i < n; i++)\n {\n pre[i] = pre[i - 1] + arr[i];\n }\n return pre;\n }", "156": "static int getAverage(int x, int y)\n {\n int avg = (x & y) + ((x ^ y) >> 1);\n return avg;\n }", "157": "static int numberOfDays(int a, int b, int n)\n {\n int Days = b * (n + a) / (a + b);\n return Days;\n }", "158": "static int count(int N)\n {\n int a = 0;\n a = (N * (N + 1)) / 2;\n return a;\n }", "159": "static boolean canConvert(int a, int b)\n {\n while (b > a)\n {\n if (b % 10 == 1)\n {\n b /= 10;\n continue;\n }\n if (b % 2 == 0)\n {\n b /= 2;\n continue;\n }\n return false;\n }\n if (b == a)\n return true;\n return false;\n }", "160": "static void MinimumValue(int x, int y)\n {\n if (x > y)\n {\n int temp = x;\n x = y;\n y = temp;\n }\n int a = 1;\n int b = x - 1;\n int c = y - b;\n System.out.print( a + \" \" + b + \" \" + c);\n }", "161": "static void decimalToBinary(int n)\n {\n if (n == 0)\n {\n System.out.print(\"0\");\n return;\n }\n decimalToBinary(n / 2);\n System.out.print( n % 2);\n }", "162": "static int Max_sum(int a[], int n)\n {\n int pos = 0, neg = 0;\n for(int i = 0; i < n; i++)\n {\n if(a[i] > 0)\n pos = 1;\n else if(a[i] < 0)\n neg = 1;\n if((pos == 1) && (neg == 1))\n break;\n }\n int sum = 0;\n if((pos == 1) && (neg == 1))\n {\n for(int i = 0; i < n ; i++)\n sum += Math.abs(a[i]);\n }\n else if(pos == 1)\n {\n int mini = a[0];\n sum = a[0];\n for(int i = 1; i < n; i++)\n {\n mini = Math.min(mini, a[i]);\n sum += a[i];\n }\n sum -= 2*mini;\n }\n else if(neg == 1)\n {\n for(int i = 0; i < n; i++)\n a[i] = Math.abs(a[i]);\n int mini = a[0];\n sum = a[0];\n for(int i = 1; i < n; i++)\n {\n mini = Math.min(mini, a[i]);\n sum += a[i];\n }\n sum -= 2*mini;\n }\n return sum;\n }", "163": "static int Wedderburn(int n)\n {\n if (n <= 2)\n return store.get(n);\n else if (n % 2 == 0)\n {\n int x = n / 2, ans = 0;\n for (int i = 1; i < x; i++)\n {\n ans += store.get(i) * store.get(n - i);\n }\n ans += (store.get(x) * (store.get(x) + 1)) / 2;\n store. put(n, ans);\n return ans;\n }\n else\n {\n int x = (n + 1) / 2, ans = 0;\n for (int i = 1; i < x; i++)\n {\n ans += store.get(i) * store.get(n - i);\n }\n store. put(n, ans);\n return ans;\n }\n }\n static void Wedderburn_Etherington(int n)\n {\n store. put(0, 0);\n store. put(1, 1);\n store. put(2, 1);\n for (int i = 0; i < n; i++)\n {\n System.out.print(Wedderburn(i));\n if(i != n - 1)\n System.out.print(\" \");\n }\n }", "164": "static Vector<Integer> addPrimes()\n {\n int n = MAX;\n boolean []prime = new boolean[n + 1];\n Arrays.fill(prime, true);\n for (int p = 2; p * p <= n; p++)\n {\n if (prime[p] == true)\n {\n for (int i = p * p; i <= n; i += p)\n prime[i] = false;\n }\n }\n Vector<Integer> ans = new Vector<Integer>();\n for (int p = 2; p <= n; p++)\n if (prime[p])\n ans.add(p);\n return ans;\n }\n static boolean is_prime(int n)\n {\n return (n == 3 n == 5 n == 7);\n }\n static int find_Sum(int n)\n {\n int sum = 0;\n Vector<Integer> v = addPrimes();\n for (int i = 0; i < v.size() && n > 0; i++)\n {\n int flag = 1;\n int a = v.get(i);\n while (a != 0)\n {\n int d = a % 10;\n a = a / 10;\n if (is_prime(d))\n {\n flag = 0;\n break;\n }\n }\n if (flag == 1)\n {\n n--;\n sum = sum + v.get(i);\n }\n }\n return sum;\n }", "165": "static int find_count(Vector<Integer> ele)\n {\n int count = 0;\n for (int i = 0; i < ele.size(); i++)\n {\n Vector<Integer> p = new Vector<Integer>();\n int c = 0;\n for (int j = ele.size() - 1;\n j >= (ele.size() - 1 - i) && j >= 0; j--)\n {\n p.add(ele.get(j));\n }\n int j = ele.size() - 1, k = 0;\n while (j >= 0)\n {\n if (ele.get(j) != p.get(k))\n {\n break;\n }\n j--;\n k++;\n if (k == p.size())\n {\n c++;\n k = 0;\n }\n }\n count = Math.max(count, c);\n }\n return count;\n }\n static void solve(int n)\n {\n int count = 1;\n Vector<Integer> ele = new Vector<Integer>();\n for (int i = 0; i < n; i++)\n {\n System.out.print(count + \", \");\n ele.add(count);\n count = find_count(ele);\n }\n }", "166": "static void ZigZag(int n)\n {\n long[] fact= new long[n + 1];\n long[] zig = new long[n + 1];\n for (int i = 0; i < n + 1; i++)\n zig[i] = 0;\n fact[0] = 1;\n for (int i = 1; i <= n; i++)\n fact[i] = fact[i - 1] * i;\n zig[0] = 1;\n zig[1] = 1;\n System.out.print(\"zig zag numbers: \");\n System.out.print(zig[0] + \" \" + zig[1] + \" \");\n for (int i = 2; i < n; i++)\n {\n long sum = 0;\n for (int k = 0; k <= i - 1; k++)\n {\n sum += (fact[i - 1] / (fact[i - 1 - k] * fact[k])) * zig[k] * zig[i - 1 - k];\n }\n zig[i] = sum / 2;\n System.out.print(sum / 2 + \" \" );\n }\n }", "167": "static void compareValues(int a, int b, int c, int d)\n {\n double log1 = Math.log10(a);\n double num1 = log1 * b;\n double log2 = Math.log10(c);\n double num2 = log2 * d;\n if (num1 > num2)\n System.out.println(a + \"^\" + b);\n else\n System.out.println(c + \"^\" + d);\n }", "168": "static void compareVal(int x, int y)\n {\n double a = y * Math.log(x);\n double b = x * Math.log(y);\n if (a > b)\n System.out.print(x + \"^\" + y + \" > \" + y + \"^\" + x);\n else if (a < b)\n System.out.print(x + \"^\" + y + \" < \" + y + \"^\" + x);\n else if (a == b)\n System.out.print(x + \"^\" + y + \" = \" + y + \"^\" + x );\n }", "169": "static void least_prime_factor()\n {\n for (int i = 2; i < N; i++)\n if (lpf[i] == 0)\n for (int j = i; j < N; j += i)\n if (lpf[j] == 0)\n lpf[j] = i;\n }\n static void Mobius()\n {\n for (int i = 1; i < N; i++)\n {\n if (i == 1)\n mobius[i] = 1;\n else\n {\n if (lpf[i / lpf[i]] == lpf[i])\n mobius[i] = 0;\n else\n mobius[i] = -1 * mobius[i / lpf[i]];\n }\n }\n }\n static int gcd_pairs(int a[], int n)\n {\n int maxi = 0;\n int []fre = new int[N];\n for (int i = 0; i < n; i++)\n {\n fre[a[i]]++;\n maxi = Math.max(a[i], maxi);\n }\n least_prime_factor();\n Mobius();\n int ans = 0;\n for (int i = 1; i <= maxi; i++)\n {\n if (mobius[i] == 0)\n continue;\n int temp = 0;\n for (int j = i; j <= maxi; j += i)\n temp += fre[j];\n ans += temp * (temp - 1) / 2 * mobius[i];\n }\n return ans;\n }", "170": "static long power(int p)\n {\n long res = 1;\n for (int i = 1; i <= p; ++i)\n {\n res *= 2;\n res %= mod;\n }\n return res % mod;\n }\n static long subset_square_sum(int A[])\n {\n int n = A.length;\n long ans = 0;\n for (int i : A)\n {\n ans += (1 * i * i) % mod;\n ans %= mod;\n }\n return (1 * ans * power(n - 1)) % mod;\n }", "171": "static double calculate_angle(int n, int i, int j, int k)\n {\n int x, y;\n if (i < j)\n x = j - i;\n else\n x = j + n - i;\n if (j < k)\n y = k - j;\n else\n y = k + n - j;\n double ang1 = (180 * x) / n;\n double ang2 = (180 * y) / n;\n double ans = 180 - ang1 - ang2;\n return ans;\n }", "172": "static long gcd(long a, long b)\n {\n if (a == 0)\n {\n return b;\n }\n return gcd(b % a, a);\n }\n static long divTermCount(long a, long b, long c, long num)\n {\n return ((num / a) + (num / b) + (num / c) -\n (num / ((a * b) / gcd(a, b))) -\n (num / ((c * b) / gcd(c, b))) -\n (num / ((a * c) / gcd(a, c))) +\n (num / ((a * b * c) / gcd(gcd(a, b), c))));\n }\n static long findNthTerm(int a, int b, int c, long n)\n {\n long low = 1, high = Long.MAX_VALUE, mid;\n while (low < high)\n {\n mid = low + (high - low) / 2;\n if (divTermCount(a, b, c, mid) < n)\n {\n low = mid + 1;\n }\n else\n {\n high = mid;\n }\n }\n return low;\n }", "173": "static void preCompute()\n {\n fact[0] = 1;\n result[0] = 1;\n for (int i = 1; i <= MAX; i++)\n {\n fact[i] = ((fact[i - 1] % MOD) * i) % MOD;\n result[i] = ((result[i - 1] % MOD) *\n (fact[i] % MOD)) % MOD;\n }\n }\n static void performQueries(int q[], int n)\n {\n preCompute();\n for (int i = 0; i < n; i++)\n System.out.println (result[q[i]]);\n }", "174": "static int modFact(int n, int m)\n {\n int result = 1;\n for (int i = 1; i <= m; i++)\n result = (result * i) % MOD;\n return result;\n }", "175": "static int findMinValue(int arr[], int n)\n {\n long sum = 0;\n for (int i = 0; i < n; i++)\n sum += arr[i];\n return ((int)(sum / n) + 1);\n }", "176": "static int count(int n)\n {\n return n * (3 * n - 1) / 2;\n }", "177": "static int diameter(int n)\n {\n int L, H, templen;\n L = 1;\n H = 0;\n if (n == 1) {\n return 1;\n }\n if (n == 2) {\n return 2;\n }\n if (n == 3) {\n return 3;\n }\n while (L * 2 <= n) {\n L *= 2;\n H++;\n }\n if (n >= L * 2 - 1)\n return 2 * H + 1;\n else if (n >= L + (L / 2) - 1)\n return 2 * H;\n return 2 * H - 1;\n }", "178": "static int lcm(int a, int b)\n {\n int GCD = __gcd(a, b);\n return (a * b) / GCD;\n }\n static int MinLCM(int a[], int n)\n {\n int []Prefix = new int[n + 2];\n int []Suffix = new int[n + 2];\n Prefix[1] = a[0];\n for (int i = 2; i <= n; i += 1)\n {\n Prefix[i] = lcm(Prefix[i - 1], a[i - 1]);\n }\n Suffix[n] = a[n - 1];\n for (int i = n - 1; i >= 1; i -= 1)\n {\n Suffix[i] = lcm(Suffix[i + 1], a[i - 1]);\n }\n int ans = Math.min(Suffix[2], Prefix[n - 1]);\n for (int i = 2; i < n; i += 1)\n {\n ans = Math.min(ans, lcm(Prefix[i - 1], Suffix[i + 1]));\n }\n return ans;\n }\n static int __gcd(int a, int b)\n {\n return b == 0 ? a : __gcd(b, a % b); \n }", "179": "static boolean isFactorial(int n)\n {\n for (int i = 1;; i++)\n {\n if (n % i == 0)\n {\n n /= i;\n }\n else\n {\n break;\n }\n }\n if (n == 1)\n {\n return true;\n }\n else\n {\n return false;\n }\n }", "180": "static boolean digitDividesK(int num, int k)\n {\n while (num != 0)\n {\n int d = num % 10;\n if (d != 0 && k % d == 0)\n return true;\n num = num / 10;\n }\n return false;\n }\n static int findCount(int l, int r, int k)\n {\n int count = 0;\n for (int i = l; i <= r; i++)\n {\n if (digitDividesK(i, k))\n count++;\n }\n return count;\n }", "181": "static int maxXOR(int arr[], int n)\n {\n int xorArr = 0;\n for (int i = 0; i < n; i++)\n xorArr ^= arr[i];\n int ans = 0;\n for (int i = 0; i < n; i++)\n ans = Math.max(ans, (xorArr ^ arr[i]));\n return ans;\n }", "182": "static void find_composite_nos(int n)\n {\n System.out.println(9 * n + \" \" + 8 * n);\n }", "183": "static void decBinary(int arr[], int n)\n {\n int k = (int)(Math.log(n) /\n Math.log(2));\n while (n > 0)\n {\n arr[k--] = n % 2;\n n /= 2;\n }\n }\n static int binaryDec(int arr[], int n)\n {\n int ans = 0;\n for (int i = 0; i < n; i++)\n ans += arr[i] << (n - i - 1);\n return ans;\n }\n static int getNum(int n, int k)\n {\n int l = (int)(Math.log(n) /\n Math.log(2)) + 1;\n int a[] = new int[l];\n decBinary(a, n);\n if (k > l)\n return n;\n a[k - 1] = (a[k - 1] == 0) ? 1 : 0;\n return binaryDec(a, l);\n }", "184": "static int Count_subarray(int arr[], int n)\n {\n int total_sum = 0, subarray_sum,\n remaining_sum, count = 0;\n for (int i = 0; i < n; i++)\n {\n total_sum += arr[i];\n }\n for (int i = 0; i < n; i++)\n {\n subarray_sum = 0;\n for (int j = i; j < n; j++)\n {\n subarray_sum += arr[j];\n remaining_sum = total_sum - subarray_sum;\n if (subarray_sum > remaining_sum)\n {\n count += 1;\n }\n }\n }\n return count;\n }", "185": "static int Count_subarray(int arr[], int n)\n {\n int subarray_sum, remaining_sum, count = 0;\n for (int i = 0; i < n; i++)\n {\n for (int j = i; j < n; j++)\n {\n subarray_sum = 0;\n remaining_sum = 0;\n for (int k = i; k <= j; k++)\n {\n subarray_sum += arr[k];\n }\n for (int l = 0; l < i; l++)\n {\n remaining_sum += arr[l];\n }\n for (int l = j + 1; l < n; l++)\n {\n remaining_sum += arr[l];\n }\n if (subarray_sum > remaining_sum)\n {\n count += 1;\n }\n }\n }\n return count;\n }", "186": "static String smallestPoss(String s, int n)\n {\n String ans = \"\";\n int arr[] = new int[10];\n for (int i = 0; i < n; i++)\n {\n arr[s.charAt(i) - 48]++;\n }\n for (int i = 0; i < 10; i++)\n {\n for (int j = 0; j < arr[i]; j++)\n ans = ans + String.valueOf(i);\n }\n return ans;\n }", "187": "public static int noOfCards(int n)\n {\n return n * (3 * n + 1) / 2;\n }", "188": "static int powOfPositive(int n)\n {\n int pos = (int)Math.floor((Math.log(n)/Math.log(2)));\n return (int)Math.pow(2, pos);\n }\n static int powOfNegative(int n)\n {\n int pos = (int)Math.ceil((Math.log(n)/Math.log(2)));\n return (int)(-1 * Math.pow(2, pos));\n }\n static void highestPowerOf2(int n)\n {\n if (n > 0)\n {\n System.out.println(powOfPositive(n));\n }\n else\n {\n n = -n;\n System.out.println(powOfNegative(n));\n }\n }", "189": "static void printValueOfPi(int N)\n {\n double pi = 2 * Math.acos(0.0);\n System.out.println(pi);\n }", "190": "static int nearest(int n) \n { \n int prevCube = (int)Math.cbrt(n); \n int nextCube = prevCube + 1; \n prevCube = prevCube * prevCube * prevCube; \n nextCube = nextCube * nextCube * nextCube; \n int ans = (n - prevCube) < (nextCube - n) ? \n (prevCube - n) : (nextCube - n); \n return ans; \n }", "191": "static int nearest(int n)\n {\n int prevSquare = (int)Math.sqrt(n);\n int nextSquare = prevSquare + 1;\n prevSquare = prevSquare * prevSquare;\n nextSquare = nextSquare * nextSquare;\n int ans = (n - prevSquare) < (nextSquare - n)? (prevSquare - n): (nextSquare - n);\n return ans;\n }", "192": "static void printPairs(int arr[], int n)\n {\n for (int i = 0; i < n; i++) {\n for (int j = 0; j < n; j++) {\n System.out.print(\"(\" + arr[i]+ \", \" + arr[j]+ \")\" + \", \");\n }\n }\n }", "193": "static void isPrime(int N)\n {\n boolean isPrime = true;\n int []arr = { 7, 11, 13, 17,19, 23, 29, 31 };\n if (N < 2) {\n isPrime = false;\n }\n if (N % 2 == 0 N % 3 == 0 N % 5 == 0) {\n isPrime = false;\n }\n for (int i = 0; i < Math.sqrt(N); i += 30) {\n for (int c : arr) {\n if (c > Math.sqrt(N)) {\n break;\n }\n else {\n if (N % (c + i) == 0) {\n isPrime = false;\n break;\n }\n }\n if (!isPrime)\n break;\n }\n }\n if (isPrime)\n System.out.println(\"Prime Number\");\n else\n System.out.println(\"Not a Prime Number\");\n }", "194": "static void canBeReduced(int x, int y)\n {\n int maxi = Math.max(x, y);\n int mini = Math.min(x, y);\n if (((x + y) % 3) == 0 && maxi <= 2*mini)\n System.out.print(\"YES\" +\"\\n\");\n else\n System.out.print(\"NO\" +\"\\n\");\n }", "195": "static int largest_sum(int arr[], int n)\n {\n int maximum = -1;\n HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();\n for (int i = 0; i < n; i++) {\n if (m.containsKey(arr[i])){\n m.put(arr[i], m.get(arr[i]) + 1);\n }\n else{\n m.put(arr[i], 1);\n }\n }\n for(int i = 0; i < n; i++){\n if (m.get(arr[i]) > 1) {\n if (m.containsKey(2*arr[i]))\n {\n m.put(2*arr[i],m.get(2 * arr[i])+ m.get(arr[i]) / 2);\n }\n else\n {\n m.put(2*arr[i],m.get(arr[i]) / 2);\n }\n if (2 * arr[i] > maximum)\n maximum = 2 * arr[i];\n }\n }\n return maximum;\n }", "196": "static boolean isPerfectCube(int x)\n {\n long cr = Math.round(Math.cbrt(x));\n return (cr * cr * cr == x);\n }\n static void checkCube(int a, int b)\n {\n String s1 = Integer.toString(a);\n String s2 = Integer.toString(b);\n int c = Integer.parseInt(s1 + s2);\n if (isPerfectCube(c)) {\n System.out.println(\"Yes\");\n }\n else {\n System.out.println(\"No\");\n }\n }", "197": "public static float round(float var, int digit)\n {\n float value = (int)(var *\n Math.pow(10, digit) + .5);\n return (float)value /\n (float)Math.pow(10, digit);\n }\n public static int probability(int N)\n {\n int a = 2;\n int b = 3;\n if (N == 1)\n {\n return a;\n }\n else if (N == 2)\n {\n return b;\n }\n else\n {\n for(int i = 3; i <= N; i++)\n {\n int c = a + b;\n a = b;\n b = c;\n }\n return b;\n }\n }\n public static float operations(int N)\n {\n int x = probability(N);\n int y = (int)Math.pow(2, N);\n return round((float)x /\n (float)y, 2);\n }", "198": "static int NthSmallest(int K)\n {\n Queue<Integer> Q = new LinkedList<>();\n int x = 0;\n for (int i = 1; i < 10; i++)\n Q.add(i);\n for (int i = 1; i <= K; i++) {\n x = Q.peek();\n Q.remove();\n if (x % 10 != 0) {\n Q.add(x * 10 + x % 10 - 1);\n }\n Q.add(x * 10 + x % 10);\n if (x % 10 != 9) {\n Q.add(x * 10 + x % 10 + 1);\n }\n }\n return x;\n }", "199": "static int power(int x, int y, int p)\n {\n int res = 1;\n x = x % p;\n while (y > 0)\n {\n if ((y & 1) == 1)\n res = (res * x) % p;\n x = (x * x) % p;\n }\n return res;\n }\n static int modInverse(int n, int p)\n {\n return power(n, p - 2, p);\n }\n static int nCrModPFermat(int n, int r, int p)\n {\n if (r == 0)\n return 1;\n if (n < r)\n return 0;\n int fac[] = new int[n + 1];\n fac[0] = 1;\n for(int i = 1; i <= n; i++)\n fac[i] = fac[i - 1] * i % p;\n return (fac[n] * modInverse(fac[r], p) % p *\n modInverse(fac[n - r], p) % p) % p;\n }\n static int SumOfXor(int a[], int n)\n {\n int mod = 10037;\n int answer = 0;\n for(int k = 0; k < 32; k++)\n {\n int x = 0, y = 0;\n for(int i = 0; i < n; i++)\n {\n if ((a[i] & (1 << k)) != 0)\n x++;\n else\n y++;\n }\n answer += ((1 << k) % mod *\n (nCrModPFermat(x, 3, mod) + x *\n nCrModPFermat(y, 2, mod)) % mod) % mod;\n }\n return answer;\n }", "200": "static void Solve(int arr[], int size, int n)\n  {\n int[] v = new int[n + 1];\n for (int i = 0; i < size; i++)\n v[arr[i]]++;\n int max1 = -1, mx = -1;\n for (int i = 0; i < v.length; i++)\n {\n if (v[i] > mx)\n {\n mx = v[i];\n max1 = i;\n }\n }\n int cnt = 0;\n for (int i : v)\n {\n if (i == 0)\n ++cnt;\n }\n int diff1 = n + 1 - cnt;\n int max_size = Math.max(Math.min(v[max1] - 1, diff1),\n Math.min(v[max1], diff1 - 1));\n System.out.println(\"Maximum size is: \" + max_size);\n System.out.println(\"First Array is\");\n for (int i = 0; i < max_size; i++)\n {\n System.out.print(max1 + \" \");\n v[max1] -= 1;\n }\n System.out.println();\n System.out.println(\"The Second Array Is :\");\n for (int i = 0; i < (n + 1); i++)\n {\n if (v[i] > 0)\n {\n System.out.print(i + \" \");\n max_size--;\n }\n if (max_size < 1)\n break;\n }\n System.out.println();\n  }", "201": "static int CountWays(int n)\n {\n int ans = (n - 1) / 2;\n return ans;\n }", "202": "static void printKNumbers(int N, int K)\n {\n for(int i = 0; i < K - 1; i++)\n System.out.print(1 + \" \");\n System.out.print(N - K + 1);\n }", "203": "static void findMaxPrimeDivisor(int n)\n {\n int max_possible_prime = 0;\n while (n % 2 == 0)\n {\n max_possible_prime++;\n n = n / 2;\n }\n for(int i = 3; i * i <= n; i = i + 2)\n {\n while (n % i == 0)\n {\n max_possible_prime++;\n n = n / i;\n }\n }\n if (n > 2)\n {\n max_possible_prime++;\n }\n System.out.print(max_possible_prime + \"\\n\");\n }", "204": "static int countValues(int N)\n {\n Vector<Integer> div = new Vector<>();\n for(int i = 2; i * i <= N; i++)\n {\n if (N % i == 0)\n {\n div.add(i);\n if (N != i * i)\n {\n div.add(N / i);\n }\n }\n }\n int answer = 0;\n for(int i = 1; i * i <= N - 1; i++)\n {\n if ((N - 1) % i == 0)\n {\n if (i * i == N - 1)\n answer++;\n else\n answer += 2;\n }\n }\n for(int d : div)\n {\n int K = N;\n while (K % d == 0)\n K /= d;\n if ((K - 1) % d == 0)\n answer++;\n }\n return answer;\n }", "205": "static int countValues(int n)\n {\n int answer = 0;\n for (int i = 2; i <= n; i++)\n {\n int k = n;\n while (k >= i)\n {\n if (k % i == 0)\n k /= i;\n else\n k -= i;\n }\n if (k == 1)\n answer++;\n }\n return answer;\n }", "206": "static int sumOfDigits(int n)\n {\n int sum = 0;\n while (n > 0)\n {\n sum += n % 10;\n n /= 10;\n }\n return sum;\n }\n static int smallestNum(int X, int Y)\n {\n int res = -1;\n for (int i = X; i < MAXN; i++)\n {\n int sum_of_digit = sumOfDigits(i);\n if (sum_of_digit % Y == 0)\n {\n res = i;\n break;\n }\n }\n return res;\n }", "207": "public static int[] calculateWays(int n)\n {\n int x = 0;\n int[]v = new int[n];\n for(int i = 0; i < n; i++)\n v[i] = 0;\n for(int i = 0; i < n / 2; i++)\n {\n if(n % 2 == 0 && i == n / 2)\n break;\n x = n * (i + 1) - (i + 1) * i;\n v[i] = x;\n v[n - i - 1] = x;\n }\n return v;\n }\n public static void printArray(int[]v)\n {\n for(int i = 0; i < v.length; i++)\n System.out.print(v[i] + \" \");\n }", "208": "static boolean isPerfectSquare(double x)\n {\n double sr = Math.sqrt(x);\n return((sr - Math.floor(sr)) == 0);\n }\n static void checkSunnyNumber(int N)\n {\n if (isPerfectSquare(N + 1))\n {\n System.out.println(\"Yes\");\n }\n else\n {\n System.out.println(\"No\");\n }\n }", "209": "static void sumEvenNumbers(int N, int K)\n {\n int check = N - 2 * (K - 1);\n if (check > 0 && check % 2 == 0)\n {\n for(int i = 0; i < K - 1; i++)\n {\n System.out.print(\"2 \");\n }\n System.out.println(check);\n }\n else\n {\n System.out.println(\"-1\");\n }\n }", "210": "static void checksum(int n, int k)\n {\n float first_term = (float) (((2 * n) / k +\n (1 - k)) / 2.0);\n if (first_term - (int)(first_term) == 0)\n {\n for(int i = (int)first_term; i <= first_term + k - 1; i++)\n {\n System.out.print(i + \" \");\n }\n }\n else\n System.out.print(\"-1\");\n }", "211": "static Vector<Integer> getFactorization(int x)\n {\n  int count = 0;\n  Vector<Integer> v = new Vector<>();\n  while (x % 2 == 0)\n  {\n count++;\n x = x / 2;\n  }\n  if (count != 0)\n v.add(count);\n  for (int i = 3;\n i <= Math.sqrt(x); i += 2)\n  {\n count = 0;\n while (x % i == 0)\n {\n count++;\n x /= i;\n }\n if (count != 0)\n v.add(count);\n  }\n  if (x > 1)\n  {\n v.add(1);\n  }\n  return v;\n }\n static int nonPrimeDivisors(int N)\n {\n  Vector<Integer> v = getFactorization(N);\n  int ret = 1;\n  for (int i = 0; i < v.size(); i++)\n ret = ret * (v.get(i) + 1);\n  ret = ret - v.size();\n  return ret;\n }", "212": "static int nCr(int n, int r)\n {\n return fact(n) / (fact(r) * fact(n - r));\n }\n static int fact(int n)\n {\n int res = 1;\n for (int i = 2; i <= n; i++)\n res = res * i;\n return res;\n }\n static int sumSubsequences(int arr[], int n, int k)\n {\n int sum = 0;\n for (int i = 0; i < n; i++) \n {\n sum += arr[i];\n }\n int kLengthSubSequence;\n kLengthSubSequence = nCr(n, k);\n int ans = sum * ((k * kLengthSubSequence) / n);\n return ans;\n }", "213": "static boolean isPrime(int n)\n {\n if (n <= 1)\n return false;\n for (int i = 2; i < n; i++)\n if (n % i == 0)\n return false;\n return true;\n }\n static int countSubsequences(int arr[], int n)\n {\n int totalSubsequence = (int)(Math.pow(2, n) - 1);\n int countPrime = 0, countOnes = 0;\n for (int i = 0; i < n; i++)\n {\n if (arr[i] == 1)\n countOnes++;\n else if (isPrime(arr[i]))\n countPrime++;\n }\n int compositeSubsequence;\n int onesSequence = (int)(Math.pow(2, countOnes) - 1);\n compositeSubsequence = totalSubsequence -\n countPrime -\n onesSequence -\n onesSequence *\n countPrime;\n return compositeSubsequence;\n }", "214": "static void constructArray(int N)\n {\n int arr[] = new int[N];\n for(int i = 1; i <= N; i++)\n {\n arr[i - 1] = i;\n }\n for(int i = 0; i < N; i++)\n {\n System.out.print(arr[i] + \", \");\n }\n }", "215": "static int power(int x, int y)\n {\n int p = 1000000007;\n int res = 1;\n x = x % p;\n while (y > 0)\n {\n if (y % 2 == 1)\n res = (res * x) % p;\n y = y >> 1;\n x = (x * x) % p;\n }\n return res;\n }\n static int productPairs(int arr[], int n)\n {\n int product = 1;\n for (int i = 0; i < n; i++)\n {\n product = (product % mod *\n (int)power(arr[i],\n (2 * n)) % mod) % mod;\n }\n return product % mod;\n }", "216": "static int productPairs(int arr[], int n)\n {\n int product = 1;\n for(int i = 0; i < n; i++)\n {\n for(int j = 0; j < n; j++)\n {\n product *= (arr[i] % mod * arr[j] % mod) % mod;\n product = product % mod;\n }\n }\n return product % mod;\n }", "217": "static void checkSolution(int a, int b, int c)\n {\n if (a == c)\n System.out.print(\"Yes\");\n else\n System.out.print(\"No\");\n }", "218": "static void insert_element(int a[], int n)\n {\n int Xor = 0;\n int Sum = 0;\n for(int i = 0; i < n; i++)\n { \n Xor ^= a[i];\n Sum += a[i];\n }\n if(Sum == 2 * Xor)\n {\n System.out.println(\"0\");\n return;\n }\n if(Xor == 0)\n {\n System.out.println(\"1\");\n System.out.println(Sum);\n return;\n }\n int num1 = Sum + Xor;\n int num2 = Xor;\n System.out.print(\"2\");\n System.out.println(num1 + \" \" + num2);\n }", "219": "static int MegagonNum(int n)\n {\n return (999998 * n * n - 999996 * n) / 2;\n }", "220": "static int enneacontahexagonNum(int n)\n {\n return (94 * n * n - 92 * n) / 2;\n }", "221": "static long func(int arr[], int n)\n {\n double ans = 0;\n int maxx = 0;\n double freq[] = new double[100005];\n int temp;\n for(int i = 0; i < n; i++)\n {\n temp = arr[i];\n freq[temp]++;\n maxx = Math.max(maxx, temp);\n }\n for(int i = 1; i <= maxx; i++)\n {\n freq[i] += freq[i - 1];\n }\n for(int i = 1; i <= maxx; i++)\n {\n if (freq[i] != 0)\n {\n double j;\n double cur = Math.ceil(0.5 * i) - 1.0;\n for(j = 1.5;; j++)\n {\n int val = Math.min(maxx,\n (int)(Math.ceil(i * j) - 1.0));\n int times = (int)(freq[i] - freq[i - 1]),\n con = (int)(j - 0.5);\n ans += times * con * (freq[(int)val] -\n freq[(int)cur]);\n cur = val;\n if (val == maxx)\n break;\n }\n }\n }\n return (long)ans;\n }", "222": "static boolean checkArray(int n, int k, int arr[])\n {\n int cnt = 0;\n for(int i = 0; i < n; i++)\n {\n if ((arr[i] & 1) != 0)\n cnt += 1;\n }\n if (cnt >= k && cnt % 2 == k % 2)\n return true;\n else\n return false;\n }", "223": "static void printSeries(int n, int a, int b, int c)\n {\n int d;\n if (n == 1)\n {\n System.out.print(a + \" \");\n return;\n }\n if (n == 2)\n {\n System.out.print(a + \" \" + b + \" \");\n return;\n }\n System.out.print(a + \" \" + b + \" \" + c + \" \");\n for (int i = 4; i <= n; i++)\n {\n d = a + b + c;\n System.out.print(d + \" \");\n a = b;\n b = c;\n c = d;\n }\n }", "224": "static int rev(int num)\n {\n int rev_num = 0;\n while (num > 0)\n {\n rev_num = rev_num * 10 +\n num % 10;\n num = num / 10;\n }\n return rev_num;\n }\n static int divSum(int num)\n {\n int result = 0;\n for(int i = 2; i <= Math.sqrt(num); i++)\n {\n if (num % i == 0)\n {\n if (i == (num / i))\n result += rev(i);\n else\n result += (rev(i) +\n rev(num / i));\n }\n }\n return (result + 1);\n }\n static boolean isAntiPerfect(int n)\n {\n return divSum(n) == n;\n }", "225": "static void findNthTerm(int n)\n {\n System.out.println(n * n - n + 1);\n }", "226": "static boolean isDouble(int num)\n {\n String s = Integer.toString(num);\n int l = s.length();\n if(s.charAt(0) == s.charAt(1))\n return false;\n if(l % 2 == 1)\n {\n s = s + s.charAt(1);\n l++;\n }\n String s1 = s.substring(0, l / 2);\n String s2 = s.substring(l / 2);\n return s1.equals(s2);\n }\n static boolean isNontrivialUndulant(int N)\n {\n return N > 100 && isDouble(N);\n }", "227": "public static int linearSum(int n)\n {\n return (n * (n + 1) / 2) % mod;\n }\n public static int rangeSum(int b, int a)\n {\n return (linearSum(b) -\n linearSum(a)) % mod;\n }\n public static int totalSum(int n)\n {\n int result = 0;\n int i = 1;\n while(true)\n {\n result += rangeSum(n / i,\n n / (i + 1)) *\n (i % mod) % mod;\n result %= mod;\n if (i == n)\n break;\n i = n / (n / (i + 1));\n }\n return result;\n }", "228": "static int maxAdjacentDifference(int N, int K)\n {\n if (N == 1)\n {\n return 0;\n }\n if (N == 2) \n {\n return K;\n }\n return 2 * K;\n }", "229": "static void Is_possible(long N)\n {\n long C = 0;\n long D = 0;\n while (N % 10 == 0)\n {\n N = N / 10;\n C += 1;\n }\n if(Math.pow(2, (long)(Math.log(N) /\n (Math.log(2)))) == N)\n {\n D = (long)(Math.log(N) / (Math.log(2)));\n if (C >= D)\n System.out.print(\"YES\");\n else\n System.out.print(\"NO\");\n }\n else\n System.out.print(\"NO\");\n }", "230": "static int Sum(int N)\n {\n int SumOfPrimeDivisors[] = new int[N + 1];\n for (int i = 2; i <= N; ++i)\n {\n if (SumOfPrimeDivisors[i] == 1)\n {\n for (int j = i; j <= N; j += i)\n {\n SumOfPrimeDivisors[j] += i;\n }\n }\n }\n return SumOfPrimeDivisors[N];\n }\n static boolean RuthAaronNumber(int n)\n {\n if (Sum(n) == Sum(n + 1))\n return true;\n else\n return false;\n }", "231": "static boolean isPrime(int n)\n {\n if (n == 1)\n return true;\n if (n <= 3)\n return true;\n if (n % 2 == 0 n % 3 == 0)\n return false;\n for(int i = 5; i * i <= n; i = i + 6)\n if (n % i == 0 || n % (i + 2) == 0)\n return false;\n return true;\n }\n static void checkExpression(int n)\n {\n if (isPrime(n))\n System.out.println(\"Yes\");\n else\n System.out.println(\"No\");\n }", "232": "static boolean isDNum(int n)\n {\n if (n < 4)\n return false;\n int numerator = 0, hcf = 0;\n for(int k = 2; k <= n; k++)\n {\n numerator = (int)(Math.pow(k, n - 2) - k);\n hcf = __gcd(n, k);\n }\n if (hcf == 1 && (numerator % n) != 0)\n return false;\n return true;\n }\n static int __gcd(int a, int b)\n {\n return b == 0 ? a : __gcd(b, a % b); \n }", "233": "static int sigma(int n)\n {\n if (n == 1)\n return 1;\n int result = 0;\n for(int i = 2; i <= Math.sqrt(n); i++)\n {\n if (n % i == 0)\n {\n if (i == (n / i))\n result += i;\n else\n result += (i + n / i);\n }\n }\n return (result + n + 1);\n }\n static boolean isSuperabundant(int N)\n {\n for(double i = 1; i < N; i++)\n {\n double x = sigma((int)(i)) / i;\n double y = sigma((int)(N)) / (N * 1.0);\n if (x > y)\n return false;\n }\n return true;\n }", "234": "static boolean isInsolite(int n)\n {\n int N = n;\n int sum = 0;\n int product = 1;\n while (n != 0)\n {\n int r = n % 10;\n sum = sum + r * r;\n product = product * r * r;\n n = n / 10;\n }\n return (N % sum == 0) &&\n (N % product == 0);\n }", "235": "static int reverse(int num)\n {\n int rev_num = 0;\n while(num > 0)\n {\n rev_num = rev_num * 10 + num % 10;\n num = num / 10;\n }\n return rev_num;\n }\n static int properDivSum(int num)\n {\n int result = 0;\n for (int i = 2; i<= Math.sqrt(num); i++)\n {\n if (num % i == 0)\n {\n if (i == (num / i))\n result += i;\n else\n result += (i + num / i);\n }\n }\n return (result + 1);\n }\n static boolean isTcefrep(int n)\n {\n return properDivSum(n) == reverse(n);\n }", "236": "static void print_product(int a, int b, int c, int d)\n {\n int prod1 = a * c;\n int prod2 = b * d;\n int prod3 = (a + b) * (c + d);\n int real = prod1 - prod2;\n int imag = prod3 - (prod1 + prod2);\n System.out.println(real + \" + \" + imag + \"i\");\n }", "237": "static void sieve()\n {\n v[1] = 1;\n for(int i = 2; i < x; i++)\n v[i] = i;\n for(int i = 4; i < x; i += 2)\n v[i] = 2;\n for(int i = 3; i * i < x; i++)\n {\n if (v[i] == i)\n {\n for(int j = i * i; j < x; j += i)\n {\n if (v[j] == j)\n {\n v[j] = i;\n }\n }\n }\n }\n }\n static int prime_factors(int n)\n {\n HashSet<Integer> s = new HashSet<Integer>();\n while (n != 1)\n {\n s.add(v[n]);\n n = n / v[n];\n }\n return s.size();\n }\n static void distinctPrimes(int m, int k)\n {\n Vector<Integer> result = new Vector<Integer>();\n for (int i = 14; i < m + k; i++)\n {\n long count = prime_factors(i);\n if (count == k)\n {\n result.add(i);\n }\n }\n int p = result.size();\n for(int index = 0; index < p - 1; index++)\n {\n long element = result.get(index);\n int count = 1, z = index;\n while (z < p - 1 && count <= k &&\n result.get(z) + 1 ==\n result.get(z + 1))\n {\n count++;\n z++;\n }\n if (count >= k)\n System.out.print(element + \" \");\n }\n }", "238": "static int findMaximumGcd(int n)\n {\n int max_gcd = 1;\n for(int i = 1; i * i <= n; i++)\n {\n if (n % i == 0)\n {\n if (i > max_gcd)\n max_gcd = i;\n if ((n / i != i) &&\n (n / i != n) &&\n ((n / i) > max_gcd))\n max_gcd = n / i;\n }\n }\n return max_gcd;\n }", "239": "static int powerOptimised(int a, int n)\n {\n int ans = 1;\n while (n > 0)\n {\n int last_bit = (n & 1);\n if (last_bit > 0)\n {\n ans = ans * a;\n }\n a = a * a;\n n = n >> 1;\n }\n return ans;\n }", "240": "static int nCr(int n, int r)\n {\n int res = 1;\n if (r > n - r)\n r = n - r;\n for (int i = 0; i < r; ++i)\n {\n res *= (n - i);\n res /= (i + 1);\n }\n return res;\n }", "241": "static int nCr(int n, int r)\n {\n int res = 1;\n if (r > n - r)\n r = n - r;\n for (int i = 0; i < r; ++i)\n {\n res *= (n - i);\n res /= (i + 1);\n }\n return res;\n }\n static int solve(int n, int m, int k)\n {\n int sum = 0;\n for (int i = 0; i <= k; i++)\n sum += nCr(n, i)\n * nCr(m, k - i);\n return sum;\n }", "242": "static int gcd(int a, int b)\n {\n if (a == 0)\n return b;\n return gcd(b % a, a);\n }\n static int lcm(int a, int b)\n {\n return (a * b) / gcd(a, b);\n }\n static void findLCM(Vector<Integer> arr)\n {\n int nth_lcm = arr.get(0);\n for(int i = 1; i < arr.size(); i++)\n nth_lcm = lcm(nth_lcm, arr.get(i));\n Landau = Math.max(Landau, nth_lcm);\n }\n static void findWays(Vector<Integer> arr, int i, int n)\n {\n if (n == 0)\n findLCM(arr);\n for(int j = i; j <= n; j++)\n {\n arr.add(j);\n findWays(arr, j, n - j);\n arr.remove(arr.size() - 1);\n }\n }\n static void Landau_function(int n)\n {\n Vector<Integer> arr = new Vector<>();\n findWays(arr, 1, n);\n System.out.print(Landau);\n }", "243": "static boolean prime(int n)\n {\n if (n == 1)\n return false;\n for (int i = 2; i * i <= n; i++)\n {\n if (n % i == 0)\n return false;\n }\n return true;\n }\n static void minDivisior(int n)\n {\n if (prime(n))\n {\n System.out.print(1 + \" \" + (n - 1));\n }\n else\n {\n for (int i = 2; i * i <= n; i++)\n {\n if (n % i == 0)\n {\n System.out.print(n / i + \" \" +\n (n / i * (i - 1)));\n break;\n }\n }\n }\n }", "244": "static int functionMax(int arr[], int n)\n {\n Vector<Integer> []setBit = new Vector[32 + 1];\n for (int i = 0; i < setBit.length; i++)\n setBit[i] = new Vector<Integer>();\n for (int i = 0; i < n; i++)\n {\n for (int j = 0; j < size_int; j++)\n {\n if ((arr[i] & (1 << j)) > 0)\n setBit[j].add(i);\n }\n }\n for (int i = size_int; i >= 0; i--)\n {\n if (setBit[i].size() == 1)\n {\n swap(arr, 0, setBit[i].get(0));\n break;\n }\n }\n int maxAnd = arr[0];\n for (int i = 1; i < n; i++)\n {\n maxAnd = maxAnd & (~arr[i]);\n }\n return maxAnd;\n }\n static int[] swap(int []arr, int i, int j)\n {\n int temp = arr[i];\n arr[i] = arr[j];\n arr[j] = temp;\n return arr;\n }", "245": "static void findPrimeNos(int L, int R, Map<Integer, Integer> M, int K)\n {\n  for (int i = L; i <= R; i++)\n  {\n if(M.get(i) != null)\n M.put(i, M.get(i) + 1);\n else\n M.put(i, 1);\n  }\n  if (M.get(1) != null)\n  {\n M.remove(1);\n  }\n  for (int i = 2;\n i <= Math.sqrt(R); i++)\n  {\n int multiple = 2;\n while ((i * multiple) <= R)\n {\n if (M.get(i * multiple) != null)\n {\n M.remove(i * multiple);\n }\n multiple++;\n }\n  }\n  for (Map.Entry<Integer,\n Integer> entry :\n M.entrySet()) \n  {\n if (M.get(entry.getKey() + K) != null)\n {\n System.out.print(\"(\" + entry.getKey() +\n \", \" + (entry.getKey() + K) + \") \");\n }\n  }\n }\n static void getPrimePairs(int L, int R, int K)\n {\n  Map<Integer,\n Integer> M = new HashMap<Integer,\n Integer>(); \n  findPrimeNos(L, R, M, K);\n }", "246": "static String checkRearrangements(int[][] mat, int N, int M)\n {\n  for (int i = 0; i < N; i++)\n  {\n for (int j = 1; j < M; j++)\n {\n if (mat[i][0] != mat[i][j])\n {\n return \"Yes\";\n }\n }\n  }\n  return \"No\";\n }\n static String nonZeroXor(int[][] mat, int N, int M)\n {\n  int res = 0;\n  for (int i = 0; i < N; i++)\n  {\n res = res ^ mat[i][0];\n  }\n  if (res != 0)\n return \"Yes\";\n  else\n return checkRearrangements(mat, N, M);\n }", "247": "static void findTheGreatestX(int P, int Q)\n {\n HashMap<Integer, Integer> divisiors = new HashMap<>();\n for(int i = 2; i * i <= Q; i++)\n {\n while (Q % i == 0 && Q > 1)\n {\n Q /= i;\n if (divisiors.containsKey(i))\n {\n divisiors.put(i, divisiors.get(i) + 1);\n }\n else\n {\n divisiors.put(i, 1);\n }\n }\n }\n if (Q > 1)\n if (divisiors.containsKey(Q))\n {\n divisiors.put(Q, divisiors.get(Q) + 1);\n }\n else\n {\n divisiors.put(Q, 1);\n }\n int ans = 0;\n for(Map.Entry<Integer, Integer> i : divisiors.entrySet())\n {\n int frequency = i.getValue();\n int temp = P;\n int cur = 0;\n while (temp % i.getKey() == 0)\n {\n temp /= i.getKey();\n cur++;\n }\n if (cur < frequency)\n {\n ans = P;\n break;\n }\n temp = P;\n for(int j = cur; j >= frequency; j--)\n {\n temp /= i.getKey();\n }\n ans = Math.max(temp, ans);\n }\n System.out.print(ans);\n }", "248": "static void minimumSubsetDifference(int N)\n {\n int blockOfSize8 = N / 8;\n String str = \"ABBABAAB\";\n int subsetDifference = 0;\n String partition = \"\";\n while (blockOfSize8-- > 0)\n {\n partition += str;\n }\n int A[] = new int[N];\n int B[] = new int[N];\n int x = 0, y = 0;\n for(int i = 0; i < N; i++)\n {\n if (partition.charAt(i) == 'A')\n {\n A[x++] = ((i + 1) * (i + 1));\n }\n else\n {\n B[y++] = ((i + 1) * (i + 1));\n }\n }\n System.out.println(subsetDifference);\n for(int i = 0; i < x; i++)\n System.out.print(A[i] + \" \");\n System.out.println();\n for(int i = 0; i < y; i++)\n System.out.print(B[i] + \" \");\n }", "249": "static void minMoves(int arr[], int N)\n {\n int odd_element_cnt = 0;\n for (int i = 0; i < N; i++)\n {\n if (arr[i] % 2 != 0)\n {\n odd_element_cnt++;\n }\n }\n int moves = (odd_element_cnt) / 2;\n if (odd_element_cnt % 2 != 0)\n moves += 2;\n System.out.print(moves);\n }", "250": "static int countSetBits(int N)\n {\n int count = 0;\n while (N != 0)\n {\n N = N & (N - 1);\n count++;\n }\n return count;\n }", "251": "static void countNumberHavingKthBitSet(int N, int K)\n {\n int numbers_rightmost_setbit_K = 0;\n for (int i = 1; i <= K; i++)\n {\n int numbers_rightmost_bit_i = (N + 1) / 2;\n N -= numbers_rightmost_bit_i;\n if (i == K)\n {\n numbers_rightmost_setbit_K\n = numbers_rightmost_bit_i;\n }\n }\n System.out.println(numbers_rightmost_setbit_K);\n }", "252": "static void cntWaysConsArray(int A[], int N)\n {\n int total = 1;\n int oddArray = 1;\n for (int i = 0; i < N; i++)\n {\n total = total * 3;\n if (A[i] % 2 == 0)\n {\n oddArray *= 2;\n }\n }\n System.out.println( total - oddArray);\n }", "253": "static int findSize(int N)\n {\n if (N == 0)\n return 1;\n if (N == 1)\n return 1;\n int Size = 2 * findSize(N / 2) + 1;\n return Size;\n }\n static int CountOnes(int N, int L, int R)\n {\n if (L > R)\n {\n return 0;\n }\n if (N <= 1)\n {\n return N;\n } \n int ret = 0;\n int M = N / 2;\n int Siz_M = findSize(M);\n if (L <= Siz_M)\n {\n ret += CountOnes(N / 2, L,\n Math.min(Siz_M, R));\n }\n if (L <= Siz_M + 1 && Siz_M + 1 <= R)\n {\n ret += N % 2;\n }\n if (Siz_M + 1 < R)\n {\n ret += CountOnes(N / 2,\n Math.max(1, L - Siz_M - 1), R - Siz_M - 1);\n }\n return ret;\n }", "254": "static int minimumIncrement(int arr[], int N)\n {\n if (N % 2 != 0)\n {\n System.out.println( \"-1\");\n System.exit(0);\n }\n int cntEven = 0;\n int cntOdd = 0;\n for (int i = 0; i < N; i++)\n {\n if (arr[i] % 2 == 0)\n {\n cntEven += 1;\n }\n }\n cntOdd = N - cntEven;\n return Math.abs(cntEven - cntOdd) / 2;\n }", "255": "static void maxAdjacent(int []arr, int N)\n  {\n Vector<Integer> res = new Vector<Integer>();\n int arr_max = Integer.MIN_VALUE;\n for (int i = 1; i < N; i++)\n {\n arr_max = Math.max(arr_max,\n Math.abs(arr[i - 1] - arr[i]));\n }\n for (int i = 1; i < N - 1; i++)\n {\n int curr_max = Math.abs(arr[i - 1] - arr[i + 1]);\n int ans = Math.max(curr_max, arr_max);\n res.add(ans);\n }\n for (int x : res)\n System.out.print(x + \" \");\n System.out.println();\n  }", "256": "static void maxAdjacent(int[] arr, int N)\n  {\n ArrayList<Integer> res = new ArrayList<Integer>();\n for (int i = 1; i < N - 1; i++)\n {\n int prev = arr[0];\n int maxi = Integer.MIN_VALUE;\n for (int j = 1; j < N; j++)\n {\n if (i == j)\n continue;\n maxi = Math.max(maxi, Math.abs(arr[j] - prev));\n prev = arr[j];\n }\n res.add(maxi);\n }\n for (int x : res)\n {\n System.out.print(x + \" \");\n }\n System.out.println();\n  }", "257": "static int minSum(int A[], int N)\n {\n HashMap<Integer,Integer> mp = new HashMap<Integer,Integer>();\n int sum = 0;\n for (int i = 0; i < N; i++)\n {\n sum += A[i];\n if(mp.containsKey(A[i]))\n {\n mp.put(A[i], mp.get(A[i]) + 1);\n }\n else\n {\n mp.put(A[i], 1);\n }\n }\n int minSum = Integer.MAX_VALUE;\n for (Map.Entry<Integer,Integer> it : mp.entrySet())\n {\n minSum = Math.min(\n minSum, sum - (it.getKey() * it.getValue()));\n }\n return minSum;\n }", "258": "static void countElements(int N)\n  {\n int Cur_Ele = 1;\n int Count = 0;\n while (Cur_Ele <= N)\n {\n Count++;\n Cur_Ele = Cur_Ele * 2;\n }\n System.out.print(N - Count);\n  }", "259": "static int isPossible(int N)\n {\n return (((N & (N - 1)) & N));\n }\n static void countElements(int N)\n {\n int count = 0;\n for (int i = 1; i <= N; i++)\n {\n if (isPossible(i) != 0)\n count++;\n }\n System.out.println(count);\n }", "260": "static void singleDigitSubarrayCount(int arr[], int N)\n {\n int res = 0;\n int count = 0;\n for (int i = 0; i < N; i++)\n {\n if (arr[i] <= 9)\n {\n count++;\n res += count;\n }\n else\n {\n count = 0;\n }\n }\n System.out.print(res);\n }", "261": "static void productExceptSelf(int arr[], int N)\n {\n int product = 1;\n int z = 0;\n for (int i = 0; i < N; i++) {\n if (arr[i] != 0)\n product *= arr[i];\n if (arr[i] == 0)\n z += 1;\n }\n int a = Math.abs(product);\n for (int i = 0; i < N; i++) {\n if (z == 1) {\n if (arr[i] != 0)\n arr[i] = 0;\n else\n arr[i] = product;\n continue;\n }\n else if (z > 1) {\n arr[i] = 0;\n continue;\n }\n int b = Math.abs(arr[i]);\n int curr = (int)Math.round(Math.exp(Math.log(a) - Math.log(b)));\n if (arr[i] < 0 && product < 0)\n arr[i] = curr;\n else if (arr[i] > 0 && product > 0)\n arr[i] = curr;\n else\n arr[i] = -1 * curr;\n }\n for (int i = 0; i < N; i++) {\n System.out.print(arr[i] + \" \");\n }\n }", "262": "static void convertToASCII(int N)\n {\n String num = Integer.toString(N);\n for (char ch : num.toCharArray()) {\n System.out.print(ch + \" (\"\n + (int)ch + \")\\n\");\n }\n }", "263": "public static boolean isPossible(int[] target)\n {\n int max = 0;\n int index = 0;\n for (int i = 0; i < target.length; i++) {\n if (max < target[i]) {\n max = target[i];\n index = i;\n }\n }\n if (max == 1)\n return true;\n for (int i = 0; i < target.length; i++) {\n if (i != index) {\n max -= target[i];\n if (max <= 0)\n return false;\n }\n }\n target[index] = max;\n return isPossible(target);\n }", "264": "public static void printSpiral(int size)\n {\n int row = 0, col = 0;\n int boundary = size - 1;\n int sizeLeft = size - 1;\n int flag = 1;\n char move = 'r';\n int matrix[][] = new int[size][size];\n for (int i = 1; i < size * size + 1; i++) {\n matrix[row][col] = i;\n switch (move) {\n case 'r':\n col += 1;\n break;\n case 'l':\n col -= 1;\n break;\n case 'u':\n row -= 1;\n break;\n case 'd':\n row += 1;\n break;\n }\n if (i == boundary) {\n boundary += sizeLeft;\n if (flag != 2) {\n flag = 2;\n }\n else {\n flag = 1;\n sizeLeft -= 1;\n }\n switch (move) {\n case 'r':\n move = 'd';\n break;\n case 'd':\n move = 'l';\n break;\n case 'l':\n move = 'u';\n break;\n case 'u':\n move = 'r';\n break;\n }\n }\n }\n for (row = 0; row < size; row++) {\n for (col = 0; col < size; col++) {\n int n = matrix[row][col];\n System.out.print((n < 10)\n ? (n + \" \")\n : (n + \" \"));\n }\n System.out.println();\n }\n }", "265": "static int gcd(int a, int b)\n {\n while (b > 0) {\n int rem = a % b;\n a = b;\n b = rem;\n }\n return a;\n }\n static int countNumberOfWays(int n)\n {\n if (n == 1)\n return -1;\n int g = 0;\n int power = 0;\n while (n % 2 == 0) {\n power++;\n n /= 2;\n }\n g = gcd(g, power);\n for (int i = 3; i <= (int)Math.sqrt(n); i += 2) {\n power = 0;\n while (n % i == 0) {\n power++;\n n /= i;\n }\n g = gcd(g, power);\n }\n if (n > 2)\n g = gcd(g, 1);\n int ways = 1;\n power = 0;\n while (g % 2 == 0) {\n g /= 2;\n power++;\n }\n ways *= (power + 1);\n for (int i = 3; i <= (int)Math.sqrt(g); i += 2) {\n power = 0;\n while (g % i == 0) {\n power++;\n g /= i;\n }\n ways *= (power + 1);\n }\n if (g > 2)\n ways *= 2;\n return ways;\n }", "266": "static int countPrimeFactors(int n)\n {\n int count = 0;\n while (n % 2 == 0)\n {\n n = n / 2;\n count++;\n }\n for(int i = 3;\n i <= (int)Math.sqrt(n); i = i + 2)\n {\n while (n % i == 0)\n {\n n = n / i;\n count++;\n }\n }\n if (n > 2)\n count++;\n return (count);\n }\n static int findSum(int n)\n {\n int sum = 0;\n for(int i = 1, num = 2; i <= n; num++)\n {\n if (countPrimeFactors(num) == 2)\n {\n sum += num;\n i++;\n }\n }\n return sum;\n }\n static void check(int n, int k)\n {\n int s = findSum(k - 1);\n if (s >= n)\n System.out.print(\"No\");\n else\n System.out.print(\"Yes\");\n }", "267": "static void partitionArray(int a[], int n)\n {\n int min[] = new int[n];\n int mini = Integer.MAX_VALUE;\n for (int i = n - 1; i >= 0; i--) {\n mini = Math.min(mini, a[i]);\n min[i] = mini;\n }\n int maxi = Integer.MIN_VALUE;\n int ind = -1;\n for (int i = 0; i < n - 1; i++) {\n maxi = Math.max(maxi, a[i]);\n if (maxi < min[i + 1]) {\n ind = i;\n break;\n }\n }\n if (ind != -1) {\n for (int i = 0; i <= ind; i++)\n System.out.print(a[i] + \" \");\n System.out.println();\n for (int i = ind + 1; i < n; i++)\n System.out.print(a[i] + \" \");\n }\n else\n System.out.println(\"Impossible\");\n }", "268": "static int perfectSquare(int num)\n  {\n int sr = (int)(Math.sqrt(num));\n int a = sr * sr;\n int b = (sr + 1) * (sr + 1);\n if ((num - a) < (b - num)) {\n return a;\n }\n else {\n return b;\n }\n  }\n static int powerOfTwo(int num)\n  {\n int lg = (int)(Math.log(num) / Math.log(2));\n int p = (int)(Math.pow(2, lg));\n return p;\n  }\n static void uniqueElement(int arr[], int N)\n  {\n boolean ans = true;\n HashMap<Integer, Integer> freq\n = new HashMap<Integer, Integer>();\n for (int i = 0; i < N; i++) {\n if (freq.containsKey(arr[i])) {\n freq.put(arr[i], freq.get(arr[i]) + 1);\n }\n else {\n freq.put(arr[i], 1);\n }\n }\n for (Map.Entry<Integer, Integer> el :\n freq.entrySet()) {\n if (el.getValue() == 1) {\n ans = false;\n int ps = perfectSquare(el.getKey());\n System.out.print(powerOfTwo(ps) + \" \");\n }\n }\n if (ans)\n System.out.print(\"-1\");\n  }", "269": "static long multiplyByMersenne(long N, long M)\n {\n long x = (int)(Math.log(M + 1) / Math.log(2));\n return ((N << x) - N);\n }", "270": "static void checkCommonDivisor(int[] arr, int N, int X)\n {\n int G = 0;\n for(int i = 0; i < N; i++)\n {\n G = gcd(G, arr[i]);\n }\n int copy_G = G;\n for(int divisor = 2; divisor <= X; divisor++)\n {\n while (G % divisor == 0)\n {\n G = G / divisor;\n }\n }\n if (G <= X)\n {\n System.out.println(\"Yes\");\n for(int i = 0; i < N; i++)\n System.out.print((arr[i] / copy_G) + \" \");\n System.out.println();\n }\n else\n System.out.println(\"No\");\n }\n static int gcd(int a, int b)\n {\n if (b == 0)\n return a;\n return gcd(b, a % b);\n }", "271": "static boolean check(ArrayList<Integer> Adj[], int Src, int N, boolean visited[])\n {\n int color[] = new int[N];\n visited[Src] = true;\n ArrayDeque<Integer> q = new ArrayDeque<>();\n q.addLast(Src);\n while (!q.isEmpty())\n {\n int u = q.removeFirst();\n int Col = color[u];\n for(int x : Adj[u])\n {\n if (visited[x] == true && color[x] == Col)\n {\n return false;\n }\n else if (visited[x] == false)\n {\n visited[x] = true;\n q.addLast(x);\n color[x] = 1 - Col;\n }\n }\n }\n return true;\n }\n static void addEdge(ArrayList<Integer> Adj[], int u, int v)\n {\n Adj[u].add(v);\n Adj[v].add(u);\n }\n static void isPossible(Node Arr[], int N)\n {\n @SuppressWarnings(\"unchecked\")\n ArrayList<Integer> [] Adj = (ArrayList<Integer>[])new ArrayList[N];\n for(int i = 0; i < N; i++)\n Adj[i] = new ArrayList<>();\n for(int i = 0; i < N - 1; i++)\n {\n for(int j = i + 1; j < N; j++)\n {\n if (Arr[i].R < Arr[j].L Arr[i].L > Arr[j].R)\n {\n continue;\n }\n else\n {\n if (Arr[i].V == Arr[j].V)\n {\n addEdge(Adj, i, j);\n }\n }\n }\n }\n boolean visited[] = new boolean[N];\n for(int i = 0; i < N; i++)\n {\n if (visited[i] == false && Adj[i].size() > 0)\n {\n if (check(Adj, i, N, visited) == false)\n {\n System.out.println(\"No\");\n return;\n }\n }\n }\n System.out.println(\"Yes\");\n }", "272": "static void minimumSteps(int x, int y)\n {\n int cnt = 0;\n while (x != 0 && y != 0)\n {\n if (x > y)\n {\n cnt += x / y;\n x %= y;\n }\n else\n {\n cnt += y / x;\n y %= x;\n }\n }\n cnt--;\n if (x > 1 y > 1)\n cnt = -1;\n System.out.println(cnt);\n }", "273": "private static double vectorMagnitude(int x, int y, int z)\n {\n int sum = x * x + y * y + z * z;\n return Math.sqrt(sum);\n }", "274": "static void findMedian(int Mean, int Mode)\n {\n double Median = (2 * Mean + Mode) / 3.0;\n System.out.print((int)Median);\n }", "275": "static void sieveOfEratosthenes(int N, int s[])\n {\n boolean []prime = new boolean[N + 1];\n for(int i = 2; i <= N; i += 2)\n s[i] = 2;\n for(int i = 3; i <= N; i += 2)\n {\n if (prime[i] == false)\n {\n s[i] = i;\n for(int j = i; j * i <= N; j += 2)\n {\n if (!prime[i * j])\n {\n prime[i * j] = true;\n s[i * j] = i;\n }\n }\n }\n }\n }\n static void findDifference(int N)\n {\n int []s = new int[N + 1];\n sieveOfEratosthenes(N, s);\n int total = 1, odd = 1, even = 0;\n int curr = s[N];\n int cnt = 1;\n while (N > 1)\n {\n N /= s[N];\n if (curr == s[N])\n {\n cnt++;\n continue;\n }\n if (curr == 2)\n {\n total = total * (cnt + 1);\n }\n else\n {\n total = total * (cnt + 1);\n odd = odd * (cnt + 1);\n }\n curr = s[N];\n cnt = 1;\n }\n even = total - odd;\n System.out.print(Math.abs(even - odd));\n }", "276": "static void findPermutation(int[] arr)\n {\n int N = arr.length;\n int i = N - 2;\n while (i >= 0 && arr[i] <= arr[i + 1])\n i--;\n if (i == -1)\n {\n System.out.print(\"-1\");\n return;\n }\n int j = N - 1;\n while (j > i && arr[j] >= arr[i])\n j--;\n while (j > i && arr[j] == arr[j - 1])\n {\n j--;\n }\n int temp = arr[i];\n arr[i] = arr[j];\n arr[j] = temp;\n for(int it : arr)\n {\n System.out.print(it + \" \");\n }\n }", "277": "static void evenOddBitwiseXOR(int N)\n {\n System.out.print(\"Even: \" + 0 + \" \");\n for(int i = 4; i <= N; i = i + 4)\n {\n System.out.print(i + \" \");\n }\n System.out.print(\"\\n\");\n System.out.print(\"Odd: \" + 1 + \" \");\n for(int i = 4; i <= N; i = i + 4)\n {\n System.out.print(i - 1 + \" \");\n }\n if (N % 4 == 2)\n System.out.print(N + 1);\n else if (N % 4 == 3)\n System.out.print(N);\n }", "278": "static void check(int n)\n {\n int sumOfDigit = 0;\n int prodOfDigit = 1;\n while (n > 0)\n {\n int rem;\n rem = n % 10;\n sumOfDigit += rem;\n prodOfDigit *= rem;\n n /= 10;\n }\n if (sumOfDigit > prodOfDigit)\n System.out.println(\"Yes\");\n else\n System.out.println(\"No\");\n }", "279": "static void findbitwiseOR(int[] a, int n)\n {\n int res = 0;\n for(int i = 0; i < n; i++)\n res = res | a[i];\n System.out.println(res);\n }", "280": "static void findbitwiseOR(int[] a, int n)\n {\n int res = 0;\n for (int i = 0; i < n; i++) {\n int curr_sub_array = a[i];\n res = res | curr_sub_array;\n for (int j = i; j < n; j++) {\n curr_sub_array = curr_sub_array & a[j];\n res = res | curr_sub_array;\n }\n }\n System.out.println(res);\n }", "281": "static int KthSmallest(int A[], int B[], int N, int K)\n {\n int M = 0;\n for (int i = 0; i < N; i++) {\n M = Math.max(A[i], M);\n }\n int freq[] = new int[M + 1];\n for (int i = 0; i < N; i++) {\n freq[A[i]] += B[i];\n }\n int sum = 0;\n for (int i = 0; i <= M; i++) {\n sum += freq[i];\n if (sum >= K) {\n return i;\n }\n }\n return -1;\n }", "282": "static String isDivisibleByDivisor(int S, int D)\n {\n S %= D;\n Set<Integer> hashMap = new HashSet<>();\n hashMap.add(S);\n for(int i = 0; i <= D; i++)\n {\n S += (S % D);\n S %= D;\n if (hashMap.contains(S))\n {\n if (S == 0)\n {\n return \"Yes\";\n }\n return \"No\";\n }\n else\n hashMap.add(S);\n }\n return \"Yes\";\n }", "283": "static int gcd(int a, int b)\n {\n if (b == 0)\n {\n return a;\n }\n return gcd(b, a % b);\n }\n static HashMap<Integer, Integer> PrimeFactor(int N)\n {\n HashMap<Integer, Integer> primef = new HashMap<Integer, Integer>();\n while (N % 2 == 0)\n {\n if (primef.containsKey(2))\n {\n primef.put(2, primef.get(2) + 1);\n }\n else\n {\n primef.put(2, 1);\n }\n N = N / 2;\n }\n for(int i = 3; i <= Math.sqrt(N); i++)\n {\n while (N % i == 0)\n {\n if (primef.containsKey(i))\n {\n primef.put(i, primef.get(i) + 1);\n }\n else\n {\n primef.put(i, 1);\n }\n N = N / 2;\n }\n }\n if (N > 2)\n {\n primef.put(N, 1);\n }\n return primef;\n }\n static int CountToMakeEqual(int X, int Y)\n {\n int gcdofXY = gcd(X, Y);\n int newX = Y / gcdofXY;\n int newY = X / gcdofXY;\n HashMap<Integer, Integer> primeX = PrimeFactor(newX);\n HashMap<Integer, Integer> primeY = PrimeFactor(newY);\n int ans = 0;\n for (Map.Entry keys : primeX.entrySet()) {\n if (X % (int)keys.getKey() != 0)\n {\n return -1;\n }\n ans += primeX.get(keys.getKey());\n }\n for (Map.Entry keys : primeY.entrySet()) {\n if (Y % (int)keys.getKey() != 0)\n {\n return -1;\n }\n ans += primeY.get(keys.getKey());\n }\n return ans;\n }", "284": "static boolean isPrime(int X)\n {\n for(int i = 2; i * i <= X; i++)\n if (X % i == 0)\n return false;\n return true;\n }\n static void printPrimes(int A[], int N)\n {\n for(int i = 0; i < N; i++)\n {\n for(int j = A[i] - 1;; j--)\n {\n if (isPrime(j))\n {\n System.out.print(j + \" \");\n break;\n }\n }\n for(int j = A[i] + 1;; j++)\n {\n if (isPrime(j))\n {\n System.out.print( j + \" \");\n break;\n }\n }\n System.out.println();\n }\n }", "285": "static void countSubarray(int[] arr, int n)\n {\n int L = 0, R = 0;\n int mx = Integer.MIN_VALUE;\n for (int i = 0; i < n; i++)\n mx = Math.max(mx, arr[i]);\n for (int i = 0; i < n; i++) {\n if (arr[i] * 2 > mx) {\n L = i;\n break;\n }\n }\n for (int i = n - 1; i >= 0; i--) {\n if (arr[i] * 2 > mx) {\n R = i;\n break;\n }\n }\n System.out.println((L + 1) * (n - R));\n }", "286": "public static void countSubarray(int arr[], int n)\n {\n int count = 0;\n for(int i = 0; i < n; i++)\n {\n for(int j = i; j < n; j++)\n {\n int mxSubarray = 0;\n int mxOther = 0;\n for(int k = i; k <= j; k++)\n {\n mxSubarray = Math.max( mxSubarray, arr[k]);\n }\n for(int k = 0; k < i; k++)\n {\n mxOther = Math.max(mxOther, arr[k]);\n }\n for(int k = j + 1; k < n; k++)\n {\n mxOther = Math.max(mxOther, arr[k]);\n }\n if (mxSubarray > (2 * mxOther))\n count++;\n }\n }\n System.out.println(count);\n }", "287": "static void preCalculate(int[] phi, int[] ans)\n {\n phi[0] = 0;\n phi[1] = 1;\n for (int i = 2; i <= MAX; i++)\n phi[i] = i;\n for (int i = 2; i <= MAX; i++) {\n if (phi[i] == i) {\n for (int j = i; j <= MAX; j += i)\n phi[j] -= (phi[j] / i);\n }\n }\n for (int i = 1; i <= MAX; i++)\n ans[i] = ans[i - 1] + (i - phi[i]);\n }\n static void countPairs(int[] arr, int N)\n {\n int[] phi = new int[100000];\n Arrays.fill(phi, 0);\n int[] ans = new int[100000];\n Arrays.fill(ans, 0);\n preCalculate(phi, ans);\n for (int i = 0; i < N; ++i) {\n System.out.print(ans[arr[i]] + \" \");\n }\n }", "288": "static int gcd(int a, int b)\n {\n if (b == 0)\n return a;\n return gcd(b, a % b);\n }\n static void countPairs(int[] arr, int N)\n {\n for(int i = 0; i < N; i++)\n {\n int count = 0;\n for(int x = 1; x <= arr[i]; x++)\n {\n for(int y = x; y <= arr[i]; y++)\n {\n if (gcd(x, y) > 1)\n count++;\n }\n }\n System.out.print(count + \" \");\n }\n }", "289": "static int factorial(int n)\n {\n if (n == 0)\n return 1;\n return n * factorial(n - 1);\n }\n static long numOfNecklace(int N)\n {\n long ans = factorial(N)\n / (factorial(N / 2) * factorial(N / 2));\n ans = ans * factorial(N / 2 - 1);\n ans = ans * factorial(N / 2 - 1);\n ans /= 2;\n return ans;\n }", "290": "static int maxSubArraySumRepeated(int[] arr, int N, int K)\n {\n int sum = 0;\n for(int i = 0; i < N; i++)\n sum += arr[i];\n int curr = arr[0];\n int ans = arr[0];\n if (K == 1)\n {\n for(int i = 1; i < N; i++)\n {\n curr = Math.max(arr[i], curr + arr[i]);\n ans = Math.max(ans, curr);\n }\n return ans;\n }\n ArrayList<Integer> V = new ArrayList<Integer>();\n for(int i = 0; i < 2 * N; i++)\n {\n V.add(arr[i % N]);\n }\n int maxSuf = V.get(0);\n int maxPref = V.get(2 * N - 1);\n curr = V.get(0);\n for(int i = 1; i < 2 * N; i++)\n {\n curr += V.get(i);\n maxPref = Math.max(maxPref, curr);\n }\n curr = V.get(2 * N - 1);\n for(int i = 2 * N - 2; i >= 0; i--)\n {\n curr += V.get(i);\n maxSuf = Math.max(maxSuf, curr);\n }\n curr = V.get(0);\n for(int i = 1; i < 2 * N; i++)\n {\n curr = Math.max(V.get(i), curr + V.get(i));\n ans = Math.max(ans, curr);\n }\n if (sum > 0)\n {\n int temp = sum * (K - 2);\n ans = Math.max(ans, Math.max(temp + maxPref, temp + maxSuf));\n }\n return ans;\n }", "291": "static int ExpoFactorial(int N)\n {\n int res = 1;\n int mod = 1000000007;\n for(int i = 2; i < N + 1; i++)\n res = (int)Math.pow(i, res) % mod;\n return res;\n }", "292": "static void rangeSum(int arr[], int N, int L, int R)\n {\n int prefix[] = new int[N+1];\n prefix[0] = 0;\n for (int i = 1; i <= N; i++) {\n prefix[i] = prefix[i - 1]\n + arr[i - 1];\n }\n int leftsum\n = ((L - 1) / N) * prefix[N]\n + prefix[(L - 1) % N];\n int rightsum = (R / N) * prefix[N]\n + prefix[R % N];\n System.out.print( rightsum - leftsum);\n }", "293": "static void rangeSum(int arr[], int N, int L, int R)\n {\n int sum = 0;\n for (int i = L - 1; i < R; i++) {\n sum += arr[i % N];\n }\n System.out.println(sum);\n }", "294": "static void check(int N)\n {\n int twos = 0, fives = 0;\n while (N % 2 == 0)\n {\n N /= 2;\n twos++;\n }\n while (N % 5 == 0)\n {\n N /= 5;\n fives++;\n }\n if (N == 1 && twos <= fives)\n {\n System.out.println( 2 * fives - twos);\n }\n else\n {\n System.out.println(-1);\n }\n }", "295": "static int getPairsCount(int arr[], int n)\n {\n int count = 0;\n for (int i = 0; i < n; i++) {\n for (int j = arr[i] - (i % arr[i]); j < n; j += arr[i]) {\n if (i < j\n && Math.abs(arr[i] - arr[j])\n >= Math.min(arr[i], arr[j])) {\n count++;\n }\n }\n }\n return count;\n }", "296": "static int smallest(int k, int d)\n {\n int cnt = 1;\n int m = d % k;\n int[] v = new int[k];\n Arrays.fill(v, 0);\n v[m] = 1;\n while (1 != 0)\n {\n if (m == 0)\n return cnt;\n m = (((m * (10 % k)) % k) + (d % k)) % k;\n if (v[m] == 1)\n return -1;\n v[m] = 1;\n cnt++;\n }\n }", "297": "static void performQuery(int arr[], int Q[][])\n {\n for (int i = 0; i < Q.length; i++) {\n int or = 0;\n int x = Q[i][0];\n arr[x - 1] = Q[i][1];\n for (int j = 0; j < arr.length; j++) {\n or = or | arr[j];\n }\n System.out.print(or + \" \");\n }\n }", "298": "static int countSubsequences(int arr[], int N)\n {\n int odd = 0;\n for (int i = 0; i < N; i++) {\n if ((arr[i] & 1) % 2 == 1)\n odd++;\n }\n return (1 << odd) - 1;\n }", "299": "static int chk(int n)\n {\n Vector<Integer> v = new Vector<Integer>();\n while (n != 0) {\n v.add(n % 2);\n n = n / 2;\n }\n for (int i = 0; i < v.size(); i++) {\n if (v.get(i) == 1) {\n return (int) Math.pow(2, i);\n }\n }\n return 0;\n }\n static void sumOfLSB(int arr[], int N)\n {\n Vector<Integer> lsb_arr = new Vector<Integer>() ;\n for (int i = 0; i < N; i++) {\n lsb_arr.add(chk(arr[i]));\n }\n Collections.sort(lsb_arr);\n int ans = 0;\n for (int i = 0; i < N - 1; i += 2) {\n ans += (lsb_arr.get(i + 1));\n }\n System.out.print(ans);\n }", "300": "static double polygonArea(double X[], double Y[], int n)\n {\n double area = 0.0;\n int j = n - 1;\n for (int i = 0; i < n; i++)\n {\n area += (X[j] + X[i]) * (Y[j] - Y[i]);\n j = i;\n }\n return Math.abs(area / 2.0);\n }", "301": "public static int numberOfSquares(int base)\n  {\n base = (base - 2);\n base = Math.floorDiv(base, 2);\n return base * (base + 1)/2;\n  }", "302": "static void findRightAngle(double A, double H)\n {\n double D = Math.pow(H, 4) - 16 * A * A;\n if (D >= 0)\n {\n double root1 = (H * H + Math.sqrt(D)) / 2;\n double root2 = (H * H - Math.sqrt(D)) / 2;\n double a = Math.sqrt(root1);\n double b = Math.sqrt(root2);\n if (b >= a)\n System.out.print(a + \" \" + b + \" \" + H);\n else\n System.out.print(b + \" \" + a + \" \" + H);\n }\n else\n System.out.print(\"-1\");\n }", "303": "static int numberOfDiagonals(int n)\n {\n return n * (n - 3) / 2;\n }", "304": "static void checkCollision(int a, int b, int c, int x, int y, int radius)\n {\n double dist = (Math.abs(a * x + b * y + c)) /\n Math.sqrt(a * a + b * b);\n if (radius == dist)\n System.out.println ( \"Touch\" );\n else if (radius > dist)\n System.out.println( \"Intersect\") ;\n else\n System.out.println( \"Outside\") ;\n }", "305": "static int maxSquare(int b, int m)\n {\n return (b / m - 1) * (b / m) / 2;\n }", "306": "static void SectorArea(double radius,double angle)\n {\n if(angle >= 360)\n System.out.println(\"Angle not possible\");\n else\n {\n double sector =((22 * radius * radius) / 7)\n * (angle / 360);\n System.out.println(sector);\n }\n }", "307": "static double arcLength(double diameter, double angle)\n {\n double pi = 22.0 / 7.0;\n double arc;\n if (angle >= 360) {\n System.out.println(\"Angle cannot\" + \" be formed\");\n return 0;\n }\n else {\n arc = (pi * diameter) * (angle / 360.0);\n return arc;\n }\n }", "308": "public static double hexagonArea(double s)\n {\n return ((3 * Math.sqrt(3) *\n (s * s)) / 2);\n }", "309": "static double Area(int b1, int b2, int h)\n {\n return ((b1 + b2) / 2) * h;\n }", "310": "public static float volumeTriangular(int a, int b, int h)\n {\n float vol = (float)(0.1666) * a * b * h;\n return vol;\n }\n public static float volumeSquare(int b, int h)\n {\n float vol = (float)(0.33) * b * b * h;\n return vol;\n }\n public static float volumePentagonal(int a, int b, int h)\n {\n float vol = (float)(0.83) * a * b * h;\n return vol;\n }\n public static float volumeHexagonal(int a, int b, int h)\n {\n float vol = (float)a * b * h;\n return vol;\n }", "311": "static int maxvolume(int s)\n {\n int length = s / 3;\n s -= length;\n int breadth = s / 2;\n int height = s - breadth;\n return length * breadth * height;\n }", "312": "static int maxvolume(int s)\n {\n int maxvalue = 0;\n for (int i = 1; i <= s - 2; i++)\n {\n for (int j = 1; j <= s - 1; j++)\n {\n int k = s - i - j;\n maxvalue = Math.max(maxvalue, i * j * k);\n }\n }\n return maxvalue;\n }", "313": "static void midpoint(int x1, int x2, int y1, int y2)\n {\n System.out.print((x1 + x2) / 2 +\n \" , \" + (y1 + y2) / 2) ;\n }", "314": "static float \n area_of_segment(float radius, float angle)\n {\n float area_of_sector = pi *\n  (radius * radius) * (angle / 360);\n float area_of_triangle =\n (float)1 / 2 * (radius * radius) *\n (float)Math.sin((angle * pi) / 180);\n return area_of_sector - area_of_triangle;\n }", "315": "static boolean isRectangle(int a, int b, int c, int d)\n {\n if (a == b && a == c && a == d && c == d && b == c && b == d)\n return true;\n else if (a == b && c == d)\n return true;\n else if (a == d && c == b)\n return true;\n else if (a == c && d == b)\n return true;\n else\n return false;\n }", "316": "static double findPCSlope(double m)\n {\n return -1.0 / m;\n }", "317": "static float findVolume(float l, float b, float h)\n {\n float volume = (l * b * h) / 2;\n return volume;\n }", "318": "static void shortest_distance(float x1, float y1, float z1, float a, float b, float c, float d)\n {\n d = Math.abs((a * x1 + b * y1 + c * z1 + d));\n float e = (float)Math.sqrt(a * a + b * b + c * c);\n System.out.println(\"Perpendicular distance \" + \"is \" + d / e);\n }", "319": "static void distance(float a1, float b1, float c1, float d1, float a2, float b2, float c2, float d2)\n {\n float x1,y1,z1,d;\n if (a1 / a2 == b1 / b2 && b1 / b2 == c1 / c2)\n {\n x1 = y1 = 0;\n z1 =-d1 / c1;\n d = Math.abs(( c2 * z1 + d2)) /\n (float)(Math.sqrt(a2 * a2 + b2 * b2 + c2 * c2));\n System.out.println(\"Perpendicular distance is \"+ d);\n }\n else\n System.out.println(\"Planes are not parallel\");\n }", "320": "static boolean FindPoint(int x1, int y1, int x2, int y2, int x, int y)\n {\n if (x > x1 && x < x2 && y > y1 && y < y2)\n return true;\n return false;\n }", "321": "static boolean LiesInsieRectangle(int a, int b, int x, int y)\n {\n if (x - y - b <= 0 && x - y + b >= 0 && x + y - 2 * a + b <= 0 && x + y - b >= 0)\n return true;\n return false;\n }", "322": "static void is_partition_possible(int n, int x[], int y[], int w[])\n {\n Map<Integer, Integer> weight_at_x = new HashMap<Integer, Integer>();\n int max_x = (int) -2e3, min_x = (int) 2e3;\n for (int i = 0; i < n; i++)\n {\n int new_x = x[i] - y[i];\n max_x = Math.max(max_x, new_x);\n min_x = Math.min(min_x, new_x);\n if(weight_at_x.containsKey(new_x))\n {\n weight_at_x.put(new_x, weight_at_x.get(new_x) + w[i]);\n }\n else\n {\n weight_at_x.put(new_x,w[i]);\n }\n }\n Vector<Integer> sum_till = new Vector<>();\n sum_till.add(0);\n for (int s = min_x; s <= max_x; s++)\n {\n if(weight_at_x.get(s) == null)\n sum_till.add(sum_till.lastElement());\n else\n sum_till.add(sum_till.lastElement() +\n weight_at_x.get(s));\n }\n int total_sum = sum_till.lastElement();\n int partition_possible = 0;\n for (int i = 1; i < sum_till.size(); i++)\n {\n if (sum_till.get(i) == total_sum - sum_till.get(i))\n partition_possible = 1;\n if (sum_till.get(i-1) == total_sum - sum_till.get(i))\n partition_possible = 1;\n }\n System.out.printf(partition_possible == 1 ? \"YES\\n\" : \"NO\\n\");\n }", "323": "static double longestRodInCuboid(int length, int breadth, int height)\n {\n double result;\n int temp;\n temp = length * length + breadth *\n breadth + height * height;\n result = Math.sqrt(temp);\n return result;\n }", "324": "static float area(float a)\n {\n if (a < 0)\n return -1;\n float area = (float)Math.sqrt(a) / 6;\n return area;\n }", "325": "static float rhombusarea(float l, float b)\n {\n if (l < 0 b < 0)\n return -1;\n return (l * b) / 2;\n }", "326": NaN}, "Python": {"0": "def subtract(x, y):\n    if y == 0:\n        return x\n    return subtract(x ^ y, (~x & y) << 1)", "1": "def subtract(x, y):\n    while y != 0:\n        borrow = (~x) & y\n        x = x ^ y\n        y = borrow << 1\n    return x", "2": "def multiplyBySevenByEight(n):\n    return ((n << 3) -n) >> 3", "3": "def multiplyBySevenByEight(n):\r\n\treturn (n - (n >> 3))", "4": "def maxConsecutiveOnes(x):\r\n\tcount = 0\r\n\twhile x!=0:\r\n\t\tx = (x & (x << 1))\r\n\t\tcount += 1\r\n\treturn count", "5": "def countTrailingZero(x):\n        lookup = [32, 0, 1, 26, 2, 23, 27, 0, 3, 16, 24, 30, 28, 11, 0, 13, 4, 7, 17, 0, 25, 22, 31, 15, 29, 10, 12, 6, 0, 21, 14, 9, 5, 20, 8, 19, 18]\n        return lookup[(-x & x) % 37]", "6": "def countTrailingZero(x):\r\n\tcount = 0\r\n\twhile ((x & 1) == 0):\r\n\t\tx = x >> 1\r\n\t\tcount += 1\r\n\treturn count", "7": "def setBitNumber(n):\r\n\tk = int(math.log(n) / math.log(2))\r\n\treturn 1 << k", "8": "def setBitNumber(n):\r\n\tn |= n >> 1\r\n\tn |= n >> 2\r\n\tn |= n >> 4\r\n\tn |= n >> 8\r\n\tn |= n >> 16\r\n\tn = n + 1\r\n\treturn (n >> 1)", "9": "def setBitNumber(n):\r\n\tif n == 0:\r\n\t\treturn 0\r\n\tmsb = 0\r\n\tn = n / 2\r\n\twhile n != 0:\r\n\t\tn = n / 2\r\n\t\tmsb += 1\r\n\treturn (1 << msb)", "10": "def answer(n):\r\n\tm = 2\r\n\tans = 1\r\n\tr = 1\r\n\twhile r < n:\r\n\t\tr = (2**m - 1) * (2**(m-1))\r\n\t\tif r < n:\r\n\t\t\tans = r\r\n\t\tm += 1\r\n\treturn ans", "11": "def isDivisibleby17(n):\r\n\tif n == 0 or n == 17:\r\n\t\treturn True\r\n\tif n < 17:\r\n\t\treturn False\r\n\treturn isDivisibleby17(n >> 4 - n & 15)", "12": "def printSubsets(n):\r\n\tfor i in range(n, 0, -1):\r\n\t\tprint(i, end=\" \")\r\n\tprint(0)", "13": "def printSubsets(n):\r\n    for i in range(n+1):\r\n        if (n & i) == i:\r\n            print(i)", "14": "def hammingDistance(n1, n2):\r\n    x = n1 ^ n2\r\n    setBits = 0\r\n    while x > 0:\r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits", "15": "def bit_q(i, j):\r\n        sum = 0\r\n        while j > 0:\r\n                sum += bit[j]\r\n                j -= (j & -j)\r\n        i -= 1\r\n        while i > 0:\r\n                sum -= bit[i]\r\n                i -= (i & -i)\r\n        return sum\r\ndef bit_up(i, diff):\r\n        while i <= n:\r\n                bit[i] += diff\r\n                i += i & -i\r\ndef dfs(node):\r\n        global Ideal_pair\r\n        Ideal_pair += bit_q(max(1, node - k), min(n, node + k))\r\n        bit_up(node, 1)\r\n        for i in al[node]:\r\n                dfs(i)\r\n        bit_up(node, -1)\r\ndef initialise():\r\n        global Ideal_pair\r\n        Ideal_pair = 0\r\n        for i in range(1, n + 1):\r\n                root_node[i] = True\r\n                bit[i] = 0\r\ndef Add_Edge(x, y):\r\n        al[x].append(y)\r\n        root_node[y] = False\r\ndef Idealpairs():\r\n        r = -1\r\n        for i in range(1, n + 1):\r\n                if root_node[i]:\r\n                        r = i\r\n                        break\r\n        dfs(r)\r\n        return Ideal_pair", "16": "def insert(node, num, index):\r\n    for bits in range(lg, -1, -1):\r\n        curr_bit = (num >> bits) & 1\r\n        if node.children[curr_bit] == None:\r\n            node.children[curr_bit] = TrieNode()\r\n        node = node.children[curr_bit]\r\n    node.sum_of_indexes += index\r\n    node.number_of_indexes += 1\r\n\r\ndef query(node, num, index):\r\n    for bits in range(lg, -1, -1):\r\n        curr_bit = (num >> bits) & 1\r\n        if node.children[curr_bit] == None:\r\n            return 0\r\n        node = node.children[curr_bit]\r\n    sz = node.number_of_indexes\r\n    sum = node.sum_of_indexes\r\n    ans = (sz * index) - (sum)\r\n    return ans\r\n\r\ndef no_of_triplets(arr, n):\r\n    curr_xor = 0\r\n    number_of_triplets = 0\r\n    root = TrieNode()\r\n    for i in range(n):\r\n        x = arr[i]\r\n        insert(root, curr_xor, i)\r\n        curr_xor ^= x\r\n        number_of_triplets += query(root, curr_xor, i)\r\n    return number_of_triplets", "17": "def xor_triplet(arr, n):\r\n    ans = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            for k in range(j, n):\r\n                xor1 = 0\r\n                xor2 = 0\r\n                for x in range(i, j):\r\n                    xor1 ^= arr[x]\r\n                for x in range(j, k+1):\r\n                    xor2 ^= arr[x]\r\n                if xor1 == xor2:\r\n                    ans += 1\r\n    return ans", "18": "def cntElements(arr, n):\r\n    cnt = 0\r\n    for i in range(n-2):\r\n        if arr[i] == (arr[i+1] ^ arr[i+2]):\r\n            cnt += 1\r\n    return cnt", "19": "def extraElement(A,B,n):\r\n    ans = 0\r\n    for i in range(n):\r\n        ans ^= A[i]\r\n    for i in range(n+1):\r\n        ans ^= B[i]\r\n    return ans", "20": "def RecursiveFunction(ref, bit):\r\n        if len(ref) == 0 or bit < 0:\r\n                return 0\r\n        curr_on = []\r\n        curr_off = []\r\n        for i in range(len(ref)):\r\n                if ((ref[i] >> bit) & 1) == 0:\r\n                        curr_off.append(ref[i])\r\n                else:\r\n                        curr_on.append(ref[i])\r\n        if len(curr_off) == 0:\r\n                return RecursiveFunction(curr_on, bit - 1)\r\n        if len(curr_on) == 0:\r\n                return RecursiveFunction(curr_off, bit - 1)\r\n        return min(RecursiveFunction(curr_off, bit - 1),\r\n                                        RecursiveFunction(curr_on, bit - 1)) + (1 << bit)\r\n\r\ndef PrintMinimum(a, n):\r\n        v = []\r\n        for i in range(n):\r\n                v.append(a[i])\r\n        print(RecursiveFunction(v, 30))", "21": "def constructArray(A, N, K):\n    B = [0] * N\n    totalXOR = A[0] ^ K\n    for i in range(N):\n        B[i] = totalXOR ^ A[i]\n    for i in range(N):\n        print(B[i], end = \" \")", "22": "def reversDigits(num):\r\n        if num > 0:\r\n                reversDigits(num / 10)\r\n                rev_num += (num % 10) * base_pos\r\n                base_pos *= 10\r\n        return rev_num", "23": "def printSquares(n):\r\n    square = 0\r\n    odd = 1\r\n    for x in range(0,n):\r\n        print(square)\r\n        square = square + odd\r\n        odd = odd + 2", "24": "def isLucky(n):\r\n    arr = [False] * 10\r\n    while n > 0:\r\n        digit = n % 10\r\n        if arr[digit]:\r\n            return False\r\n        arr[digit] = True\r\n        n = n / 10\r\n    return True", "25": "def eval(a, op, b):\r\n    if op == '+':\r\n        return a + b\r\n    if op == '-':\r\n        return a - b\r\n    if op == '*':\r\n        return a * b\r\n    return float('inf')\r\ndef evaluateAll(expr, low, high):\r\n    res = []\r\n    if low == high:\r\n        res.append(expr[low])\r\n        return res\r\n    if low == (high - 2):\r\n        num = eval(expr[low], expr[low + 1], expr[low + 2])\r\n        res.append(num)\r\n        return res\r\n    for i in range(low + 1, high + 1, 2):\r\n        l = evaluateAll(expr, low, i - 1)\r\n        r = evaluateAll(expr, i + 1, high)\r\n        for s1 in l:\r\n            for s2 in r:\r\n                val = eval(s1, expr[i], s2)\r\n                res.append(val)\r\n    return res", "26": "def isInside(circle_x, circle_y, rad, x, y):\r\n    if ((x - circle_x) * (x - circle_x) +\r\n            (y - circle_y) * (y - circle_y) <= rad * rad):\r\n        return True\r\n    else:\r\n        return False", "27": "def power(x, y, p):\r\n    res = 1\r\n    x = x % p\r\n    while y > 0:\r\n        if (y & 1) == 1:\r\n            res = (res * x) % p\r\n        y = y >> 1\r\n        x = (x * x) % p\r\n    return res\r\ndef miillerTest(d, n):\r\n    a = 2 + random.randint(1, n - 4)\r\n    x = power(a, d, n)\r\n    if x == 1 or x == n - 1:\r\n        return True\r\n    while d != n - 1:\r\n        x = (x * x) % n\r\n        d *= 2\r\n        if x == 1:\r\n            return False\r\n        if x == n - 1:\r\n            return True\r\n    return False\r\ndef isPrime(n, k):\r\n    if n <= 1 or n == 4:\r\n        return False\r\n    if n <= 3:\r\n        return True\r\n    d = n - 1\r\n    while d % 2 == 0:\r\n        d //= 2\r\n    for i in range(k):\r\n        if not miillerTest(d, n):\r\n            return False\r\n    return True", "28": "def power(x, y, p):\r\n    res = 1\r\n    x = x % p\r\n    while y > 0:\r\n        if y % 2 == 1:\r\n            res = (res * x) % p\r\n        y = y // 2\r\n        x = (x * x) % p\r\n    return res\r\ndef squareRoot(n, p):\r\n    if p % 4 != 3:\r\n        print(\"Invalid Input\")\r\n        return\r\n    n = n % p\r\n    x = power(n, (p + 1) // 4, p)\r\n    if (x * x) % p == n:\r\n        print(\"Square root is \" + str(x))\r\n        return\r\n    x = p - x\r\n    if (x * x) % p == n:\r\n        print(\"Square root is \" + str(x))\r\n        return\r\n    print(\"Square root doesn't exist \")", "29": "def sieve_of_sundaram(n):\n    nNew = (n-1)//2\n    marked = [False]*(nNew+1)\n    for i in range(1,nNew+1):\n        for j in range(i,nNew+1):\n            if (i+j+2*i*j) <= nNew:\n                marked[i+j+2*i*j] = True\n    if n > 2:\n        print(2,end=\" \")\n    for i in range(1,nNew+1):\n        if marked[i] == False:\n            print(2*i+1,end=\" \")\n    return -1", "30": "def SieveOfAtkin(limit):\n    if limit > 2:\n        print(2)\n    if limit > 3:\n        print(3)\n    sieve = [False] * limit\n    for x in range(1, int(math.sqrt(limit)) + 1):\n        for y in range(1, int(math.sqrt(limit)) + 1):\n            n = 4 * x * x + y * y\n            if n <= limit and (n % 12 == 1 or n % 12 == 5):\n                sieve[n] = not sieve[n]\n            n = 3 * x * x + y * y\n            if n <= limit and n % 12 == 7:\n                sieve[n] = not sieve[n]\n            n = 3 * x * x - y * y\n            if x > y and n <= limit and n % 12 == 11:\n                sieve[n] = not sieve[n]\n    for index in range(5, int(math.sqrt(limit))):\n        if sieve[index]:\n            for jndex in range(index * index, limit, index * index):\n                sieve[jndex] = False\n    for index in range(5, limit):\n        if sieve[index]:\n            print(index)", "31": "def interpolate(f, xi, n):\r\n    result = 0\r\n    for i in range(n):\r\n        term = f[i].y\r\n        for j in range(n):\r\n            if j != i:\r\n                term = term*(xi - f[j].x) / (f[i].x - f[j].x)\r\n        result += term\r\n    return result", "32": "def printDivisors(n):\r\n    for i in range(1,int(n**0.5)+1):\r\n        if n%i==0:\r\n            if n/i == i:\r\n                print(i)\r\n            else:\r\n                print(i,n/i)", "33": "def printDivisors(n):\r\n    for i in range(1,n+1):\r\n        if n%i==0:\r\n            print(i)", "34": "def printDivisors(n):\n    i = 1\n    while i * i < n:\n        if n % i == 0:\n            print(i)\n            print(n // i)\n        i += 1\n    if i * i == n:\n        print(i)", "35": "def printDivisors(n):\r\n    v = []\r\n    for i in range(1, int(n**0.5)+1):\r\n        if n % i == 0:\r\n            if n / i == i:\r\n                print(i)\r\n            else:\r\n                print(i)\r\n                v.append(n / i)\r\n    for i in range(len(v)-1, -1, -1):\r\n        print(v[i])", "36": "def gcd(a,b):\r\n    while b != 0:\r\n        t = b\r\n        b = a % b\r\n        a = t\r\n    return a\r\n\r\ndef findMinDiff(a,b,x,y):\r\n    g = gcd(a,b)\r\n    diff = abs(x-y) % g\r\n    return min(diff,g-diff)", "37": "def findPairs(n):\n    cubeRoot = int(n**(1/3))\n    s = {}\n    for x in range(1, cubeRoot):\n        for y in range(x+1, cubeRoot+1):\n            sum = x**3 + y**3\n            if sum != n:\n                continue\n            if sum in s:\n                print(\"({}, {}) and ({}, {})\".format(s[sum][0], s[sum][1], x, y))\n            else:\n                s[sum] = (x, y)", "38": "def findPairs(n):\r\n    cubeRoot = int(n ** (1.0 / 3.0))\r\n    cube = [i ** 3 for i in range(1, cubeRoot + 1)]\r\n    l = 0\r\n    r = cubeRoot\r\n    while l < r:\r\n        if cube[l] + cube[r] < n:\r\n            l += 1\r\n        elif cube[l] + cube[r] > n:\r\n            r -= 1\r\n        else:\r\n            print(\"({}, {})\".format(l, r))\r\n            l += 1\r\n            r -= 1", "39": "def divSum(num):\r\n    result = 0\r\n    for i in range(2, int(math.sqrt(num)) + 1):\r\n        if num % i == 0:\r\n            if i == num / i:\r\n                result += i\r\n            else:\r\n                result += i + num / i\r\n    return result + 1", "40": "def aModM(s, mod):\r\n    number = 0\r\n    for i in range(len(s)):\r\n        number = (number * 10 )\r\n        x = int(s[i])\r\n        number = number + x\r\n        number = number % mod\r\n    return number\r\ndef ApowBmodM(a, b, m):\r\n    ans = aModM(a, m)\r\n    mul = ans\r\n    for i in range(1, b):\r\n        ans = (ans * mul) % m\r\n    return ans", "41": "def highestPowerof2(x):\r\n    x |= x >> 1\r\n    x |= x >> 2\r\n    x |= x >> 4\r\n    x |= x >> 8\r\n    x |= x >> 16\r\n    return x ^ (x >> 1)", "42": "def highestPowerof2(n):\r\n    p = math.log(n) / math.log(2)\r\n    return int(math.pow(2, p))", "43": "def highestPowerof2(n):\r\n    res = 0\r\n    for i in range(n, 0, -1):\r\n        if (i & (i-1)) == 0:\r\n            res = i\r\n            break\r\n    return res", "44": "def SubArraySum(arr, n):\n    result = 0\n    for i in range(n):\n        result += (arr[i] * (i+1) * (n-i))\n    return result", "45": "def SubArraySum(arr, n):\n    result = 0\n    temp = 0\n    for i in range(n):\n        temp = 0\n        for j in range(i, n):\n            temp += arr[j]\n            result += temp\n    return result", "46": "def maxPrimefactorNum(N):\r\n    arr = [False] * (N + 5)\r\n    for i in range(3, N + 1, 2):\r\n        if not arr[i]:\r\n            for j in range(i * i, N + 1, i):\r\n                arr[j] = True\r\n    prime = [2]\r\n    for i in range(3, N + 1, 2):\r\n        if not arr[i]:\r\n            prime.append(i)\r\n    i = 0\r\n    ans = 1\r\n    while ans * prime[i] <= N and i < len(prime):\r\n        ans *= prime[i]\r\n        i += 1\r\n    return ans", "47": "def maxPrimefactorNum(N):\r\n    arr = [0] * (N + 5)\r\n    for i in range(2, N + 1):\r\n        if arr[i] == 0:\r\n            for j in range(2 * i, N + 1, i):\r\n                arr[j] += 1\r\n        arr[i] = 1\r\n    maxval = 0\r\n    maxint = 1\r\n    for i in range(1, N + 1):\r\n        if arr[i] > maxval:\r\n            maxval = arr[i]\r\n            maxint = i\r\n    return maxint", "48": "def getDigitProduct(x):\n    if x < 10:\n        return x\n    if prodDig[x] != 0:\n        return prodDig[x]\n    prod = (x % 10) * getDigitProduct(x/10)\n    return (prodDig[x] = prod)\n\ndef findSeed(n):\n    res = []\n    for i in range(1, n/2+1):\n        if i*getDigitProduct(i) == n:\n            res.append(i)\n    if len(res) == 0:\n        print \"NO seed exists\"\n        return\n    for i in range(len(res)):\n        print res[i],", "49": "def convert(m, n):\n    if m == n:\n        return 0\n    if m > n:\n        return m - n\n    if m <= 0 and n > 0:\n        return -1\n    if n % 2 == 1:\n        return 1 + convert(m, n + 1)\n    else:\n        return 1 + convert(m, n / 2)", "50": "def checkPandigital(b, n):\n  if len(n) < b:\n  return False\n  hash = [False] * b\n  for i in range(len(n)):\n  if n[i] >= '0' and n[i] <= '9':\n  hash[n[i] - '0'] = True\n  elif n[i] >= 'A' and n[i] <= 'Z':\n  hash[n[i] - 'A' + 10] = True\n  for i in range(b):\n  if hash[i] == False:\n  return False\n  return True", "51": "def isAutomorphic(N):\n sq = N * N\n while N > 0:\n if N % 10 != sq % 10:\n return False\n N /= 10\n sq /= 10\n return True", "52": "def sieve(n):\n  prime = [True for i in range(n+1)]\n  p = 2\n  while (p * p <= n):\n  if (prime[p] == True):\n  for i in range(p * 2, n+1, p):\n  prime[i] = False\n  p += 1\n  for p in range(2, n):\n  if prime[p]:\n  allPrimes.append(p)\n \n def factorialDivisors(n):\n  result = 1\n  for i in range(len(allPrimes)):\n  p = allPrimes[i]\n  exp = 0\n  while (p <= n):\n  exp = exp + (n/p)\n  p = p * allPrimes[i]\n  result = result * ((pow(allPrimes[i], exp+1) - 1) / (allPrimes[i] - 1))\n  return result", "53": "def fact(n):\n if n == 0:\n return 1\n return n*fact(n-1)\n def div(x):\n ans = 0\n for i in range(1,x+1):\n if x%i == 0:\n ans += i\n return ans\n def sumFactDiv(n):\n return div(fact(n))", "54": "def sieveOfEratostheneses():\n isPrime[1] = True\n for i in range(2,MAX):\n if not isPrime[i]:\n for j in range(2*i,MAX,i):\n isPrime[j] = True\n \n def findPrime(n):\n num = n + 1\n while num > 0:\n if not isPrime[num]:\n return num\n num = num + 1\n return 0\n \n def minNumber(arr,n):\n sieveOfEratostheneses()\n sum = 0\n for i in range(n):\n sum += arr[i]\n if not isPrime[sum]:\n return 0\n num = findPrime(sum)\n return num - sum", "55": "def isPrime(n):\n if n <= 1:\n return False\n for i in range(2, n):\n if n % i == 0:\n return False\n return True\n def findPrime(n):\n num = n + 1\n while num > 0:\n if isPrime(num):\n return num\n num = num + 1\n return 0\n def minNumber(arr, n):\n sum = 0\n for i in range(0, n):\n sum += arr[i]\n if isPrime(sum):\n return 0\n num = findPrime(sum)\n return num - sum", "56": "def countConsecutive(N):\n  count = 0\n  for L in range(1, int(N**0.5)):\n  a = (N - (L * (L + 1)) / 2) / (L + 1)\n  if a - int(a) == 0.0:\n  count += 1\n  return count", "57": "def area_fun(side):\n  area = side * side\n  return area", "58": "def isComposite(n):\n if n <= 1:\n print(\"False\")\n if n <= 3:\n print(\"False\")\n if n % 2 == 0 and n % 3 == 0:\n print(\"True\")\n for i in range(5, n, 6):\n if n % i == 0 or n % (i + 2) == 0:\n print(\"True\")\n print(\"False\")", "59": "def printTaxicab2(N):\n i = 1\n count = 0\n while count < N:\n int_count = 0\n for j in range(1, int(i**(1/3))+1):\n for k in range(j+1, int(i**(1/3))+1):\n if j**3 + k**3 == i:\n int_count += 1\n if int_count == 2:\n count += 1\n print(count, i)\n i += 1", "60": "def SieveOfEratosthenes(n, prime):\n  isPrime = [True for i in range(n + 1)]\n  p = 2\n  while p * p <= n:\n  if isPrime[p]:\n  for i in range(p * 2, n + 1, p):\n  isPrime[i] = False\n  p += 1\n  for p in range(2, n):\n  if isPrime[p]:\n  prime.append(p)\n def countDivisorsMult(arr, n):\n  largest = 0\n  for a in arr:\n  largest = max(largest, a)\n  prime = []\n  SieveOfEratosthenes(largest, prime)\n  mp = {}\n  for i in range(n):\n  for j in range(len(prime)):\n  while arr[i] > 1 and arr[i] % prime[j] == 0:\n  arr[i] /= prime[j]\n  if mp.has_key(prime[j]):\n  mp[prime[j]] += 1\n  else:\n  mp[prime[j]] = 1\n  for i in range(n):\n  if arr[i] != 1:\n  if mp.has_key(arr[i]):\n  mp[arr[i]] += 1\n  else:\n  mp[arr[i]] = 1\n  res = 1\n  for it in mp.keys():\n  res *= (mp[it] + 1)\n  return res", "61": "def countDivisors(X):\n count = 0\n for i in range(1, X+1):\n if X % i == 0:\n count += 1\n return count\n \n def countDivisorsMult(arr, n):\n mul = 1\n for i in range(n):\n mul *= arr[i]\n return countDivisors(mul)", "62": "def ispowerof2(num):\n  if num & (num - 1) == 0:\n  return 1\n  return 0", "63": "def isPowerOf2(s):\n str = list(s)\n len_str = len(str)\n num = 0\n if len_str == 1 and str[len_str - 1] == '1':\n return 0\n while len_str != 1 and str[len_str - 1] != '1':\n if (int(str[len_str - 1]) % 2 == 1):\n return 0\n j = 0\n for i in range(0, len_str):\n num = num * 10 + int(str[i])\n if num < 2:\n if i != 0:\n str[j] = '0'\n continue\n str[j] = str(num / 2)\n num = num - (num / 2) * 2\n str[j] = '\\0'\n len_str = j\n return 1", "64": "def horner(poly, n, x):\n result = poly[0]\n for i in range(1, n):\n result = result * x + poly[i]\n return result\n def findSign(poly, n, x):\n result = horner(poly, n, x)\n if result > 0:\n return 1\n elif result < 0:\n return -1\n return 0", "65": "def calculate_sum(a, N):\n m = N / a\n sum = m * (m + 1) / 2\n ans = a * sum\n return ans", "66": "def prevNum(str):\n len = len(str)\n index = -1\n for i in range(len-2, -1, -1):\n if str[i] > str[i+1]:\n index = i\n break\n smallGreatDgt = -1\n for i in range(len-1, index, -1):\n if str[i] < str[index]:\n if smallGreatDgt == -1:\n smallGreatDgt = i\n elif str[i] >= str[smallGreatDgt]:\n smallGreatDgt = i\n if index == -1:\n return \"-1\"\n if smallGreatDgt != -1:\n str = swap(str, index, smallGreatDgt)\n return str\n return \"-1\"\n def swap(str, i, j):\n ch = list(str)\n temp = ch[i]\n ch[i] = ch[j]\n ch[j] = temp\n return ''.join(ch)", "67": "def max_area(n, m, k):\n  if k > (n + m - 2):\n  print(\"Not possible\")\n  else:\n  if k < max(m, n) - 1:\n  result = max(m * (n / (k + 1)), n * (m / (k + 1)))\n  else:\n  result = max(m / (k - n + 2), n / (k - m + 2))\n  print(result)", "68": "def sum(L, R):\n  p = R // 6\n  q = (L - 1) // 6\n  sumR = 3 * (p * (p + 1))\n  sumL = (q * (q + 1)) * 3\n  return sumR - sumL", "69": "def avgOfFirstN(n):\n return (1 + n) / 2", "70": "def sn(n, an):\n return (n * (1 + an)) / 2\n def trace(n, m):\n an = 1 + (n - 1) * (m + 1)\n rowmajorSum = sn(n, an)\n an = 1 + (n - 1) * (n + 1)\n colmajorSum = sn(n, an)\n return rowmajorSum + colmajorSum", "71": "def Convert(radian):\n pi = 3.14159\n return(radian * (180/pi))", "72": "def countLastDigitK(low, high, k):\n mlow = 10 * (int)(math.ceil(low/10.0))\n mhigh = 10 * (int)(math.floor(high/10.0))\n count = (mhigh - mlow)/10\n if high % 10 >= k:\n count += 1\n if low % 10 <= k and (low%10) > 0:\n count += 1\n return count", "73": "def countLastDigitK(low, high, k):\n count = 0\n for i in range(low, high+1):\n if i % 10 == k:\n count += 1\n return count", "74": "def gcd(a, b):\n if a == 0 and b == 0:\n return 0\n if a == b:\n return a\n if a > b:\n return gcd(a - b, b)\n return gcd(a, b - a)\n def cpFact(x, y):\n while gcd(x, y) != 1:\n x = x / gcd(x, y)\n return x", "75": "def sumOfLargePrimeFactor(n):\n prime = [0] * (n + 1)\n sum = 0\n max = n / 2\n for p in range(2, max + 1):\n if prime[p] == 0:\n for i in range(p * 2, n + 1, p):\n prime[i] = p\n for p in range(2, n + 1):\n if prime[p] != 0:\n sum += prime[p]\n else:\n sum += p\n return sum", "76": "def isPrime(n):\n if n <= 1:\n return False\n for i in range(2, n):\n if n % i == 0:\n return False\n return True\n def isEmirp(n):\n if isPrime(n) == False:\n return False\n rev = 0\n while n != 0:\n d = n % 10\n rev = rev * 10 + d\n n /= 10\n return isPrime(rev)", "77": "def series(n):\n i = 1\n sums = 0\n while i <= n:\n sums += (i * i)\n i += 1\n return sums", "78": "def TrinomialValue(dp, n, k):\n if k < 0:\n k = -k\n if dp[n][k] != 0:\n return dp[n][k]\n if n == 0 and k == 0:\n return 1\n if k < -n or k > n:\n return 0\n return (dp[n][k] = TrinomialValue(dp, n - 1, k - 1)\n + TrinomialValue(dp, n - 1, k)\n + TrinomialValue(dp, n - 1, k + 1))\n \n def printTrinomial(n):\n dp = [[0 for i in range(MAX)] for j in range(MAX)]\n for i in range(n):\n for j in range(-i, 0):\n print(TrinomialValue(dp, i, j), end = ' ')\n for j in range(1, i + 1):\n print(TrinomialValue(dp, i, j), end = ' ')\n print()", "79": "def TrinomialValue(n, k):\n if n == 0 and k == 0:\n return 1\n if k < -n or k > n:\n return 0\n return TrinomialValue(n - 1, k - 1) + TrinomialValue(n - 1, k) + TrinomialValue(n - 1, k + 1)\n \n def printTrinomial(n):\n for i in range(n):\n for j in range(-i, 0):\n print(TrinomialValue(i, j), end = \" \")\n for j in range(1, i + 1):\n print(TrinomialValue(i, j), end = \" \")\n print()", "80": "def lcm(a, b):\n return (a * b) / (__gcd(a, b));\n def maxRational(first, sec):\n k = lcm(first.deno, sec.deno);\n nume1 = first.nume;\n nume2 = sec.nume;\n nume1 *= k / (first.deno);\n nume2 *= k / (sec.deno);\n return (nume2 < nume1)? first : sec;\n def __gcd(a, b):\n return b == 0 ? a:__gcd(b, a % b);", "81": "def averageOdd(n):\n  if n % 2 == 0:\n  print(\"Invalid Input\")\n  return -1\n  return (n + 1) / 2", "82": "def averageOdd(n):\n if n % 2 == 0:\n print(\"Invalid Input\")\n return -1\n sum = 0\n count = 0\n while n >= 1:\n count += 1\n sum += n\n n = n - 2\n return sum / count", "83": "def averageEven(n):\n  if n % 2 != 0:\n  print(\"Invalid Input\")\n  return -1\n  return (n + 2) / 2", "84": "def averageEven(n):\n  if n % 2 != 0:\n  print(\"Invalid Input\")\n  return -1\n  sum = 0\n  count = 0\n  while n >= 2:\n  count += 1\n  sum += n\n  n = n - 2\n  return sum / count", "85": "def fib(f, N):\n f[1] = 1\n f[2] = 1\n for i in range(3, N + 1):\n f[i] = f[i - 1] + f[i - 2]\n \n def fiboTriangle(n):\n N = n * (n + 1) / 2\n f = [0] * (N + 1)\n fib(f, N)\n fiboNum = 1\n for i in range(1, n + 1):\n for j in range(1, i + 1):\n print f[fiboNum],\n fiboNum += 1\n print", "86": "def avg_of_odd_num(n):\n return n", "87": "def avg_of_odd_num(n):\n sum = 0\n for i in range(n):\n sum += (2 * i + 1)\n return sum / n", "88": "def Div_by_8(n):\n return (((n >> 3) << 3) == n)", "89": "def digitNumber(n):\n if n == 0:\n return 1\n if n == 1:\n return 9\n if n % 2 != 0:\n temp = digitNumber((n - 1) / 2) % mod\n return (9 * (temp * temp) % mod) % mod\n else:\n temp = digitNumber(n / 2) % mod\n return (temp * temp) % mod\n def countExcluding(n, d):\n if d == 0:\n return (9 * digitNumber(n - 1)) % mod\n else:\n return (8 * digitNumber(n - 1)) % mod", "90": "def power(n, r):\n  count = 0\n  for i in range(r, n+1, r):\n  count += n / i\n  return count", "91": "def checkdigit(n, k):\n while n != 0:\n rem = n % 10\n if rem == k:\n return True\n n = n / 10\n return False\n \n def findNthNumber(n, k):\n for i in range(k+1, n+k+1):\n if checkdigit(i, k) or (i % k == 0):\n n -= 1\n if n == 0:\n return i\n return -1", "92": "def seriesSum(n, a):\n  return n * (a[0] * a[0] - a[2 * n - 1] * a[2 * n - 1]) / (2 * n - 1)", "93": "def seriesSum(n, a):\n res = 0\n i = 0\n while i < 2 * n:\n if i % 2 == 0:\n res += a[i] * a[i]\n else:\n res -= a[i] * a[i]\n i += 1\n return res", "94": "def series(A, X, n):\n term = pow(A, n)\n print(term, end=\" \")\n for i in range(1, n+1):\n term = term * X * (n - i + 1) / (i * A)\n print(term, end=\" \")", "95": "def factorial(n):\n f = 1\n for i in range(2, n+1):\n f *= i\n return f\n def series(A, X, n):\n nFact = factorial(n)\n for i in range(0, n+1):\n niFact = factorial(n - i)\n iFact = factorial(i)\n aPow = pow(A, n - i)\n xPow = pow(X, i)\n print((nFact * aPow * xPow) / (niFact * iFact), end=\" \")", "96": "def pythagoreanTriplet(n):\n for i in range(1, n/3):\n for j in range(i+1, n/2):\n k = n - i - j\n if i*i + j*j == k*k:\n print i, j, k\n return\n print \"No Triplet\"", "97": "def isUndulating(n):\n if len(n) <= 2:\n return False\n for i in range(2, len(n)):\n if n[i-2] != n[i]:\n return False\n return True", "98": "def possibleToReach(a, b):\n c = int(math.cbrt(a * b))\n re1 = a / c\n re2 = b / c\n if (re1 * re1 * re2 == a) and (re2 * re2 * re1 == b):\n return True\n else:\n return False", "99": "def possibleTripletInRange(L, R):\n flag = False\n possibleA = 0\n possibleB = 0\n possibleC = 0\n numbersInRange = (R - L + 1)\n if numbersInRange < 3:\n flag = False\n elif numbersInRange > 3:\n flag = True\n if L % 2 > 0:\n L += 1\n possibleA = L\n possibleB = L + 1\n possibleC = L + 2\n else:\n if not L % 2 > 0:\n flag = True\n possibleA = L\n possibleB = L + 1\n possibleC = L + 2\n else:\n flag = False\n if flag == True:\n print(\"(\" + str(possibleA) + \", \" + str(possibleB) + \", \" + str(possibleC) + \")\" + \" is one such possible\" + \" triplet between \" + str(L) + \" and \" + str(R))\n else:\n print(\"No Such Triplet\" + \" exists between \" + str(L) + \" and \" + str(R))", "100": "def gcd(a, b):\n if a == 0:\n return b\n return gcd(b % a, a)\n def coprime(a, b):\n return (gcd(a, b) == 1)\n def possibleTripletInRange(L, R):\n flag = False\n possibleA = 0\n possibleB = 0\n possibleC = 0\n for a in range(L, R+1):\n for b in range(a+1, R+1):\n for c in range(b+1, R+1):\n if coprime(a, b) and coprime(b, c) and not coprime(a, c):\n flag = True\n possibleA = a\n possibleB = b\n possibleC = c\n break\n if flag == True:\n print(\"(\" + str(possibleA) + \", \" + str(possibleB) + \", \" + str(possibleC) + \")\" + \" is one such possible triplet \" + \"between \" + str(L) + \" and \" + str(R))\n else:\n print(\"No Such Triplet exists\" + \"between \" + str(L) + \" and \" + str(R))", "101": "def fact(n):\n if n == 0 or n == 1:\n return 1\n ans = 1\n for i in range(1, n+1):\n ans = ans * i\n return ans\n def nCr(n, r):\n Nr = n\n Dr = 1\n ans = 1\n for i in range(1, r+1):\n ans = (ans * Nr) / (Dr)\n Nr -= 1\n Dr += 1\n return ans\n def solve(n):\n N = 2 * n - 2\n R = n - 1\n return nCr(N, R) * fact(n - 1)", "102": "def findpos(n):\n  pos = 0\n  for i in range(len(n)):\n  if n[i] == '2':\n  pos = pos * 4 + 1\n  elif n[i] == '3':\n  pos = pos * 4 + 2\n  elif n[i] == '5':\n  pos = pos * 4 + 3\n  elif n[i] == '7':\n  pos = pos * 4 + 4\n  return pos", "103": NaN, "104": "def find_square_369(num):\n if num[0] == '3':\n a = '1'\n b = '0'\n c = '8'\n d = '9'\n elif num[0] == '6':\n a = '4'\n b = '3'\n c = '5'\n d = '6'\n else:\n a = '9'\n b = '8'\n c = '0'\n d = '1'\n result = \"\"\n size = len(num)\n for i in range(1, size):\n result += a\n result += b\n for i in range(1, size):\n result += c\n result += d\n return result", "105": "def power(x, y, p):\n  res = 1\n  x = x % p\n  while y > 0:\n  if y & 1:\n  res = (res * x) % p\n  y = y >> 1\n  x = (x * x) % p\n  return res", "106": "def findNthNonSquare(n):\n  x = n\n  ans = x + math.floor(0.5 + math.sqrt(x))\n  return ans", "107": "def isPrime(n):\n  if n <= 1:\n  return False\n  if n <= 3:\n  return True\n  if n % 2 == 0 or n % 3 == 0:\n  return False\n  for i in range(5, int(n**0.5) + 1, 6):\n  if n % i == 0 or n % (i + 2) == 0:\n  return False\n  return True\n \n def SumOfPrimeDivisors(n):\n  sum = 0\n  root_n = int(n**0.5)\n  for i in range(1, root_n + 1):\n  if n % i == 0:\n  if i == n / i and isPrime(i):\n  sum += i\n  else:\n  if isPrime(i):\n  sum += i\n  if isPrime(n / i):\n  sum += (n / i)\n  return sum", "108": "def Sum(N):\n  SumOfPrimeDivisors = [0] * (N + 1)\n  for i in range(2, N + 1):\n  if SumOfPrimeDivisors[i] == 0:\n  for j in range(i, N + 1, i):\n  SumOfPrimeDivisors[j] += i\n  return SumOfPrimeDivisors[N]", "109": "def isPrime(n):\n  if n <= 1:\n  return False\n  if n <= 3:\n  return True\n  if n % 2 == 0 or n % 3 == 0:\n  return False\n  i = 5\n  while i * i <= n:\n  if n % i == 0 or n % (i + 2) == 0:\n  return False\n  i += 6\n  return True\n \n def SumOfPrimeDivisors(n):\n  sum = 0\n  for i in range(1, n + 1):\n  if n % i == 0:\n  if isPrime(i):\n  sum += i\n  return sum", "110": "def check(n):\n  sum = 0\n  while n != 0:\n  sum += n % 10\n  n = n / 10\n  if sum % 7 == 0:\n  return 1\n  else:\n  return 0", "111": "def isPrime(n):\n  i, c = 1, 0\n  while i < n/2:\n  if n % i == 0:\n  c += 1\n  i += 1\n  if c == 1:\n  return True\n  else:\n  return False\n \n def findMinNum(arr, n):\n  first, last, num, rev, i = 0, 0, 0, 0, 0\n  hash = [0] * 10\n  for i in range(n):\n  hash[arr[i]] += 1\n  print(\"Minimum number: \", end=\"\")\n  for i in range(10):\n  for j in range(hash[i]):\n  print(i, end=\"\")\n  print()\n  print()\n  for i in range(10):\n  if hash[i] != 0:\n  first = i\n  break\n  for i in range(9, -1, -1):\n  if hash[i] != 0:\n  last = i\n  break\n  num = first * 10 + last\n  rev = last * 10 + first\n  print(\"Prime combinations: \", end=\"\")\n  if isPrime(num) and isPrime(rev):\n  print(num, rev)\n  elif isPrime(num):\n  print(num)\n  elif isPrime(rev):\n  print(rev)\n  else:\n  print(\"No combinations exist\")", "112": "def Time(arr, n, Emptypipe):\n  fill = 0\n  for i in range(n):\n  fill += 1 / arr[i]\n  fill = fill - (1 / Emptypipe)\n  return 1 / fill", "113": "def calculateSum(n):\n  return ((2**(n+1)) + n - 2)", "114": "def Race(B, C):\n  result = 0\n  result = ((C * 100) / B)\n  return 100 - result", "115": "def nthTerm(N):\n return (N * ((N / 2) + ((N % 2) * 2) + N))", "116": "def nextPerfectCube(N):\n  nextN = int(N**(1/3)) + 1\n  return nextN * nextN * nextN", "117": "def arePermutations(a, b, n, m):\n  sum1 = 0\n  sum2 = 0\n  mul1 = 1\n  mul2 = 1\n  for i in range(0, n):\n  sum1 += a[i]\n  mul1 *= a[i]\n  for i in range(0, m):\n  sum2 += b[i]\n  mul2 *= b[i]\n  return ((sum1 == sum2) and (mul1 == mul2))", "118": "def printNthElement(n):\n arr = [0] * (n + 1)\n arr[1] = 3\n arr[2] = 5\n for i in range(3, n + 1):\n if i % 2 != 0:\n arr[i] = arr[i / 2] * 10 + 3\n else:\n arr[i] = arr[(i / 2) - 1] * 10 + 5\n return arr[n]", "119": "def findNthNo(n):\n res = \"\"\n while n >= 1:\n if (n & 1) == 1:\n res = res + \"3\"\n n = (n - 1) / 2\n else:\n res = res + \"5\"\n n = (n - 2) / 2\n sb = StringBuilder(res)\n sb.reverse()\n return sb.toString()", "120": "def calculateSum(n):\n return n * (n + 1) / 2 \n + (int)(math.pow((n * (n + 1) / 2), 2))", "121": "def nthTerm(n):\n return 3 * (n ** 2) - 4 * n + 2", "122": "def area(a):\n  if a < 0:\n  return -1\n  area = (a * math.sqrt(3)) / (math.sqrt(2))\n  return area", "123": "def isPrime(n):\n if n <= 1:\n return False\n if n <= 3:\n return True\n if n % 2 == 0 or n % 3 == 0:\n return False\n i = 5\n while i * i <= n:\n if n % i == 0 or n % (i + 2) == 0:\n return False\n i = i + 6\n return True\n def isPowerOfTwo(n):\n return n != 0 and ((n & (n - 1)) == 0)", "124": "def SieveOfEratosthenes():\n  prime = [True for i in range(MAX)]\n  p = 2\n  while (p * p < MAX):\n  if (prime[p] == True):\n  for i in range(p * 2, MAX, p):\n  prime[i] = False\n  p += 1\n  prime[0] = False\n  prime[1] = False\n  for p in range(MAX):\n  if prime[p]:\n  s.add(p + 1)\n \n def isEuclid(n):\n  if n in s:\n  return True\n  else:\n  return False", "125": "def SieveOfEratosthenes():\n prime = [True for i in range(MAX)]\n p = 2\n while (p * p < MAX):\n if (prime[p] == True):\n for i in range(p * 2, MAX, p):\n prime[i] = False\n p += 1\n for p in range(2, MAX):\n if prime[p]:\n arr.append(p)\n \n def isEuclid(n):\n product = 1\n i = 0\n while (product < n):\n product = product * arr[i]\n if (product + 1 == n):\n return True\n i += 1\n return False", "126": "def printLines(n, k):\n  for i in range(n):\n  print(k * (6 * i + 1), k * (6 * i + 2), k * (6 * i + 3), k * (6 * i + 5))", "127": NaN, "128": "def generateDivisors(n):\n for i in range(1, int(n**0.5)+1):\n if n % i == 0:\n if n / i == i:\n arr.append(i)\n else:\n arr.append(i)\n arr.append(n / i)\n \n def harmonicMean(n):\n generateDivisors(n)\n sum = 0.0\n len = len(arr)\n for i in range(0, len):\n sum = sum + n / arr[i]\n sum = sum / n\n return len / sum\n \n def isOreNumber(n):\n mean = harmonicMean(n)\n if mean - int(mean) == 0:\n return True\n else:\n return False", "129": "def isHalfReducible(arr, n, m):\n  frequencyHash = [0] * (m + 1)\n  for i in range(n):\n  frequencyHash[arr[i] % (m + 1)] += 1\n  for i in range(m + 1):\n  if frequencyHash[i] >= n / 2:\n  break\n  if i <= m:\n  print(\"Yes\")\n  else:\n  print(\"No\")", "130": "def Nth_Term(n):\n return (2 * n**3 - 3 * n**2 + n + 6) / 6", "131": "def largestPrimeFactor(n):\n max = -1\n while n % 2 == 0:\n max = 2\n n = n / 2\n for i in range(3, int(math.sqrt(n)) + 1, 2):\n while n % i == 0:\n max = i\n n = n / i\n if n > 2:\n max = n\n return max\n def checkUnusual(n):\n factor = largestPrimeFactor(n)\n if factor > math.sqrt(n):\n return True\n else:\n return False", "132": "def check(s):\n  freq = [0]*10\n  r,i = 0,0\n  while s != 0:\n  r = s % 10\n  s = s / 10\n  freq[r] += 1\n  xor__ = 0\n  for i in range(0,10):\n  xor__ = xor__ ^ freq[i]\n  if xor__ == 0:\n  return True\n  else:\n  return False\n  return True", "133": "def getSum(a, n):\n sum = 0\n for i in range(1, n+1):\n sum += (i / pow(a, i))\n return sum", "134": "def countDigitsToBeRemoved(N, K):\n  s = str(N)\n  res = 0\n  f_zero = 0\n  for i in range(len(s)-1, -1, -1):\n  if K == 0:\n  return res\n  if s[i] == '0':\n  f_zero = 1\n  K -= 1\n  else:\n  res += 1\n  if K == 0:\n  return res\n  elif f_zero == 1:\n  return len(s) - 1\n  return -1", "135": "def isPrime(n):\n if n <= 1:\n return False\n if n <= 3:\n return True\n if n % 2 == 0 or n % 3 == 0:\n return False\n i = 5\n while i * i <= n:\n if n % i == 0 or n % (i + 2) == 0:\n return False\n i = i + 6\n return True\n def isFactorialPrime(n):\n if not isPrime(n):\n return False\n fact = 1\n i = 1\n while fact <= n + 1:\n fact = fact * i\n if n + 1 == fact and n - 1 == fact:\n return True\n i = i + 1\n return False", "136": "def isPrime(n):\n if n <= 1:\n return False\n if n <= 3:\n return True\n if n % 2 == 0 or n % 3 == 0:\n return False\n i = 5\n while i * i <= n:\n if n % i == 0 or n % (i + 2) == 0:\n return False\n i = i + 6\n return True\n def isStrongPrime(n):\n if not isPrime(n) and n != 2:\n return False\n previous_prime = n - 1\n next_prime = n + 1\n while not isPrime(next_prime):\n next_prime += 1\n while not isPrime(previous_prime):\n previous_prime -= 1\n mean = (previous_prime + next_prime) / 2\n if n > mean:\n return True\n else:\n return False", "137": "def gcd(a, b):\n  if b == 0:\n  return a\n  else:\n  return gcd(b, a % b)\n def lcmOfArray(arr, n):\n  if n < 1:\n  return 0\n  lcm = arr[0]\n  for i in range(1, n):\n  lcm = (lcm * arr[i]) / gcd(lcm, arr[i])\n  return lcm\n def minPerfectCube(arr, n):\n  minPerfectCube = lcmOfArray(arr, n)\n  cnt = 0\n  while minPerfectCube > 1 and minPerfectCube % 2 == 0:\n  cnt += 1\n  minPerfectCube /= 2\n  if cnt % 3 == 2:\n  minPerfectCube *= 2\n  elif cnt % 3 == 1:\n  minPerfectCube *= 4\n  i = 3\n  while minPerfectCube > 1:\n  cnt = 0\n  while minPerfectCube % i == 0:\n  cnt += 1\n  minPerfectCube /= i\n  if cnt % 3 == 1:\n  minPerfectCube *= i * i\n  elif cnt % 3 == 2:\n  minPerfectCube *= i\n  i += 2\n  return minPerfectCube", "138": "def countOdd(arr, n):\n odd = 0\n for i in range(n):\n if arr[i] % 2 == 1:\n odd += 1\n return odd\n \n def countValidPairs(arr, n):\n odd = countOdd(arr, n)\n return (odd * (odd - 1)) // 2", "139": "def minAbsDiff(n):\n mod = n % 4\n if mod == 0 or mod == 3:\n return 0\n return 1", "140": "def digitWell(n, m, k):\n  cnt = 0\n  while n > 0:\n  if n % 10 == m:\n  cnt += 1\n  n /= 10\n  return cnt == k\n \n def findInt(n, m, k):\n  i = n + 1\n  while True:\n  if digitWell(i, m, k):\n  return i\n  i += 1", "141": "def minValue(n, x, y):\n  val = (y * n) / 100\n  if x >= val:\n  return 0\n  else:\n  return int(math.ceil(val)-x)", "142": "def initialize():\n l[0][0] = 1\n for i in range(1, 1001):\n l[i][0] = 1\n for j in range(1, i + 1):\n l[i][j] = (l[i - 1][j - 1] + l[i - 1][j])\n \n def nCr(n, r):\n return l[n][r]", "143": "def findAndSum(arr, n):\n  sum = 0\n  mul = 1\n  for i in range(30):\n  count_on = False\n  l = 0\n  for j in range(n):\n  if (arr[j] & (1 << i)):\n  if (count_on):\n  l += 1\n  else:\n  count_on = True\n  l += 1\n  else:\n  if (count_on):\n  sum += ((mul * l * (l + 1)) / 2)\n  count_on = False\n  l = 0\n  if (count_on):\n  sum += ((mul * l * (l + 1)) / 2)\n  count_on = False\n  l = 0\n  mul *= 2\n  return sum", "144": "def Cycles(N):\n fact = 1\n result = 0\n result = N - 1\n i = result\n while i > 0:\n fact = fact * i\n i = i - 1\n return fact / 2", "145": "def BalanceArray(A, Q):\n ANS = [0] * len(Q)\n sum = 0\n for i in range(len(A)):\n if A[i] % 2 == 0:\n sum = sum + A[i]\n for i in range(len(Q)):\n index = Q[i][0]\n value = Q[i][1]\n if A[index] % 2 == 0:\n sum = sum - A[index]\n A[index] = A[index] + value\n if A[index] % 2 == 0:\n sum = sum + A[index]\n ANS[i] = sum\n for i in range(len(ANS)):\n print(ANS[i], end = \" \")", "146": "def EvenSum(A, index, value):\n A[index] = A[index] + value\n sum = 0\n for i in range(len(A)):\n if A[i] % 2 == 0:\n sum = sum + A[i]\n return sum\n def BalanceArray(A, Q):\n ANS = [0] * len(Q)\n for i in range(len(Q)):\n index = Q[i][0]\n value = Q[i][1]\n ANS[i] = EvenSum(A, index, value)\n for i in range(len(ANS)):\n print(ANS[i], end = \" \")", "147": "def countWays(N):\n  E = (N * (N - 1)) / 2\n  if N == 1:\n  return 0\n  return int(math.pow(2, E - 1))", "148": "def countNumbers(L, R, K):\n  if K == 9:\n  K = 0\n  totalnumbers = R - L + 1\n  factor9 = totalnumbers // 9\n  rem = totalnumbers % 9\n  ans = factor9\n  for i in range(R, R - rem, -1):\n  rem1 = i % 9\n  if rem1 == K:\n  ans += 1\n  return ans", "149": "def countQuadruples(a, n):\n mp = {}\n for i in range(n):\n if a[i] in mp:\n mp[a[i]] += 1\n else:\n mp[a[i]] = 1\n count = 0\n for j in range(n):\n for k in range(n):\n if j == k:\n continue\n mp[a[j]] -= 1\n mp[a[k]] -= 1\n first = a[j] - (a[k] - a[j])\n fourth = (a[k] * a[k]) / a[j]\n if (a[k] * a[k]) % a[j] == 0:\n if a[j] != a[k]:\n if first in mp and fourth in mp:\n count += mp[first] * mp[fourth]\n else:\n if first in mp and fourth in mp:\n count += mp[first] * (mp[fourth] - 1)\n if a[j] in mp:\n mp[a[j]] += 1\n else:\n mp[a[j]] = 1\n if a[k] in mp:\n mp[a[k]] += 1\n else:\n mp[a[k]] = 1\n return count", "150": "def sieve():\n  spf[1] = 1\n  for i in range(2, MAXN):\n  spf[i] = i\n  for i in range(4, MAXN, 2):\n  spf[i] = 2\n  for i in range(3, int(math.sqrt(MAXN)) + 1):\n  if spf[i] == i:\n  for j in range(i * i, MAXN, i):\n  if spf[j] == j:\n  spf[j] = i\n \n def getFactorization(x):\n  temp = spf[x]\n  while x != 1:\n  if x % temp == 0:\n  hash1[temp] += 1\n  x = x / temp\n  while x % temp == 0:\n  x = x / temp\n \n def check(x):\n  temp = spf[x]\n  while x != 1:\n  if x % temp == 0 and hash1[temp] > 1:\n  return False\n  while x % temp == 0:\n  x = x / temp\n  return True\n \n def hasValidNum(arr, n):\n  sieve()\n  for i in range(n):\n  getFactorization(arr[i])\n  for i in range(n):\n  if check(arr[i]):\n  return True\n  return False", "151": "def loss(SP, P):\n  loss = 0\n  loss = (2 * P * P * SP) / (100 * 100 - P * P)\n  print(\"Loss = \" + str(loss))", "152": "def countSquares(r, c, m):\n  squares = 0\n  for i in range(1, 9):\n  for j in range(1, 9):\n  if max(abs(i - r), abs(j - c)) <= m:\n  squares += 1\n  return squares", "153": "def freqPairs(arr, n):\n  max = max(arr)\n  freq = [0] * (max + 1)\n  count = 0\n  for i in range(n):\n  freq[arr[i]] += 1\n  for i in range(n):\n  for j in range(2 * arr[i], max + 1, arr[i]):\n  if freq[j] > 0:\n  count += freq[j]\n  if freq[arr[i]] > 1:\n  count += freq[arr[i]] - 1\n  freq[arr[i]] -= 1\n  return count", "154": "def smallestIndex(a, n):\n  right1 = 0\n  right0 = 0\n  for i in range(n):\n  if a[i] == 1:\n  right1 = i\n  else:\n  right0 = i\n  return min(right1, right0)", "155": "def max_element(a):\n m = a[0]\n for i in range(len(a)):\n m = max(a[i], m)\n return m\n def primeCount(arr, n):\n max_val = max_element(arr)\n prime = [True] * (max_val + 1)\n prime[0] = False\n prime[1] = False\n for p in range(2, max_val + 1):\n if prime[p]:\n for i in range(p * 2, max_val + 1, p):\n prime[i] = False\n count = 0\n for i in range(n):\n if prime[arr[i]]:\n count += 1\n return count\n def getPrefixArray(arr, n, pre):\n pre[0] = arr[0]\n for i in range(1, n):\n pre[i] = pre[i - 1] + arr[i]\n return pre", "156": "def getAverage(x, y):\n avg = (x & y) + ((x ^ y) >> 1);\n return avg;", "157": "def numberOfDays(a, b, n):\n  Days = b * (n + a) / (a + b)\n  return Days", "158": "def count(N):\n a = 0\n a = (N * (N + 1)) / 2\n return a", "159": "def canConvert(a, b):\n while b > a:\n if b % 10 == 1:\n b /= 10\n continue\n if b % 2 == 0:\n b /= 2\n continue\n return False\n if b == a:\n return True\n return False", "160": "def MinimumValue(x, y):\n if x > y:\n temp = x\n x = y\n y = temp\n a = 1\n b = x - 1\n c = y - b\n print(a, b, c)", "161": "def decimalToBinary(n):\n  if n == 0:\n  print(\"0\")\n  return\n  decimalToBinary(n / 2)\n  print(n % 2)", "162": "def Max_sum(a, n):\n pos = 0\n neg = 0\n for i in range(n):\n if(a[i] > 0):\n pos = 1\n elif(a[i] < 0):\n neg = 1\n if((pos == 1) and (neg == 1)):\n break\n sum = 0\n if((pos == 1) and (neg == 1)):\n for i in range(n):\n sum += abs(a[i])\n elif(pos == 1):\n mini = a[0]\n sum = a[0]\n for i in range(1, n):\n mini = min(mini, a[i])\n sum += a[i]\n sum -= 2*mini\n elif(neg == 1):\n for i in range(n):\n a[i] = abs(a[i])\n mini = a[0]\n sum = a[0]\n for i in range(1, n):\n mini = min(mini, a[i])\n sum += a[i]\n sum -= 2*mini\n return sum", "163": "def Wedderburn(n):\n if n <= 2:\n return store[n]\n elif n % 2 == 0:\n x = n / 2\n ans = 0\n for i in range(1, x):\n ans += store[i] * store[n - i]\n ans += (store[x] * (store[x] + 1)) / 2\n store[n] = ans\n return ans\n else:\n x = (n + 1) / 2\n ans = 0\n for i in range(1, x):\n ans += store[i] * store[n - i]\n store[n] = ans\n return ans\n def Wedderburn_Etherington(n):\n store[0] = 0\n store[1] = 1\n store[2] = 1\n for i in range(0, n):\n print(Wedderburn(i))\n if i != n - 1:\n print(\" \", end = \"\")", "164": "def is_prime(n):\n  return (n == 3 or n == 5 or n == 7)\n def addPrimes():\n  n = MAX\n  prime = [True] * (n + 1)\n  for p in range(2, n + 1):\n  if prime[p]:\n  for i in range(p * p, n + 1, p):\n  prime[i] = False\n  ans = []\n  for p in range(2, n + 1):\n  if prime[p]:\n  ans.append(p)\n  return ans\n def find_Sum(n):\n  sum = 0\n  v = addPrimes()\n  for i in range(len(v)):\n  flag = 1\n  a = v[i]\n  while a != 0:\n  d = a % 10\n  a = a // 10\n  if is_prime(d):\n  flag = 0\n  break\n  if flag == 1:\n  n -= 1\n  sum += v[i]\n  return sum", "165": "def find_count(ele):\n count = 0\n for i in range(len(ele)):\n p = []\n c = 0\n for j in range(len(ele)-1, len(ele)-1-i, -1):\n p.append(ele[j])\n j = len(ele)-1\n k = 0\n while j >= 0:\n if ele[j] != p[k]:\n break\n j -= 1\n k += 1\n if k == len(p):\n c += 1\n k = 0\n count = max(count, c)\n return count\n def solve(n):\n count = 1\n ele = []\n for i in range(n):\n print(count, end=\", \")\n ele.append(count)\n count = find_count(ele)", "166": "def zigzag(n):\n  fact = [1]\n  zig = [1]\n  for i in range(1, n+1):\n  fact.append(fact[-1] * i)\n  zig.append(0)\n  zig[0] = 1\n  zig[1] = 1\n  print(\"zig zag numbers: \")\n  print(zig[0], zig[1], end=\" \")\n  for i in range(2, n):\n  sum = 0\n  for k in range(i):\n  sum += (fact[i-1] / (fact[i-1-k] * fact[k])) * zig[k] * zig[i-1-k]\n  zig[i] = sum / 2\n  print(sum / 2, end=\" \")", "167": "def compareValues(a, b, c, d):\n  log1 = math.log10(a)\n  num1 = log1 * b\n  log2 = math.log10(c)\n  num2 = log2 * d\n  if num1 > num2:\n  print(a, \"^\", b)\n  else:\n  print(c, \"^\", d)", "168": "def compareVal(x, y):\n  a = y * math.log(x)\n  b = x * math.log(y)\n  if a > b:\n  print(x, \"^\", y, \">\", y, \"^\", x)\n  elif a < b:\n  print(x, \"^\", y, \"<\", y, \"^\", x)\n  else:\n  print(x, \"^\", y, \"=\", y, \"^\", x)", "169": "def least_prime_factor(n):\n lpf = [0] * (n + 1)\n for i in range(2, n + 1):\n if lpf[i] == 0:\n for j in range(i, n + 1, i):\n if lpf[j] == 0:\n lpf[j] = i\n return lpf\n \n def mobius(n):\n mobius = [0] * (n + 1)\n for i in range(1, n + 1):\n if i == 1:\n mobius[i] = 1\n else:\n if lpf[i / lpf[i]] == lpf[i]:\n mobius[i] = 0\n else:\n mobius[i] = -1 * mobius[i / lpf[i]]\n return mobius\n \n def gcd_pairs(a, n):\n lpf = least_prime_factor(max(a))\n mobius = mobius(max(a))\n fre = [0] * (max(a) + 1)\n for i in range(n):\n fre[a[i]] += 1\n ans = 0\n for i in range(1, max(a) + 1):\n if mobius[i] == 0:\n continue\n temp = 0\n for j in range(i, max(a) + 1, i):\n temp += fre[j]\n ans += temp * (temp - 1) / 2 * mobius[i]\n return ans", "170": "def power(p):\n res = 1\n for i in range(1, p+1):\n res *= 2\n res %= mod\n return res % mod\n \n def subset_square_sum(A):\n n = len(A)\n ans = 0\n for i in A:\n ans += (1 * i * i) % mod\n ans %= mod\n return (1 * ans * power(n - 1)) % mod", "171": "def calculate_angle(n, i, j, k):\n  x = 0\n  y = 0\n  if i < j:\n  x = j - i\n  else:\n  x = j + n - i\n  if j < k:\n  y = k - j\n  else:\n  y = k + n - j\n  ang1 = (180 * x) / n\n  ang2 = (180 * y) / n\n  ans = 180 - ang1 - ang2\n  return ans", "172": "def gcd(a, b):\n if a == 0:\n return b\n return gcd(b % a, a)\n def divTermCount(a, b, c, num):\n return ((num / a) + (num / b) + (num / c) -\n (num / (a * b / gcd(a, b))) -\n (num / (c * b / gcd(c, b))) -\n (num / (a * c / gcd(a, c))) +\n (num / (a * b * c / gcd(gcd(a, b), c))))\n def findNthTerm(a, b, c, n):\n low = 1\n high = 2 ** 31 - 1\n while low < high:\n mid = low + (high - low) / 2\n if divTermCount(a, b, c, mid) < n:\n low = mid + 1\n else:\n high = mid\n return low", "173": "def preCompute():\n fact[0] = 1\n result[0] = 1\n for i in range(1, MAX+1):\n fact[i] = ((fact[i-1] % MOD) * i) % MOD\n result[i] = ((result[i-1] % MOD) * (fact[i] % MOD)) % MOD\n \n def performQueries(q, n):\n preCompute()\n for i in range(n):\n print(result[q[i]])", "174": "def modFact(n, m):\n result = 1\n for i in range(1, m+1):\n result = (result * i) % MOD\n return result", "175": "def findMinValue(arr, n):\n  sum = 0\n  for i in range(n):\n  sum += arr[i]\n  return (sum / n) + 1", "176": "def count(n):\n  return n * (3 * n - 1) / 2", "177": "def diameter(n):\n L = 1\n H = 0\n if n == 1:\n return 1\n if n == 2:\n return 2\n if n == 3:\n return 3\n while L * 2 <= n:\n L *= 2\n H += 1\n if n >= L * 2 - 1:\n return 2 * H + 1\n elif n >= L + (L / 2) - 1:\n return 2 * H\n return 2 * H - 1", "178": "def lcm(a, b):\n return (a * b) / gcd(a, b)\n def gcd(a, b):\n return b == 0 and a or gcd(b, a % b)\n def MinLCM(a, n):\n Prefix = [0] * (n + 2)\n Suffix = [0] * (n + 2)\n Prefix[1] = a[0]\n for i in range(2, n + 1):\n Prefix[i] = lcm(Prefix[i - 1], a[i - 1])\n Suffix[n] = a[n - 1]\n for i in range(n - 1, 0, -1):\n Suffix[i] = lcm(Suffix[i + 1], a[i - 1])\n ans = min(Suffix[2], Prefix[n])\n for i in range(2, n):\n ans = min(ans, lcm(Prefix[i - 1], Suffix[i + 1]))\n return ans", "179": "def isFactorial(n):\n for i in range(1,n):\n if n % i == 0:\n n /= i\n if n == 1:\n return True\n else:\n return False", "180": "def digitDividesK(num, k):\n while num != 0:\n d = num % 10\n if d != 0 and k % d == 0:\n return True\n num = num / 10\n return False\n \n def findCount(l, r, k):\n count = 0\n for i in range(l, r+1):\n if digitDividesK(i, k):\n count += 1\n return count", "181": "def maxXOR(arr, n):\n  xorArr = 0\n  for i in range(n):\n  xorArr ^= arr[i]\n  ans = 0\n  for i in range(n):\n  ans = max(ans, (xorArr ^ arr[i]))\n  return ans", "182": "def find_composite_nos(n):\n print(9 * n, 8 * n)", "183": "def decBinary(n):\n k = int(math.log(n) / math.log(2))\n while n > 0:\n print(n % 2)\n n = n // 2\n \n def binaryDec(arr, n):\n ans = 0\n for i in range(n):\n ans += arr[i] << (n - i - 1)\n return ans\n \n def getNum(n, k):\n l = int(math.log(n) / math.log(2)) + 1\n a = [0] * l\n decBinary(n)\n if k > l:\n return n\n a[k - 1] = (a[k - 1] == 0) ? 1 : 0\n return binaryDec(a, l)", "184": "def Count_subarray(arr, n):\n  total_sum = 0\n  subarray_sum = 0\n  remaining_sum = 0\n  count = 0\n  for i in range(0, n):\n  total_sum += arr[i]\n  for i in range(0, n):\n  subarray_sum += arr[i]\n  remaining_sum = total_sum - subarray_sum\n  if subarray_sum > remaining_sum:\n  count += 1\n  return count", "185": "def Count_subarray(arr, n):\n  subarray_sum, remaining_sum, count = 0, 0, 0\n  for i in range(n):\n  for j in range(i, n):\n  subarray_sum += arr[j]\n  remaining_sum = 0\n  for k in range(0, i):\n  remaining_sum += arr[k]\n  for l in range(j + 1, n):\n  remaining_sum += arr[l]\n  if subarray_sum > remaining_sum:\n  count += 1\n  return count", "186": "def smallestPoss(s, n):\n  arr = [0] * 10\n  for i in range(n):\n  arr[ord(s[i]) - 48] += 1\n  ans = \"\"\n  for i in range(10):\n  for j in range(arr[i]):\n  ans = ans + str(i)\n  return ans", "187": "def noOfCards(n):\n return n * (3 * n + 1) / 2", "188": "def powOfPositive(n):\n pos = math.floor(math.log(n)/math.log(2))\n return math.pow(2, pos)\n def powOfNegative(n):\n pos = math.ceil(math.log(n)/math.log(2))\n return -1 * math.pow(2, pos)\n def highestPowerOf2(n):\n if n > 0:\n print(powOfPositive(n))\n else:\n n = -n\n print(powOfNegative(n))", "189": "def printValueOfPi(N):\n pi = 2 * math.acos(0.0)\n print(pi)", "190": "def nearest(n):\n  prevCube = int(n ** (1/3))\n  nextCube = prevCube + 1\n  prevCube = prevCube * prevCube * prevCube\n  nextCube = nextCube * nextCube * nextCube\n  ans = (n - prevCube) < (nextCube - n) and (prevCube - n) or (nextCube - n)\n  return ans", "191": "def nearest(n):\n prevSquare = int(math.sqrt(n))\n nextSquare = prevSquare + 1\n prevSquare = prevSquare * prevSquare\n nextSquare = nextSquare * nextSquare\n ans = (n - prevSquare) < (nextSquare - n)? (prevSquare - n): (nextSquare - n)\n return ans", "192": "def printPairs(arr, n):\n  for i in range(n):\n  for j in range(n):\n  print(\"(\", arr[i], \", \", arr[j], \")\", end=\", \")", "193": "def isPrime(N):\n  if N < 2:\n  return False\n  if N % 2 == 0 and N % 3 == 0 and N % 5 == 0:\n  return False\n  for i in range(7, int(math.sqrt(N)) + 1, 30):\n  if N % (i + 0) == 0 or N % (i + 4) == 0 or N % (i + 6) == 0 or N % (i + 10) == 0 or N % (i + 12) == 0 or N % (i + 16) == 0 or N % (i + 22) == 0 or N % (i + 24) == 0:\n  return False\n  return True", "194": "def canBeReduced(x, y):\n  maxi = max(x, y)\n  mini = min(x, y)\n  if (((x + y) % 3) == 0 and maxi <= 2*mini):\n  print(\"YES\")\n  else:\n  print(\"NO\")", "195": "def largest_sum(arr, n):\n m = {}\n for i in range(n):\n if arr[i] in m:\n m[arr[i]] += 1\n else:\n m[arr[i]] = 1\n maximum = -1\n for i in range(n):\n if arr[i] * 2 in m:\n m[arr[i] * 2] += m[arr[i]] / 2\n else:\n m[arr[i] * 2] = m[arr[i]] / 2\n if arr[i] * 2 > maximum:\n maximum = arr[i] * 2\n return maximum", "196": "def isPerfectCube(x):\n cr = round(x ** (1. / 3))\n return cr * cr * cr == x\n \n def checkCube(a, b):\n s1 = str(a)\n s2 = str(b)\n c = int(s1 + s2)\n if isPerfectCube(c):\n print(\"Yes\")\n else:\n print(\"No\")", "197": "def probability(N):\n  a = 2\n  b = 3\n  if N == 1:\n  return a\n  elif N == 2:\n  return b\n  else:\n  for i in range(3, N+1):\n  c = a + b\n  a = b\n  b = c\n  return b\n def operations(N):\n  x = probability(N)\n  y = 2**N\n  return round(x/y, 2)", "198": "def NthSmallest(K):\n  Q = []\n  x = 0\n  for i in range(1,10):\n  Q.append(i)\n  for i in range(1,K+1):\n  x = Q[0]\n  Q.remove(x)\n  if x % 10 != 0:\n  Q.append(x * 10 + x % 10 - 1)\n  Q.append(x * 10 + x % 10)\n  if x % 10 != 9:\n  Q.append(x * 10 + x % 10 + 1)\n  return x", "199": "def power(x, y, p):\n res = 1\n x = x % p\n while (y > 0):\n if ((y & 1) == 1):\n res = (res * x) % p\n x = (x * x) % p\n y >>= 1\n return res\n def modInverse(n, p):\n return power(n, p - 2, p)\n def nCrModPFermat(n, r, p):\n if (r == 0):\n return 1\n if (n < r):\n return 0\n fac = [0] * (n + 1)\n fac[0] = 1\n for i in range(1, n + 1):\n fac[i] = (fac[i - 1] * i) % p\n return (fac[n] * modInverse(fac[r], p) % p *\n modInverse(fac[n - r], p) % p) % p\n def SumOfXor(a, n):\n mod = 10037\n answer = 0\n for k in range(0, 32):\n x = 0\n y = 0\n for i in range(0, n):\n if ((a[i] & (1 << k)) != 0):\n x += 1\n else:\n y += 1\n answer += ((1 << k) % mod *\n (nCrModPFermat(x, 3, mod) + x *\n nCrModPFermat(y, 2, mod)) % mod) % mod\n return answer", "200": "def solve(arr, size, n):\n  v = [0] * (n + 1)\n  for i in range(size):\n  v[arr[i]] += 1\n  max1 = -1\n  mx = -1\n  for i in range(n + 1):\n  if v[i] > mx:\n  mx = v[i]\n  max1 = i\n  cnt = 0\n  for i in v:\n  if i == 0:\n  cnt += 1\n  diff1 = n + 1 - cnt\n  max_size = min(v[max1] - 1, diff1)\n  max_size = min(v[max1], diff1 - 1)\n  max_size = min(v[max1] - 1, diff1)\n  max_size = min(v[max1], diff1 - 1)\n  print(\"Maximum size is: \" + str(max_size))\n  print(\"First Array is\")\n  for i in range(max_size):\n  print(max1, end=\" \")\n  v[max1] -= 1\n  print()\n  print(\"The Second Array Is :\")\n  for i in range(n + 1):\n  if v[i] > 0:\n  print(i, end=\" \")\n  max_size -= 1\n  if max_size < 1:\n  break", "201": "def CountWays(n):\n ans = (n - 1) / 2\n return ans", "202": "def printKNumbers(N, K):\n  for i in range(K - 1):\n  print(1, end = \" \")\n  print(N - K + 1)", "203": "def findMaxPrimeDivisor(n):\n  max_possible_prime = 0\n  while n % 2 == 0:\n  max_possible_prime += 1\n  n = n / 2\n  for i in range(3, int(n**0.5)+1, 2):\n  while n % i == 0:\n  max_possible_prime += 1\n  n = n / i\n  if n > 2:\n  max_possible_prime += 1\n  print(max_possible_prime)", "204": "def countValues(N):\n  div = []\n  for i in range(2, int(N ** 0.5) + 1):\n  if N % i == 0:\n  div.append(i)\n  if N != i ** 2:\n  div.append(N / i)\n  answer = 0\n  for i in range(1, N - 1):\n  if (N - 1) % i == 0:\n  if i ** 2 == N - 1:\n  answer += 1\n  else:\n  answer += 2\n  for d in div:\n  K = N\n  while K % d == 0:\n  K /= d\n  if (K - 1) % d == 0:\n  answer += 1\n  return answer", "205": "def countValues(n):\n  answer = 0\n  for i in range(2, n+1):\n  k = n\n  while k >= i:\n  if k % i == 0:\n  k /= i\n  else:\n  k -= i\n  if k == 1:\n  answer += 1\n  return answer", "206": "def sumOfDigits(n):\n  sum = 0\n  while n > 0:\n  sum += n % 10\n  n /= 10\n  return sum\n \n def smallestNum(X, Y):\n  res = -1\n  for i in range(X, MAXN):\n  if sumOfDigits(i) % Y == 0:\n  res = i\n  break\n  return res", "207": "def calculateWays(n):\n  x = 0\n  v = [0] * n\n  for i in range(0, n / 2):\n  if n % 2 == 0 and i == n / 2:\n  break\n  x = n * (i + 1) - (i + 1) * i\n  v[i] = x\n  v[n - i - 1] = x\n  return v\n \n def printArray(v):\n  for i in range(0, len(v)):\n  print v[i]", "208": "def isPerfectSquare(x):\n  sr = math.sqrt(x)\n  return((sr - math.floor(sr)) == 0)\n def checkSunnyNumber(N):\n  if isPerfectSquare(N + 1):\n  print(\"Yes\")\n  else:\n  print(\"No\")", "209": "def sumEvenNumbers(N, K):\n  check = N - 2 * (K - 1)\n  if check > 0 and check % 2 == 0:\n  for i in range(K - 1):\n  print(\"2 \", end=\"\")\n  print(check)\n  else:\n  print(\"-1\")", "210": "def checksum(n, k):\n  first_term = ((2 * n) / k + (1 - k)) / 2.0\n  if first_term - int(first_term) == 0:\n  for i in range(int(first_term), int(first_term) + k):\n  print(i, end=' ')\n  else:\n  print(-1)", "211": "def get_factorization(x):\n  count = 0\n  v = []\n  while x % 2 == 0:\n  count += 1\n  x = x / 2\n  if count != 0:\n  v.append(count)\n  for i in range(3, int(x ** 0.5) + 1, 2):\n  count = 0\n  while x % i == 0:\n  count += 1\n  x = x / i\n  if count != 0:\n  v.append(count)\n  if x > 1:\n  v.append(1)\n  return v\n \n def non_prime_divisors(N):\n  v = get_factorization(N)\n  ret = 1\n  for i in v:\n  ret = ret * (i + 1)\n  ret = ret - len(v)\n  return ret", "212": "def fact(n):\n  res = 1\n  for i in range(2, n+1):\n  res = res * i\n  return res\n def nCr(n, r):\n  return fact(n) / (fact(r) * fact(n - r))\n def sumSubsequences(arr, n, k):\n  sum = 0\n  for i in range(n):\n  sum += arr[i]\n  kLengthSubSequence = nCr(n, k)\n  ans = sum * ((k * kLengthSubSequence) / n)\n  return ans", "213": "def isPrime(n):\n if n <= 1:\n return False\n for i in range(2, n):\n if n % i == 0:\n return False\n return True\n def countSubsequences(arr, n):\n totalSubsequence = (2**n) - 1\n countPrime = 0\n countOnes = 0\n for i in range(n):\n if arr[i] == 1:\n countOnes += 1\n elif isPrime(arr[i]):\n countPrime += 1\n compositeSubsequence = totalSubsequence - countPrime - (2**countOnes) - (2**countOnes * countPrime)\n return compositeSubsequence", "214": "def constructArray(N):\n  arr = []\n  for i in range(1, N+1):\n  arr.append(i)\n  for i in range(0, N):\n  print(arr[i], end=\", \")", "215": "def power(x, y):\n p = 1000000007\n res = 1\n x = x % p\n while (y > 0):\n if (y % 2 == 1):\n res = (res * x) % p\n y = y >> 1\n x = (x * x) % p\n return res\n def productPairs(arr, n):\n product = 1\n for i in range(n):\n product = (product % mod *\n power(arr[i],\n (2 * n)) % mod) % mod\n return product % mod", "216": "def productPairs(arr, n):\n  product = 1\n  for i in range(n):\n  for j in range(n):\n  product *= (arr[i] % mod * arr[j] % mod) % mod\n  product = product % mod\n  return product % mod", "217": "def checkSolution(a, b, c):\n  if a == c:\n  print(\"Yes\")\n  else:\n  print(\"No\")", "218": "def insert_element(a, n):\n  Xor = 0\n  Sum = 0\n  for i in range(n):\n  Xor ^= a[i]\n  Sum += a[i]\n  if Sum == 2 * Xor:\n  print(\"0\")\n  return\n  if Xor == 0:\n  print(\"1\")\n  print(Sum)\n  return\n  num1 = Sum + Xor\n  num2 = Xor\n  print(\"2\")\n  print(num1, num2)", "219": "def MegagonNum(n):\n  return (999998 * n * n - 999996 * n) / 2", "220": "def enneacontahexagonNum(n):\n  return (94 * n * n - 92 * n) / 2", "221": "def func(arr, n):\n  ans = 0\n  maxx = 0\n  freq = [0] * 100005\n  temp = 0\n  for i in range(n):\n  temp = arr[i]\n  freq[temp] += 1\n  maxx = max(maxx, temp)\n  for i in range(1, maxx + 1):\n  freq[i] += freq[i - 1]\n  for i in range(1, maxx + 1):\n  if freq[i] != 0:\n  j = 1.5\n  cur = math.ceil(0.5 * i) - 1.0\n  while True:\n  val = min(maxx, math.ceil(i * j) - 1.0)\n  times = freq[i] - freq[i - 1]\n  con = j - 0.5\n  ans += times * con * (freq[val] - freq[int(cur)])\n  cur = val\n  if val == maxx:\n  break\n  j += 1\n  return ans", "222": "def checkArray(n, k, arr):\n  cnt = 0\n  for i in range(n):\n  if (arr[i] & 1) != 0:\n  cnt += 1\n  if cnt >= k and cnt % 2 == k % 2:\n  return True\n  else:\n  return False", "223": "def printSeries(n, a, b, c):\n  if n == 1:\n  print(a)\n  return\n  if n == 2:\n  print(a, b)\n  return\n  print(a, b, c)\n  for i in range(4, n+1):\n  d = a + b + c\n  print(d)\n  a = b\n  b = c\n  c = d", "224": "def rev(num):\n rev_num = 0\n while num > 0:\n rev_num = rev_num * 10 + num % 10\n num = num / 10\n return rev_num\n def divSum(num):\n result = 0\n for i in range(2, int(num ** 0.5) + 1):\n if num % i == 0:\n if i == num / i:\n result += rev(i)\n else:\n result += rev(i) + rev(num / i)\n return result + 1\n def isAntiPerfect(num):\n return divSum(num) == num", "225": "def findNthTerm(n):\n  print(n * n - n + 1)", "226": "def isDouble(num):\n  s = str(num)\n  l = len(s)\n  if s[0] == s[1]:\n  return False\n  if l % 2 == 1:\n  s = s + s[1]\n  l += 1\n  s1 = s[:l/2]\n  s2 = s[l/2:]\n  return s1 == s2\n \n def isNontrivialUndulant(N):\n  return N > 100 and isDouble(N)", "227": "def linearSum(n):\n return (n * (n + 1) / 2) % mod\n def rangeSum(b, a):\n return (linearSum(b) -\n linearSum(a)) % mod\n def totalSum(n):\n result = 0\n i = 1\n while True:\n result += rangeSum(n / i,\n n / (i + 1)) *\n (i % mod) % mod\n result %= mod\n if i == n:\n break\n i = n / (n / (i + 1))\n return result", "228": "def maxAdjacentDifference(N, K):\n  if N == 1:\n  return 0\n  if N == 2:\n  return K\n  return 2 * K", "229": "def is_possible(N):\n  C = 0\n  D = 0\n  while N % 10 == 0:\n  N = N / 10\n  C += 1\n  if 2 ** (N.bit_length() - 1) == N:\n  D = N.bit_length() - 1\n  if C >= D:\n  print(\"YES\")\n  else:\n  print(\"NO\")\n  else:\n  print(\"NO\")", "230": "def Sum(N):\n  SumOfPrimeDivisors = [1] * (N + 1)\n  for i in range(2, N + 1):\n  if SumOfPrimeDivisors[i] == 1:\n  for j in range(i, N + 1, i):\n  SumOfPrimeDivisors[j] += i\n  return SumOfPrimeDivisors[N]\n def RuthAaronNumber(n):\n  if Sum(n) == Sum(n + 1):\n  return True\n  else:\n  return False", "231": "def isPrime(n):\n  if n == 1:\n  return True\n  if n <= 3:\n  return True\n  if n % 2 == 0 or n % 3 == 0:\n  return False\n  i = 5\n  while i * i <= n:\n  if n % i == 0 or n % (i + 2) == 0:\n  return False\n  i = i + 6\n  return True\n \n def checkExpression(n):\n  if isPrime(n):\n  print(\"Yes\")\n  else:\n  print(\"No\")", "232": "def isDNum(n):\n  if n < 4:\n  return False\n  numerator = 0\n  hcf = 0\n  for k in range(2, n+1):\n  numerator = (k**(n-2) - k)\n  hcf = gcd(n, k)\n  if hcf == 1 and (numerator % n) != 0:\n  return False\n  return True\n \n def gcd(a, b):\n  if b == 0:\n  return a\n  return gcd(b, a % b)", "233": "def sigma(n):\n  if n == 1:\n  return 1\n  result = 0\n  for i in range(2, int(math.sqrt(n)) + 1):\n  if n % i == 0:\n  if i == (n / i):\n  result += i\n  else:\n  result += (i + n / i)\n  return (result + n + 1)\n def isSuperabundant(N):\n  for i in range(1, N):\n  x = sigma(i) / i\n  y = sigma(N) / (N * 1.0)\n  if x > y:\n  return False\n  return True", "234": "def isInsolite(n):\n N = n\n sum = 0\n product = 1\n while n != 0:\n r = n % 10\n sum = sum + r * r\n product = product * r * r\n n = n / 10\n return (N % sum == 0) and (N % product == 0)", "235": "def reverse(num):\n rev_num = 0\n while(num > 0):\n rev_num = rev_num * 10 + num % 10\n num = num / 10\n return rev_num\n \n def properDivSum(num):\n result = 0\n for i in range(2, int(math.sqrt(num)) + 1):\n if num % i == 0:\n if i == (num / i):\n result += i\n else:\n result += (i + num / i)\n return (result + 1)\n \n def isTcefrep(n):\n return properDivSum(n) == reverse(n)", "236": "def print_product(a, b, c, d):\n  prod1 = a * c\n  prod2 = b * d\n  prod3 = (a + b) * (c + d)\n  real = prod1 - prod2\n  imag = prod3 - (prod1 + prod2)\n  print(real, \"+\", imag, \"i\")", "237": "def sieve():\n  v[1] = 1\n  for i in range(2, x):\n  v[i] = i\n  for i in range(4, x, 2):\n  v[i] = 2\n  for i in range(3, int(x ** 0.5) + 1, 2):\n  if v[i] == i:\n  for j in range(i * i, x, i):\n  if v[j] == j:\n  v[j] = i\n \n def prime_factors(n):\n  s = set()\n  while n != 1:\n  s.add(v[n])\n  n = n // v[n]\n  return len(s)\n \n def distinctPrimes(m, k):\n  result = []\n  for i in range(14, m + k):\n  count = prime_factors(i)\n  if count == k:\n  result.append(i)\n  p = len(result)\n  for index in range(p - 1):\n  element = result[index]\n  count = 1\n  z = index\n  while z < p - 1 and count <= k and result[z] + 1 == result[z + 1]:\n  count += 1\n  z += 1\n  if count >= k:\n  print(element, end=' ')", "238": "def findMaximumGcd(n):\n  max_gcd = 1\n  for i in range(1, int(n**0.5)+1):\n  if n % i == 0:\n  if i > max_gcd:\n  max_gcd = i\n  if (n / i != i) and (n / i != n):\n  if n / i > max_gcd:\n  max_gcd = n / i\n  return max_gcd", "239": "def powerOptimised(a, n):\n  ans = 1\n  while n > 0:\n  last_bit = n & 1\n  if last_bit > 0:\n  ans = ans * a\n  a = a * a\n  n = n >> 1\n  return ans", "240": "def nCr(n, r):\n  res = 1\n  if r > n - r:\n  r = n - r\n  for i in range(0, r):\n  res *= (n - i)\n  res /= (i + 1)\n  return res", "241": "def nCr(n, r):\n  res = 1\n  if r > n - r:\n  r = n - r\n  for i in range(0, r):\n  res *= (n - i)\n  res /= (i + 1)\n  return res\n def solve(n, m, k):\n  sum = 0\n  for i in range(0, k + 1):\n  sum += nCr(n, i) * nCr(m, k - i)\n  return sum", "242": "def gcd(a, b):\n  if a == 0:\n  return b\n  return gcd(b % a, a)\n def lcm(a, b):\n  return (a * b) / gcd(a, b)\n def findLCM(arr):\n  nth_lcm = arr[0]\n  for i in range(1, len(arr)):\n  nth_lcm = lcm(nth_lcm, arr[i])\n  Landau = max(Landau, nth_lcm)\n def findWays(arr, i, n):\n  if n == 0:\n  findLCM(arr)\n  for j in range(i, n + 1):\n  arr.append(j)\n  findWays(arr, j, n - j)\n  arr.pop()\n def Landau_function(n):\n  arr = []\n  findWays(arr, 1, n)\n  print(Landau)", "243": "def prime(n):\n  if n == 1:\n  return False\n  for i in range(2, n):\n  if n % i == 0:\n  return False\n  return True\n \n def minDivisior(n):\n  if prime(n):\n  print(1, n - 1)\n  else:\n  for i in range(2, n):\n  if n % i == 0:\n  print(n // i, n // i * (i - 1))\n  break", "244": "def functionMax(arr, n):\n  setBit = [[] for i in range(32 + 1)]\n  for i in range(n):\n  for j in range(32):\n  if (arr[i] & (1 << j)) > 0:\n  setBit[j].append(i)\n  for i in range(32, -1, -1):\n  if len(setBit[i]) == 1:\n  arr[0], arr[setBit[i][0]] = arr[setBit[i][0]], arr[0]\n  break\n  maxAnd = arr[0]\n  for i in range(1, n):\n  maxAnd = maxAnd & (~arr[i])\n  return maxAnd", "245": "def findPrimeNos(L, R, M, K):\n  for i in range(L, R+1):\n  if M.get(i) != None:\n  M[i] = M[i] + 1\n  else:\n  M[i] = 1\n  if M.get(1) != None:\n  M.pop(1)\n  for i in range(2, int(R**0.5)+1):\n  multiple = 2\n  while (i * multiple <= R):\n  if M.get(i * multiple) != None:\n  M.pop(i * multiple)\n  multiple += 1\n  for entry in M.items():\n  if M.get(entry[0] + K) != None:\n  print(\"(\" + str(entry[0]) + \", \" + str(entry[0] + K) + \") \")\n \n def getPrimePairs(L, R, K):\n  M = {}\n  findPrimeNos(L, R, M, K)", "246": "def checkRearrangements(mat, N, M):\n  for i in range(N):\n  for j in range(1, M):\n  if mat[i][0] != mat[i][j]:\n  return \"Yes\"\n  return \"No\"\n \n def nonZeroXor(mat, N, M):\n  res = 0\n  for i in range(N):\n  res = res ^ mat[i][0]\n  if res != 0:\n  return \"Yes\"\n  else:\n  return checkRearrangements(mat, N, M)", "247": "def findTheGreatestX(P, Q):\n divisiors = {}\n for i in range(2, Q+1):\n while Q % i == 0 and Q > 1:\n Q /= i\n if i in divisiors:\n divisiors[i] += 1\n else:\n divisiors[i] = 1\n if Q > 1:\n if Q in divisiors:\n divisiors[Q] += 1\n else:\n divisiors[Q] = 1\n ans = 0\n for i in divisiors:\n frequency = divisiors[i]\n temp = P\n cur = 0\n while temp % i == 0:\n temp /= i\n cur += 1\n if cur < frequency:\n ans = P\n break\n temp = P\n for j in range(cur, frequency-1, -1):\n temp /= i\n ans = max(temp, ans)\n print(ans)", "248": "def minimumSubsetDifference(N):\n  blockOfSize8 = N / 8\n  str = \"ABBABAAB\"\n  subsetDifference = 0\n  partition = \"\"\n  while blockOfSize8 > 0:\n  partition += str\n  blockOfSize8 -= 1\n  A = [0] * N\n  B = [0] * N\n  x = 0\n  y = 0\n  for i in range(N):\n  if partition[i] == 'A':\n  A[x] = ((i + 1) * (i + 1))\n  x += 1\n  else:\n  B[y] = ((i + 1) * (i + 1))\n  y += 1\n  print(subsetDifference)\n  for i in range(x):\n  print(A[i], end=\" \")\n  print()\n  for i in range(y):\n  print(B[i], end=\" \")", "249": "def minMoves(arr, N):\n  odd_element_cnt = 0\n  for i in range(N):\n  if arr[i] % 2 != 0:\n  odd_element_cnt += 1\n  moves = odd_element_cnt / 2\n  if odd_element_cnt % 2 != 0:\n  moves += 2\n  print moves", "250": "def countSetBits(N):\n  count = 0\n  while N != 0:\n  N = N & (N - 1)\n  count += 1\n  return count", "251": "def countNumberHavingKthBitSet(N, K):\n  numbers_rightmost_setbit_K = 0\n  for i in range(1, K+1):\n  numbers_rightmost_bit_i = (N + 1) / 2\n  N -= numbers_rightmost_bit_i\n  if i == K:\n  numbers_rightmost_setbit_K = numbers_rightmost_bit_i\n  print(numbers_rightmost_setbit_K)", "252": "def cntWaysConsArray(A, N):\n  total = 1\n  oddArray = 1\n  for i in range(N):\n  total = total * 3\n  if A[i] % 2 == 0:\n  oddArray *= 2\n  print(total - oddArray)", "253": "def findSize(N):\n if N == 0:\n return 1\n if N == 1:\n return 1\n Size = 2 * findSize(N / 2) + 1\n return Size\n def CountOnes(N, L, R):\n if L > R:\n return 0\n if N <= 1:\n return N\n ret = 0\n M = N / 2\n Siz_M = findSize(M)\n if L <= Siz_M:\n ret += CountOnes(N / 2, L,\n min(Siz_M, R))\n if L <= Siz_M + 1 and Siz_M + 1 <= R:\n ret += N % 2\n if Siz_M + 1 < R:\n ret += CountOnes(N / 2,\n max(1, L - Siz_M - 1), R - Siz_M - 1)\n return ret", "254": "def minimumIncrement(arr, N):\n  if N % 2 != 0:\n  print(\"-1\")\n  exit(0)\n  cntEven = 0\n  cntOdd = 0\n  for i in range(N):\n  if arr[i] % 2 == 0:\n  cntEven += 1\n  cntOdd = N - cntEven\n  return abs(cntEven - cntOdd) // 2", "255": "def maxAdjacent(arr, N):\n  res = []\n  arr_max = min(arr)\n  for i in range(1, N):\n  arr_max = max(arr_max, abs(arr[i-1] - arr[i]))\n  for i in range(1, N-1):\n  curr_max = abs(arr[i-1] - arr[i+1])\n  ans = max(curr_max, arr_max)\n  res.append(ans)\n  for x in res:\n  print(x, end=\" \")\n  print()", "256": "def maxAdjacent(arr, N):\n  res = []\n  for i in range(1, N-1):\n  prev = arr[0]\n  maxi = -float('inf')\n  for j in range(1, N):\n  if i == j:\n  continue\n  maxi = max(maxi, abs(arr[j] - prev))\n  prev = arr[j]\n  res.append(maxi)\n  for x in res:\n  print(x, end=' ')\n  print()", "257": "def minSum(A, N):\n  mp = {}\n  sum = 0\n  for i in range(N):\n  sum += A[i]\n  if A[i] in mp:\n  mp[A[i]] += 1\n  else:\n  mp[A[i]] = 1\n  minSum = float('inf')\n  for it in mp.items():\n  minSum = min(minSum, sum - (it[0] * it[1]))\n  return minSum", "258": "def countElements(N):\n  Cur_Ele = 1\n  Count = 0\n  while Cur_Ele <= N:\n  Count += 1\n  Cur_Ele = Cur_Ele * 2\n  print(N - Count)", "259": "def isPossible(N):\n  return (((N & (N - 1)) & N))\n def countElements(N):\n  count = 0\n  for i in range(1, N + 1):\n  if isPossible(i) != 0:\n  count += 1\n  print(count)", "260": "def singleDigitSubarrayCount(arr, N):\n  res = 0\n  count = 0\n  for i in range(N):\n  if arr[i] <= 9:\n  count += 1\n  res += count\n  else:\n  count = 0\n  print(res)", "261": "def productExceptSelf(arr, N):\n  product = 1\n  z = 0\n  for i in range(N):\n  if arr[i] != 0:\n  product *= arr[i]\n  if arr[i] == 0:\n  z += 1\n  a = abs(product)\n  for i in range(N):\n  if z == 1:\n  if arr[i] != 0:\n  arr[i] = 0\n  else:\n  arr[i] = product\n  continue\n  elif z > 1:\n  arr[i] = 0\n  continue\n  b = abs(arr[i])\n  curr = int(round(a ** (1.0 / b)))\n  if arr[i] < 0 and product < 0:\n  arr[i] = curr\n  elif arr[i] > 0 and product > 0:\n  arr[i] = curr\n  else:\n  arr[i] = -1 * curr\n  for i in range(N):\n  print(arr[i], end = \" \")", "262": "def convertToASCII(N):\n  num = str(N)\n  for ch in num:\n  print(ch + \" (\" + str(ord(ch)) + \")\")", "263": "def isPossible(target):\n max = 0\n index = 0\n for i in range(len(target)):\n if max < target[i]:\n max = target[i]\n index = i\n if max == 1:\n return True\n for i in range(len(target)):\n if i != index:\n max -= target[i]\n if max <= 0:\n return False\n target[index] = max\n return isPossible(target)", "264": "def printSpiral(size):\n row = 0\n col = 0\n boundary = size - 1\n sizeLeft = size - 1\n flag = 1\n move = 'r'\n matrix = [[0 for x in range(size)] for y in range(size)]\n for i in range(1, size * size + 1):\n matrix[row][col] = i\n if move == 'r':\n col += 1\n elif move == 'l':\n col -= 1\n elif move == 'u':\n row -= 1\n elif move == 'd':\n row += 1\n if i == boundary:\n boundary += sizeLeft\n if flag != 2:\n flag = 2\n else:\n flag = 1\n sizeLeft -= 1\n if move == 'r':\n move = 'd'\n elif move == 'd':\n move = 'l'\n elif move == 'l':\n move = 'u'\n elif move == 'u':\n move = 'r'\n for row in range(size):\n for col in range(size):\n n = matrix[row][col]\n print((n < 10)\n ? (n + \" \")\n : (n + \" \")),\n print", "265": "def gcd(a, b):\n  while b > 0:\n  a, b = b, a % b\n  return a\n \n def countNumberOfWays(n):\n  if n == 1:\n  return -1\n  g = 0\n  power = 0\n  while n % 2 == 0:\n  power += 1\n  n /= 2\n  g = gcd(g, power)\n  for i in range(3, int(n ** 0.5) + 1, 2):\n  power = 0\n  while n % i == 0:\n  power += 1\n  n /= i\n  g = gcd(g, power)\n  if n > 2:\n  g = gcd(g, 1)\n  ways = 1\n  power = 0\n  while g % 2 == 0:\n  g /= 2\n  power += 1\n  ways *= (power + 1)\n  for i in range(3, int(g ** 0.5) + 1, 2):\n  power = 0\n  while g % i == 0:\n  power += 1\n  g /= i\n  ways *= (power + 1)\n  if g > 2:\n  ways *= 2\n  return ways", "266": "def countPrimeFactors(n):\n  count = 0\n  while n % 2 == 0:\n  n = n / 2\n  count += 1\n  for i in range(3, int(n ** 0.5) + 1, 2):\n  while n % i == 0:\n  n = n / i\n  count += 1\n  if n > 2:\n  count += 1\n  return count\n \n def findSum(n):\n  sum = 0\n  for i in range(1, n):\n  if countPrimeFactors(i) == 2:\n  sum += i\n  return sum\n \n def check(n, k):\n  s = findSum(k - 1)\n  if s >= n:\n  print(\"No\")\n  else:\n  print(\"Yes\")", "267": "def partitionArray(a, n):\n min = [0] * n\n mini = float('inf')\n for i in range(n-1, -1, -1):\n mini = min(mini, a[i])\n min[i] = mini\n maxi = float('-inf')\n ind = -1\n for i in range(n-1):\n maxi = max(maxi, a[i])\n if maxi < min[i+1]:\n ind = i\n break\n if ind != -1:\n for i in range(ind+1):\n print(a[i], end=' ')\n print()\n for i in range(ind+1, n):\n print(a[i], end=' ')\n else:\n print(\"Impossible\")", "268": "def perfectSquare(num):\n  sr = int(num**0.5)\n  a = sr * sr\n  b = (sr + 1) * (sr + 1)\n  if ((num - a) < (b - num)):\n  return a\n  else:\n  return b\n def powerOfTwo(num):\n  lg = int(math.log(num) / math.log(2))\n  p = int(math.pow(2, lg))\n  return p\n def uniqueElement(arr, N):\n  ans = True\n  freq = {}\n  for i in range(N):\n  if arr[i] in freq:\n  freq[arr[i]] += 1\n  else:\n  freq[arr[i]] = 1\n  for el in freq:\n  if freq[el] == 1:\n  ans = False\n  ps = perfectSquare(el)\n  print(powerOfTwo(ps), end=\" \")\n  if ans:\n  print(-1)", "269": "def multiplyByMersenne(N, M):\n  x = math.log(M + 1) / math.log(2)\n  return ((N << x) - N)", "270": "def checkCommonDivisor(arr, N, X):\n  G = 0\n  for i in range(N):\n  G = gcd(G, arr[i])\n  copy_G = G\n  for divisor in range(2, X+1):\n  while G % divisor == 0:\n  G = G / divisor\n  if G <= X:\n  print(\"Yes\")\n  for i in range(N):\n  print((arr[i] / copy_G), end=\" \")\n  print()\n  else:\n  print(\"No\")\n \n def gcd(a, b):\n  if b == 0:\n  return a\n  return gcd(b, a % b)", "271": "class Node:\n def __init__(self, L, R, V):\n self.L = L\n self.R = R\n self.V = V\n \n def addEdge(Adj, u, v):\n Adj[u].append(v)\n Adj[v].append(u)\n \n def check(Adj, Src, N, visited):\n color = [0] * N\n visited[Src] = True\n q = []\n q.append(Src)\n while len(q) > 0:\n u = q.pop(0)\n Col = color[u]\n for x in Adj[u]:\n if visited[x] == True and color[x] == Col:\n return False\n elif visited[x] == False:\n visited[x] = True\n q.append(x)\n color[x] = 1 - Col\n return True\n \n def isPossible(Arr, N):\n Adj = [[] for i in range(N)]\n for i in range(N - 1):\n for j in range(i + 1, N):\n if Arr[i].R < Arr[j].L and Arr[i].L > Arr[j].R:\n continue\n else:\n if Arr[i].V == Arr[j].V:\n addEdge(Adj, i, j)\n visited = [False] * N\n for i in range(N):\n if visited[i] == False and len(Adj[i]) > 0:\n if check(Adj, i, N, visited) == False:\n print(\"No\")\n return\n print(\"Yes\")", "272": "def minimumSteps(x, y):\n  cnt = 0\n  while x != 0 and y != 0:\n  if x > y:\n  cnt += x // y\n  x %= y\n  else:\n  cnt += y // x\n  y %= x\n  cnt -= 1\n  if x > 1 and y > 1:\n  cnt = -1\n  print(cnt)", "273": "def vectorMagnitude(x, y, z):\n  sum = x * x + y * y + z * z\n  return math.sqrt(sum)", "274": "def findMedian(Mean, Mode):\n  Median = (2 * Mean + Mode) / 3.0\n  print(int(Median))", "275": "def sieveOfEratosthenes(N):\n prime = [False] * (N + 1)\n s = [0] * (N + 1)\n for i in range(2, N + 1):\n if not prime[i]:\n s[i] = i\n for j in range(i, N + 1, i):\n prime[j] = True\n s[j] = i\n return s\n \n def findDifference(N):\n s = sieveOfEratosthenes(N)\n total = 1\n odd = 1\n even = 0\n curr = s[N]\n cnt = 1\n while N > 1:\n N //= s[N]\n if curr == s[N]:\n cnt += 1\n continue\n if curr == 2:\n total = total * (cnt + 1)\n else:\n total = total * (cnt + 1)\n odd = odd * (cnt + 1)\n curr = s[N]\n cnt = 1\n even = total - odd\n print(abs(even - odd))", "276": "def findPermutation(arr):\n  N = len(arr)\n  i = N - 2\n  while i >= 0 and arr[i] <= arr[i + 1]:\n  i -= 1\n  if i == -1:\n  print(\"-1\")\n  return\n  j = N - 1\n  while j > i and arr[j] >= arr[i]:\n  j -= 1\n  while j > i and arr[j] == arr[j - 1]:\n  j -= 1\n  temp = arr[i]\n  arr[i] = arr[j]\n  arr[j] = temp\n  for it in arr:\n  print(it, end=\" \")", "277": "def evenOddBitwiseXOR(N):\n  print(\"Even: \" + str(0) + \" \"),\n  for i in range(4, N + 1, 4):\n  print(str(i) + \" \"),\n  print(\"\\n\"),\n  print(\"Odd: \" + str(1) + \" \"),\n  for i in range(4, N + 1, 4):\n  print(str(i - 1) + \" \"),\n  if (N % 4 == 2):\n  print(str(N + 1))\n  elif (N % 4 == 3):\n  print(str(N))", "278": "def check(n):\n  sumOfDigit = 0\n  prodOfDigit = 1\n  while n > 0:\n  rem = n % 10\n  sumOfDigit += rem\n  prodOfDigit *= rem\n  n //= 10\n  if sumOfDigit > prodOfDigit:\n  print(\"Yes\")\n  else:\n  print(\"No\")", "279": "def findbitwiseOR(a, n):\n  res = 0\n  for i in range(n):\n  res = res | a[i]\n  print(res)", "280": "def findbitwiseOR(a, n):\n res = 0\n for i in range(n):\n curr_sub_array = a[i]\n res = res | curr_sub_array\n for j in range(i, n):\n curr_sub_array = curr_sub_array & a[j]\n res = res | curr_sub_array\n print(res)", "281": "def KthSmallest(A, B, N, K):\n  M = 0\n  for i in range(N):\n  M = max(A[i], M)\n  freq = [0] * (M + 1)\n  for i in range(N):\n  freq[A[i]] += B[i]\n  sum = 0\n  for i in range(M + 1):\n  sum += freq[i]\n  if sum >= K:\n  return i\n  return -1", "282": "def isDivisibleByDivisor(S, D):\n S %= D\n hashMap = {S}\n for i in range(0, D):\n S += (S % D)\n S %= D\n if S in hashMap:\n if S == 0:\n return \"Yes\"\n return \"No\"\n else:\n hashMap.add(S)\n return \"Yes\"", "283": "def gcd(a, b):\n if b == 0:\n return a\n return gcd(b, a % b)\n def PrimeFactor(N):\n primef = {}\n while N % 2 == 0:\n if 2 in primef:\n primef[2] += 1\n else:\n primef[2] = 1\n N = N / 2\n for i in range(3, int(N ** 0.5) + 1, 2):\n while N % i == 0:\n if i in primef:\n primef[i] += 1\n else:\n primef[i] = 1\n N = N / i\n if N > 2:\n primef[N] = 1\n return primef\n def CountToMakeEqual(X, Y):\n gcdofXY = gcd(X, Y)\n newX = Y / gcdofXY\n newY = X / gcdofXY\n primeX = PrimeFactor(newX)\n primeY = PrimeFactor(newY)\n ans = 0\n for keys in primeX:\n if X % keys != 0:\n return -1\n ans += primeX[keys]\n for keys in primeY:\n if Y % keys != 0:\n return -1\n ans += primeY[keys]\n return ans", "284": "def isPrime(X):\n for i in range(2, int(X ** 0.5) + 1):\n if X % i == 0:\n return False\n return True\n \n def printPrimes(A, N):\n for i in range(N):\n for j in range(A[i] - 1, 0, -1):\n if isPrime(j):\n print(j, end = \" \")\n break\n for j in range(A[i] + 1, 2 * A[i] + 1):\n if isPrime(j):\n print(j, end = \" \")\n break\n print()", "285": "def countSubarray(arr, n):\n mx = min(arr) * 2\n L = 0\n R = 0\n for i in range(n):\n if arr[i] * 2 > mx:\n L = i\n break\n for i in range(n-1, -1, -1):\n if arr[i] * 2 > mx:\n R = i\n break\n print((L+1) * (n-R))", "286": "def countSubarray(arr, n):\n count = 0\n for i in range(n):\n for j in range(i, n):\n mxSubarray = 0\n mxOther = 0\n for k in range(i, j + 1):\n mxSubarray = max(mxSubarray, arr[k])\n for k in range(0, i):\n mxOther = max(mxOther, arr[k])\n for k in range(j + 1, n):\n mxOther = max(mxOther, arr[k])\n if (mxSubarray > (2 * mxOther)):\n count += 1\n print(count)", "287": "def preCalculate(phi, ans):\n  phi[0] = 0\n  phi[1] = 1\n  for i in range(2, MAX+1):\n  phi[i] = i\n  for i in range(2, MAX+1):\n  if phi[i] == i:\n  for j in range(i, MAX+1, i):\n  phi[j] -= (phi[j] / i)\n  for i in range(1, MAX+1):\n  ans[i] = ans[i-1] + (i - phi[i])\n \n def countPairs(arr, N):\n  phi = [0] * MAX\n  ans = [0] * MAX\n  preCalculate(phi, ans)\n  for i in range(N):\n  print(ans[arr[i]])", "288": "def gcd(a, b):\n  if b == 0:\n  return a\n  return gcd(b, a % b)\n def countPairs(arr, N):\n  for i in range(N):\n  count = 0\n  for x in range(1, arr[i] + 1):\n  for y in range(x, arr[i] + 1):\n  if gcd(x, y) > 1:\n  count += 1\n  print(count, end = \" \")", "289": "def factorial(n):\n if n == 0:\n return 1\n return n * factorial(n - 1)\n def numOfNecklace(N):\n ans = factorial(N)\n / (factorial(N / 2) * factorial(N / 2))\n ans = ans * factorial(N / 2 - 1)\n ans = ans * factorial(N / 2 - 1)\n ans /= 2\n return ans", "290": "def maxSubArraySumRepeated(arr, n, k):\n  sum = 0\n  for i in range(n):\n  sum += arr[i]\n  ans = arr[0]\n  curr = arr[0]\n  if k == 1:\n  for i in range(1, n):\n  curr = max(arr[i], curr + arr[i])\n  ans = max(ans, curr)\n  return ans\n  V = []\n  for i in range(2 * n):\n  V.append(arr[i % n])\n  maxSuf = V[0]\n  maxPref = V[2 * n - 1]\n  curr = V[0]\n  for i in range(1, 2 * n):\n  curr += V[i]\n  maxPref = max(maxPref, curr)\n  curr = V[2 * n - 1]\n  for i in range(2 * n - 2, -1, -1):\n  curr += V[i]\n  maxSuf = max(maxSuf, curr)\n  curr = V[0]\n  for i in range(1, 2 * n):\n  curr = max(V[i], curr + V[i])\n  ans = max(ans, curr)\n  if sum > 0:\n  temp = sum * (k - 2)\n  ans = max(ans, max(temp + maxPref, temp + maxSuf))\n  return ans", "291": "def ExpoFactorial(N):\n  res = 1\n  mod = 1000000007\n  for i in range(2, N + 1):\n  res = (i ** res) % mod\n  return res", "292": "def rangeSum(arr, N, L, R):\n  prefix = [0] * (N+1)\n  for i in range(1, N+1):\n  prefix[i] = prefix[i-1] + arr[i-1]\n  leftsum = (L-1)//N * prefix[N] + prefix[(L-1)%N]\n  rightsum = (R//N) * prefix[N] + prefix[R%N]\n  print(rightsum - leftsum)", "293": "def rangeSum(arr, N, L, R):\n  sum = 0\n  for i in range(L-1, R):\n  sum += arr[i % N]\n  print(sum)", "294": "def check(N):\n  twos = 0\n  fives = 0\n  while N % 2 == 0:\n  N /= 2\n  twos += 1\n  while N % 5 == 0:\n  N /= 5\n  fives += 1\n  if N == 1 and twos <= fives:\n  print(2 * fives - twos)\n  else:\n  print(-1)", "295": "def getPairsCount(arr, n):\n  count = 0\n  for i in range(n):\n  for j in range(arr[i] - (i % arr[i]), n, arr[i]):\n  if i < j and abs(arr[i] - arr[j]) >= min(arr[i], arr[j]):\n  count += 1\n  return count", "296": "def smallest(k, d):\n  cnt = 1\n  m = d % k\n  v = [0] * k\n  v[m] = 1\n  while True:\n  if m == 0:\n  return cnt\n  m = (((m * (10 % k)) % k) + (d % k)) % k\n  if v[m] == 1:\n  return -1\n  v[m] = 1\n  cnt += 1", "297": "def performQuery(arr, Q):\n for i in range(len(Q)):\n or = 0\n x = Q[i][0]\n arr[x - 1] = Q[i][1]\n for j in range(len(arr)):\n or = or | arr[j]\n print(or)", "298": "def countSubsequences(arr, N):\n  odd = 0\n  for i in range(N):\n  if (arr[i] & 1) % 2 == 1:\n  odd += 1\n  return (1 << odd) - 1", "299": "def chk(n):\n  v = []\n  while n != 0:\n  v.append(n % 2)\n  n = n / 2\n  for i in range(len(v)):\n  if v[i] == 1:\n  return 2 ** i\n  return 0\n \n def sumOfLSB(arr, N):\n  lsb_arr = []\n  for i in range(N):\n  lsb_arr.append(chk(arr[i]))\n  lsb_arr.sort()\n  ans = 0\n  for i in range(N - 1):\n  if i % 2 == 0:\n  ans += lsb_arr[i + 1]\n  print ans", "300": "def polygonArea(X, Y, n):\n area = 0.0\n j = n - 1\n for i in range(0, n):\n area += (X[j] + X[i]) * (Y[j] - Y[i])\n j = i\n return abs(area / 2.0)", "301": "def numberOfSquares(base):\n  base = (base - 2)\n  base = base // 2\n  return base * (base + 1) // 2", "302": "def findRightAngle(A, H):\n  D = H**4 - 16 * A**2\n  if D >= 0:\n  root1 = (H**2 + math.sqrt(D)) / 2\n  root2 = (H**2 - math.sqrt(D)) / 2\n  a = math.sqrt(root1)\n  b = math.sqrt(root2)\n  if b >= a:\n  print(a, b, H)\n  else:\n  print(b, a, H)\n  else:\n  print(-1)", "303": "def numberOfDiagonals(n):\n return n * (n - 3) / 2", "304": "def checkCollision(a, b, c, x, y, radius):\n dist = (abs(a * x + b * y + c)) / (math.sqrt(a * a + b * b))\n if radius == dist:\n print \"Touch\"\n elif radius > dist:\n print \"Intersect\"\n else:\n print \"Outside\"", "305": "def maxSquare(b, m):\n return (b / m - 1) * (b / m) / 2", "306": "def sector_area(radius,angle):\n if angle >= 360:\n print(\"Angle not possible\")\n else:\n sector = ((22 * radius * radius) / 7) * (angle / 360)\n print(sector)", "307": "def arcLength(diameter, angle):\n pi = 22.0 / 7.0\n arc = (pi * diameter) * (angle / 360.0)\n return arc", "308": "def hexagonArea(s):\n return ((3 * math.sqrt(3) *\n (s * s)) / 2)", "309": "def Area(b1, b2, h):\n return ((b1 + b2) / 2) * h", "310": "def volumeTriangular(a, b, h):\n vol = (0.1666) * a * b * h\n return vol\n def volumeSquare(b, h):\n vol = (0.33) * b * b * h\n return vol\n def volumePentagonal(a, b, h):\n vol = (0.83) * a * b * h\n return vol\n def volumeHexagonal(a, b, h):\n vol = a * b * h\n return vol", "311": "def maxvolume(s):\n length = s / 3\n s -= length\n breadth = s / 2\n height = s - breadth\n return length * breadth * height", "312": "def maxvolume(s):\n maxvalue = 0\n for i in range(1, s - 1):\n for j in range(1, s):\n k = s - i - j\n maxvalue = max(maxvalue, i * j * k)\n return maxvalue", "313": "def midpoint(x1, x2, y1, y2):\n print((x1 + x2) / 2, (y1 + y2) / 2)", "314": "def area_of_segment(radius, angle):\n  area_of_sector = pi * (radius ** 2) * (angle / 360)\n  area_of_triangle = (1 / 2) * (radius ** 2) * (sin(angle * pi / 180))\n  return area_of_sector - area_of_triangle", "315": "def isRectangle(a, b, c, d):\n if a == b and a == c and a == d and c == d and b == c and b == d:\n return True\n elif a == b and c == d:\n return True\n elif a == d and c == b:\n return True\n elif a == c and d == b:\n return True\n else:\n return False", "316": "def findPCSlope(m):\n return -1.0 / m", "317": "def findVolume(l, b, h):\n volume = (l * b * h) / 2\n return volume", "318": "def shortest_distance(x1, y1, z1, a, b, c, d):\n  d = abs((a * x1 + b * y1 + c * z1 + d))\n  e = (a * a + b * b + c * c) ** 0.5\n  print(\"Perpendicular distance is\", d / e)", "319": "def distance(a1, b1, c1, d1, a2, b2, c2, d2):\n  if a1 / a2 == b1 / b2 and b1 / b2 == c1 / c2:\n  x1 = y1 = z1 = 0\n  d = abs((c2 * z1 + d2)) / (math.sqrt(a2 * a2 + b2 * b2 + c2 * c2))\n  print(\"Perpendicular distance is \" + str(d))\n  else:\n  print(\"Planes are not parallel\")", "320": "def FindPoint(x1, y1, x2, y2, x, y):\n if (x > x1 and x < x2 and y > y1 and y < y2):\n return True\n return False", "321": "def LiesInsieRectangle(a, b, x, y):\n if (x - y - b <= 0 and x - y + b >= 0 and x + y - 2 * a + b <= 0 and x + y - b >= 0):\n return True\n return False", "322": "def is_partition_possible(n, x, y, w):\n weight_at_x = {}\n max_x = -2e3\n min_x = 2e3\n for i in range(n):\n new_x = x[i] - y[i]\n max_x = max(max_x, new_x)\n min_x = min(min_x, new_x)\n if new_x in weight_at_x:\n weight_at_x[new_x] += w[i]\n else:\n weight_at_x[new_x] = w[i]\n sum_till = [0]\n for s in range(min_x, max_x + 1):\n if s in weight_at_x:\n sum_till.append(sum_till[-1] + weight_at_x[s])\n else:\n sum_till.append(sum_till[-1])\n total_sum = sum_till[-1]\n partition_possible = 0\n for i in range(1, len(sum_till)):\n if sum_till[i] == total_sum - sum_till[i]:\n partition_possible = 1\n if sum_till[i-1] == total_sum - sum_till[i]:\n partition_possible = 1\n print(\"YES\" if partition_possible == 1 else \"NO\")", "323": "def longestRodInCuboid(length, breadth, height):\n temp = length * length + breadth * breadth + height * height\n result = math.sqrt(temp)\n return result", "324": "def area(a):\n  if a < 0:\n  return -1\n  area = (float(math.sqrt(a)) / 6)\n  return area", "325": "def rhombusarea(l, b):\n if l < 0 or b < 0:\n return -1\n return (l * b) / 2", "326": NaN}}, "Python-Java": {"id": {"0": 13141, "1": 13140, "2": 13049, "3": 13048, "4": 13040, "5": 13022, "6": 12991, "7": 12983, "8": 12971, "9": 12970, "10": 12906, "11": 12905, "12": 12895, "13": 12891, "14": 12855, "15": 12844, "16": 12842, "17": 12810, "18": 12799, "19": 12794, "20": 12765, "21": 12764, "22": 12750, "23": 12747, "24": 12745, "25": 12716, "26": 12715, "27": 12714, "28": 12686, "29": 12646, "30": 12645, "31": 12639, "32": 12638, "33": 12615, "34": 12604, "35": 12603, "36": 12587, "37": 12564, "38": 12561, "39": 12550, "40": 12548, "41": 12547, "42": 12533, "43": 12532, "44": 12523, "45": 12520, "46": 12496, "47": 12486, "48": 12485, "49": 12462}, "Python": {"0": "def sieve(n):\n        prime = [True] * (n + 1);\n        p = 2;\n        while (p * p <= n):\n                if (prime[p] == True):\n                        for i in range(p * 2, n + 1, p):\n                                prime[i] = False;\n                p += 1;\n        for p in range(2, n + 1):\n                if (prime[p]):\n                        allPrimes.append(p);\ndef factorialDivisors(n):\n        result = 1;\n        for i in range(len(allPrimes)):\n                p = allPrimes[i];\n                exp = 0;\n                while (p <= n):\n                        exp = exp + int(n / p);\n                        p = p * allPrimes[i];\n                result = int(result * (pow(allPrimes[i], exp + 1) - 1) /\n                                                                                (allPrimes[i] - 1));\n        return result;", "1": "def fact(n):\n        if (n == 0):\n                return 1\n        return n * fact(n - 1)\ndef div(x):\n        ans = 0;\n        for i in range(1, x + 1):\n                if (x % i == 0):\n                        ans += i\n        return ans\ndef sumFactDiv(n):\n        return div(fact(n))", "2": "def sieveOfEratostheneses():\n        isPrime[1] = False\n        i = 2\n        while i * i < 100005:\n                if(isPrime[i]):\n                        j = 2 * i\n                        while j < 100005:\n                                isPrime[j] = False\n                                j += i\n                i += 1\n        return\ndef findPrime(n):\n        num = n + 1\n        while(num):\n                if isPrime[num]:\n                        return num\n                num += 1\n        return 0\ndef minNumber(arr):\n        sieveOfEratostheneses()\n        s = 0\n        for i in range(0, len(arr)):\n                s += arr[i]\n        if isPrime[s] == True:\n                return 0\n        num = findPrime(s)\n        return num - s", "3": "def isPrime(n):\n        if n <= 1:\n                return False\n        for i in range(2, n):\n                if n % i == 0:\n                        return False\n        return True\ndef findPrime(n):\n        num = n + 1\n        while (num):\n                if isPrime(num):\n                        return num\n                num += 1\n        return 0\ndef minNumber(arr):\n        s = 0\n        for i in range(0, len(arr)):\n                s += arr[i]\n        if isPrime(s) :\n                return 0\n        num = findPrime(s)\n        return num - s", "4": "def countConsecutive(N):\n        count = 0\n        L = 1\n        while( L * (L + 1) < 2 * N):\n                a = (1.0 * N - (L * (L + 1) ) / 2) / (L + 1)\n                if (a - int(a) == 0.0):\n                        count += 1\n                L += 1\n        return count", "5": "def area_fun(side):\n        area = side * side\n        return area", "6": "def isComposite(n):\n        if (n <= 1):\n                return False\n        if (n <= 3):\n                return False\n        if (n % 2 == 0 or n % 3 == 0):\n                return True\n        i = 5\n        while(i * i <= n):\n                if (n % i == 0 or n % (i + 2) == 0):\n                        return True\n                i = i + 6\n        return False", "7": "def printTaxicab2(N):\n        i, count = 1, 0\n        while (count < N):\n                int_count = 0\n                for j in range(1, math.ceil(\\\n                                pow(i, 1.0 / 3)) + 1):\n                        for k in range(j + 1,\\\n                        math.ceil(pow(i, 1.0 / 3)) + 1):\n                                if (j * j * j + k * k * k == i):\n                                        int_count += 1\n                if (int_count == 2):\n                        count += 1\n                        print(count, \" \", i)\n                i += 1", "8": "def SieveOfEratosthenes(largest, prime):\n        isPrime = [True] * (largest + 1)\n        p = 2\n        while p * p <= largest:\n                if (isPrime[p] == True):\n                        for i in range(p * 2, largest + 1, p):\n                                isPrime[i] = False\n                p += 1\n        for p in range(2, largest + 1):\n                if (isPrime[p]):\n                        prime.append(p)\ndef countDivisorsMult(arr, n):\n        largest = max(arr)\n        prime = []\n        SieveOfEratosthenes(largest, prime)\n        mp = defaultdict(int)\n        for i in range(n):\n                for j in range(len(prime)):\n                        while(arr[i] > 1 and arr[i] % prime[j] == 0):\n                                arr[i] //= prime[j]\n                                mp[prime[j]] += 1\n                if (arr[i] != 1):\n                        mp[arr[i]] += 1\n        res = 1\n        for it in mp.values():\n                res *= (it + 1)\n        return res", "9": "def counDivisors(X):\n        count = 0\n        for i in range(1, X + 1):\n                if (X % i == 0):\n                        count += 1\n        return count\ndef countDivisorsMult(arr, n):\n        mul = 1\n        for i in range(n):\n                mul *= arr[i]\n        return counDivisors(mul)", "10": "def ispowerof2(num):\n        if((num & (num - 1)) == 0):\n                return 1\n        return 0\n", "11": "def isPowerOf2(sttr):\n        len_str = len(sttr);\n        sttr=list(sttr);\n        num = 0;\n        if (len_str == 1 and sttr[len_str - 1] == '1'):\n                return 0;\n        while (len_str != 1 or sttr[len_str - 1] != '1'):\n                if ((ord(sttr[len_str - 1]) - ord('0')) % 2 == 1):\n                        return 0;\n                j = 0;\n                for i in range(len_str):\n                        num = num * 10 + (ord(sttr[i]) - ord('0'));\n                        if (num < 2):\n                                if (i != 0):\n                                        sttr[j] = '0';\n                                        j += 1;\n                                continue;\n                        sttr[j] = chr((num // 2) + ord('0'));\n                        j += 1;\n                        num = (num) - (num // 2) * 2;\n                len_str = j;\n        return 1;", "12": "def horner( poly, n, x):\n        result = poly[0];\n        for i in range(1,n):\n                result = (result * x + poly[i]);\n        return result;\ndef findSign(poly, n, x):\n        result = horner(poly, n, x);\n        if (result > 0):\n                return 1;\n        elif (result < 0):\n                return -1;\n        return 0;", "13": "def calculate_sum(a, N):\n        m = N / a\n        sum = m * (m + 1) / 2\n        ans = a * sum\n        print(\"Sum of multiples of \", a, \" up to \", N, \" = \", ans)", "14": "def prevNum(string, n):\n        index = -1\n        for i in range(n - 2, -1, -1):\n                if int(string[i]) > int(string[i + 1]):\n                        index = i\n                        break\n        smallGreatDgt = -1\n        for i in range(n - 1, index, -1):\n                if (smallGreatDgt == -1 and int(string[i]) <\n                                                                        int(string[index])):\n                        smallGreatDgt = i\n                elif (index > -1 and int(string[i]) >=\n                                                        int(string[smallGreatDgt]) and\n                                                        int(string[i]) < int(string[index])):\n                        smallGreatDgt = i\n        if index == -1:\n                return \"\" . join(\"-1\")\n        else:\n                (string[index], string[smallGreatDgt]) = (string[smallGreatDgt], string[index])\n        return \"\" . join(string)", "15": "def max_area(n,m,k):\n        if (k > (n + m - 2)):\n                print(\"Not possible\")\n        else:\n                if (k < max(m,n) - 1):\n                        result = max(m * (n / (k + 1)), n * (m / (k + 1)));\n                else:\n                        result = max(m / (k - n + 2), n / (k - m + 2));\n                print(result)", "16": NaN, "17": "def avgOfFirstN(n) :\n        return (float)(1 + n) / 2;", "18": "def sn(n, an):\n        return (n * (1 + an)) / 2;\ndef trace(n, m):\n        an = 1 + (n - 1) * (m + 1);\n        rowmajorSum = sn(n, an);\n        an = 1 + (n - 1) * (n + 1);\n        colmajorSum = sn(n, an);\n        return int(rowmajorSum + colmajorSum);", "19": "def Convert(radian):\n        pi = 3.14159\n        degree = radian * (180/pi)\n        return degree", "20": "def counLastDigitK(low, high, k):\n        mlow = 10 * math.ceil(low/10.0)\n        mhigh = 10 * int(high/10.0)\n        count = (mhigh - mlow)/10\n        if (high % 10 >= k):\n                count += 1\n        if (low % 10 <= k and \\\n                (low%10) > 0):\n                count += 1\n        return int(count)", "21": "def counLastDigitK(low, high, k):\n        count = 0\n        for i in range(low, high+1):\n                if (i % 10 == k):\n                        count+=1\n        return count", "22": "def gcd (a, b):\n        if a == 0 or b == 0:\n                return 0\n        if a == b:\n                return a\n        if a > b:\n                return gcd(a - b, b)\n        return gcd(a, b - a)\ndef cpFact(x, y):\n        while gcd(x, y) != 1:\n                x = x / gcd(x, y)\n        return int(x)", "23": "def sumOfLargePrimeFactor( n ):\n        prime = [0] * (n + 1)\n        sum = 0\n        max = int(n / 2)\n        for p in range(2, max + 1):\n                if prime[p] == 0:\n                        for i in range(p * 2, n + 1, p):\n                                prime[i] = p\n        for p in range(2, n + 1):\n                if prime[p]:\n                        sum += prime[p]\n                else:\n                        sum += p\n        return sum", "24": "def isPrime( n ):\n        if n <= 1:\n                return False\n        for i in range(2, n):\n                if n % i == 0:\n                        return False\n        return True\ndef isEmirp( n):\n        n = int(n)\n        if isPrime(n) == False:\n                return False\n        rev = 0\n        while n != 0:\n                d = n % 10\n                rev = rev * 10 + d\n                n = int(n / 10)\n        return isPrime(rev)", "25": "def Series(n):\n        sums = 0\n        for i in range(1, n + 1):\n                sums += (i * i);\n        return sums", "26": "def TrinomialValue(dp , n , k):\n        if k < 0:\n                k = -k\n        if dp[n][k] != 0:\n                return dp[n][k]\n        if n == 0 and k == 0:\n                return 1\n        if k < -n or k > n:\n                return 0\n        return (TrinomialValue(dp, n - 1, k - 1) +\n                                TrinomialValue(dp, n - 1, k)+\n                                        TrinomialValue(dp, n - 1, k + 1))\ndef printTrinomial(n):\n        dp = [[0]*10]*10\n        for i in range(n):\n                for j in range(-i,1):\n                        print(TrinomialValue(dp, i, j),end=\" \")\n                for j in range(1,i+1):\n                        print(TrinomialValue(dp, i, j),end=\" \")\n                print(\"\\n\",end='')", "27": "def TrinomialValue(n, k):\n        if n == 0 and k == 0:\n                return 1\n        if k < -n or k > n:\n                return 0\n        return (TrinomialValue (n - 1, k - 1)+\n                                TrinomialValue (n - 1, k)+\n                                                TrinomialValue (n - 1, k + 1))\ndef printTrinomial( n ):\n        for i in range(n):\n                for j in range(-i, 1):\n                        print(TrinomialValue(i, j),end=\" \")\n                for j in range(1, i+1):\n                        print( TrinomialValue(i, j),end=\" \")\n                print(\"\\n\",end='')", "28": "def lcm(a, b):\n        return (a * b) // (math.gcd(a, b))\ndef maxRational(first, sec):\n        k = lcm(first[1], sec[1])\n        nume1 = first[0]\n        nume2 = sec[0]\n        nume1 *= k // (first[1])\n        nume2 *= k // (sec[1])\n        return first if (nume2 < nume1) else sec", "29": "def averageOdd(n) :\n        if (n % 2 == 0) :\n                print(\"Invalid Input\")\n                return -1\n        return (n + 1) // 2", "30": "def averageOdd(n) :\n        if (n % 2 == 0) :\n                print(\"Invalid Input\")\n                return -1\n        sm = 0\n        count = 0\n        while (n >= 1) :\n                count = count + 1\n                sm = sm + n\n                n = n - 2\n        return sm // count", "31": "def averageEven(n) :\n        if (n % 2 != 0) :\n                print(\"Invalid Input\")\n                return -1\n        return (n + 2) // 2", "32": "def averageEven(n) :\n        if (n % 2 != 0) :\n                print(\"Invalid Input\")\n                return -1\n        sm = 0\n        count = 0\n        while (n >= 2) :\n                count = count + 1\n                sm = sm + n\n                n = n - 2\n        return sm // count", "33": "def fib(f, N):\n        f[1] = 1\n        f[2] = 1\n        for i in range(3, N + 1):\n                f[i] = f[i - 1] + f[i - 2]\ndef fiboTriangle(n):\n        N = n * (n + 1) // 2\n        f = [0] * (N + 1)\n        fib(f, N)\n        fiboNum = 1\n        for i in range(1, n + 1):\n                for j in range(1, i + 1):\n                        print(f[fiboNum], \" \", end=\"\")\n                        fiboNum = fiboNum + 1\n                print()", "34": "def avg_of_odd_num(n) :\n        return n", "35": "def avg_of_odd_num(n) :\n        sm = 0\n        for i in range(0, n) :\n                sm = sm + (2 * i + 1)\n        return sm//n", "36": "def Div_by_8(n):\n        return (((n >> 3) << 3) == n)", "37": "def digitNumber(n):\n        if (n == 0):\n                return 1\n        if (n == 1):\n                return 9\n        if (n % 2!=0):\n                temp = digitNumber((n - 1) // 2) % mod\n                return (9 * (temp * temp) % mod) % mod\n        else:\n                temp = digitNumber(n // 2) % mod\n                return (temp * temp) % mod\ndef countExcluding(n,d):\n        if (d == 0):\n                return (9 * digitNumber(n - 1)) % mod\n        else:\n                return (8 * digitNumber(n - 1)) % mod", "38": "def power(n, r):\n        count = 0; i = r\n        while((n / i) >= 1):\n                count += n / i\n                i = i * r\n        return int(count)", "39": "def checkdigit(n, k):\n        while (n):\n                rem = n % 10\n                if (rem == k):\n                        return 1\n                n = n / 10\n        return 0\ndef findNthNumber(n, k):\n        i = k + 1\n        count = 1\n        while(count < n):\n                if (checkdigit(i, k) or (i % k == 0)):\n                        count += 1\n                if (count == n):\n                        return i\n                i += 1\n        return -1", "40": "def seiresSum(n, a):\n        return (n * (a[0] * a[0] - a[2 * n - 1] * a[2 * n - 1]) / (2 * n - 1))", "41": "def seiresSum(n, a):\n        res = 0\n        for i in range(0, 2 * n):\n                if (i % 2 == 0):\n                        res += a[i] * a[i]\n                else:\n                        res -= a[i] * a[i]\n        return res", "42": "def series(A, X, n):\n        term = pow(A, n)\n        print(term, end = \" \")\n        for i in range(1, n+1):\n                term = int(term * X * (n - i + 1)/(i * A))\n                print(term, end = \" \")", "43": "def factorial(n):\n        f = 1\n        for i in range(2, n+1):\n                f *= i\n        return f\ndef series(A, X, n):\n        nFact = factorial(n)\n        for i in range(0, n + 1):\n                niFact = factorial(n - i)\n                iFact = factorial(i)\n                aPow = pow(A, n - i)\n                xPow = pow(X, i)\n                print (int((nFact * aPow * xPow) /\n                                (niFact * iFact)), end = \" \")", "44": "def pythagoreanTriplet(n):\n        for i in range(1, int(n / 3) + 1):\n                for j in range(i + 1,\n                                        int(n / 2) + 1):\n                        k = n - i - j\n                        if (i * i + j * j == k * k):\n                                print(i, \", \", j, \", \", k, sep = \"\")\n                                return\n        print(\"No Triplet\")", "45": "def isUndulating(n):\n        if (len(n) <= 2):\n                return False\n        for i in range(2, len(n)):\n                if (n[i - 2] != n[i]):\n                        return False\n        return True", "46": "def possibleToReach(a, b):\n        c = np.cbrt(a * b)\n        re1 = a // c\n        re2 = b // c\n        if ((re1 * re1 * re2 == a) and\n                (re2 * re2 * re1 == b)):\n                return True\n        else:\n                return False", "47": "def possibleTripletInRange(L, R):\n        flag = False;\n        possibleA = 0;\n        possibleB = 0;\n        possibleC = 0;\n        numbersInRange = (R - L + 1);\n        if (numbersInRange < 3):\n                flag = False;\n        elif (numbersInRange > 3):\n                flag = True;\n                if ((L % 2) > 0):\n                        L += 1;\n                possibleA = L;\n                possibleB = L + 1;\n                possibleC = L + 2;\n        else:\n                if ((L % 2) == 0):\n                        flag = True;\n                        possibleA = L;\n                        possibleB = L + 1;\n                        possibleC = L + 2;\n                else:\n                        flag = False;\n        if (flag == True):\n                print(\"(\", possibleA, \",\", possibleB, \",\", possibleC, \") is one such\", \"possible triplet between\", L, \"and\", R);\n        else:\n                print(\"No Such Triplet exists between\", L, \"and\", R);", "48": "def gcd(a, b):\n        if (a == 0):\n                return b;\n        return gcd(b % a, a);\ndef coprime(a, b):\n        return (gcd(a, b) == 1);\ndef possibleTripletInRange(L, R):\n        flag = False;\n        possibleA = 0;\n        possibleB = 0;\n        possibleC = 0;\n        for a in range(L, R + 1):\n                for b in range(a + 1, R + 1):\n                        for c in range(b + 1, R + 1):\n                                if (coprime(a, b) and coprime(b, c) and        \n                                                                        coprime(a, c) == False):\n                                        flag = True;\n                                        possibleA = a;\n                                        possibleB = b;\n                                        possibleC = c;\n                                        break;\n        if (flag == True):\n                print(\"(\", possibleA, \",\", possibleB, \",\", possibleC, \") is one such\", \"possible triplet between\", L, \"and\", R);\n        else:\n                print(\"No Such Triplet exists between\", L, \"and\", R);", "49": "def fact(n):\n        if (n == 0 or n == 1):\n                return 1;\n        ans = 1;\n        for i in range(1, n + 1):\n                ans = ans * i;\n        return ans;\ndef nCr(n, r):\n        Nr = n ; Dr = 1 ; ans = 1;\n        for i in range(1, r + 1):\n                ans = int((ans * Nr) / (Dr));\n                Nr = Nr - 1;\n                Dr = Dr + 1;\n        return ans;\ndef solve ( n ):\n        N = 2* n - 2;\n        R = n - 1 ;\n        return (nCr (N, R) *\n                        fact(n - 1));"}, "Java": {"0": "public static int factorialDivisors(int n) {\r\n        int result = 1;\r\n        for (int i = 0; i < allPrimes.length; i++) {\r\n                int p = allPrimes[i];\r\n                int exp = 0;\r\n                while (p <= n) {\r\n                        exp = exp + (int) (n / p);\r\n                        p = p * allPrimes[i];\r\n                }\r\n                result = (int) (result * (pow(allPrimes[i], exp + 1) - 1) /\r\n                                                                                (allPrimes[i] - 1));\r\n        }\r\n        return result;\r\n}", "1": "public int fact(int n) {\r\n        if (n == 0) {\r\n                return 1;\r\n        }\r\n        return n * fact(n - 1);\r\n}\r\npublic int div(int x) {\r\n        int ans = 0;\r\n        for (int i = 1; i <= x; i++) {\r\n                if (x % i == 0) {\r\n                        ans += i;\r\n                }\r\n        }\r\n        return ans;\r\n}\r\npublic int sumFactDiv(int n) {\r\n        return div(fact(n));\r\n}", "2": "public class Solution {\n    public int minNumber(int[] arr) {\n        boolean[] isPrime = new boolean[1000005];\n        isPrime[1] = false;\n        int i = 2;\n        while (i * i < 100005) {\n            if (isPrime[i]) {\n                int j = 2 * i;\n                while (j < 100005) {\n                    isPrime[j] = false;\n                    j += i;\n                }\n            }\n            i++;\n        }\n        int s = 0;\n        for (int i = 0; i < arr.length; i++) {\n            s += arr[i];\n        }\n        if (isPrime[s] == true) {\n            return 0;\n        }\n        int num = findPrime(s);\n        return num - s;\n    }\n    public int findPrime(int n) {\n        int num = n + 1;\n        while (num) {\n            if (isPrime[num]) {\n                return num;\n            }\n            num++;\n        }\n        return 0;\n    }\n}", "3": "public class Solution {\r\n    public int minNumber(int[] arr) {\r\n        int sum = 0;\r\n        for (int i = 0; i < arr.length; i++) {\r\n            sum += arr[i];\r\n        }\r\n        if (isPrime(sum)) {\r\n            return 0;\r\n        }\r\n        int num = findPrime(sum);\r\n        return num - sum;\r\n    }\r\n    public boolean isPrime(int n) {\r\n        if (n <= 1) {\r\n            return false;\r\n        }\r\n        for (int i = 2; i < n; i++) {\r\n            if (n % i == 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    public int findPrime(int n) {\r\n        int num = n + 1;\r\n        while (num) {\r\n            if (isPrime(num)) {\r\n                return num;\r\n            }\r\n            num++;\r\n        }\r\n        return 0;\r\n    }\r\n}", "4": "public int countConsecutive(int N) {\n        int count = 0;\n        int L = 1;\n        while( L * (L + 1) < 2 * N) {\n                double a = (1.0 * N - (L * (L + 1) ) / 2) / (L + 1);\n                if (a - (int)a == 0.0) {\n                        count++;\n                }\n                L++;\n        }\n        return count;\n}", "5": "public static double area_fun(double side) {\r\n        double area = side * side;\r\n        return area;\r\n}", "6": "public static boolean isComposite(int n) {\r\n        if (n <= 1) {\r\n                return false;\r\n        }\r\n        if (n <= 3) {\r\n                return false;\r\n        }\r\n        if (n % 2 == 0 || n % 3 == 0) {\r\n                return true;\r\n        }\r\n        int i = 5;\r\n        while (i * i <= n) {\r\n                if (n % i == 0 || n % (i + 2) == 0) {\r\n                        return true;\r\n                }\r\n                i = i + 6;\r\n        }\r\n        return false;\r\n}", "7": "public static void printTaxicab2(int N) {\r\n        int i = 1, count = 0;\r\n        while (count < N) {\r\n                int int_count = 0;\r\n                for (int j = 1; j <= Math.ceil(\\\r\n                                Math.pow(i, 1.0 / 3)) + 1; j++) {\r\n                        for (int k = j + 1; k <=\\\r\n                        Math.ceil(Math.pow(i, 1.0 / 3)) + 1; k++) {\r\n                                if (j * j * j + k * k * k == i) {\r\n                                        int_count += 1;\r\n                                }\r\n                        }\r\n                }\r\n                if (int_count == 2) {\r\n                        count++;\r\n                        System.out.println(count + \" \" + i);\r\n                }\r\n                i++;\r\n        }\r\n}", "8": "public static int countDivisorsMult(int[] arr, int n) {\r\n        int largest = 0;\r\n        int prime[] = new int[n];\r\n        Arrays.fill(prime, 0);\r\n        for (int i = 0; i < n; i++) {\r\n                largest = Math.max(largest, arr[i]);\r\n        }\r\n        SieveOfEratosthenes(largest, prime);\r\n        Map<Integer, Integer> mp = new HashMap<>();\r\n        for (int i = 0; i < n; i++) {\r\n                for (int j = 0; j < prime.length; j++) {\r\n                        while (arr[i] > 1 && arr[i] % prime[j] == 0) {\r\n                                arr[i] /= prime[j];\r\n                                mp.put(prime[j], mp.getOrDefault(prime[j], 0) + 1);\r\n                        }\r\n                }\r\n                if (arr[i] != 1) {\r\n                        mp.put(arr[i], mp.getOrDefault(arr[i], 0) + 1);\r\n                }\r\n        }\r\n        int res = 1;\r\n        for (int it : mp.values()) {\r\n                res *= (it + 1);\r\n        }\r\n        return res;\r\n}", "9": "public static int countDivisors(int X) {\r\n        int count = 0;\r\n        for (int i = 1; i <= X; i++) {\r\n                if (X % i == 0) {\r\n                        count++;\r\n                }\r\n        }\r\n        return count;\r\n}\r\npublic static int countDivisorsMult(int[] arr, int n) {\r\n        int mul = 1;\r\n        for (int i = 0; i < n; i++) {\r\n                mul *= arr[i];\r\n        }\r\n        return countDivisors(mul);\r\n}", "10": "public static boolean isPowerOf2(int num) {\r\n        if((num & (num - 1)) == 0) {\r\n                return 1;\r\n        }\r\n        return 0;\r\n}", "11": "public static boolean isPowerOf2(String str) {\n        int len_str = str.length();\n        char[] sttr = str.toCharArray();\n        int num = 0;\n        if (len_str == 1 && sttr[len_str - 1] == '1') {\n                return false;\n        }\n        while (len_str != 1 || sttr[len_str - 1] != '1') {\n                if ((sttr[len_str - 1] - '0') % 2 == 1) {\n                        return false;\n                }\n                int j = 0;\n                for (int i = 0; i < len_str; i++) {\n                        num = num * 10 + (sttr[i] - '0');\n                        if (num < 2) {\n                                if (i != 0) {\n                                        sttr[j] = '0';\n                                        j++;\n                                }\n                                continue;\n                        }\n                        sttr[j] = (char)((num / 2) + '0');\n                        j++;\n                        num = num - (num / 2) * 2;\n                }\n                len_str = j;\n        }\n        return true;\n}", "12": "public static int findSign(int[] poly, int n, int x) {\n        int result = horner(poly, n, x);\n        if (result > 0) {\n                return 1;\n        } else if (result < 0) {\n                return -1;\n        }\n        return 0;\n}", "13": "public static void calculate_sum(int a, int N) {\r\n        int m = N / a;\r\n        int sum = m * (m + 1) / 2;\r\n        int ans = a * sum;\r\n        System.out.println(\"Sum of multiples of \" + a + \" up to \" + N + \" = \" + ans);\r\n    }", "14": "public static String prevNum(String string, int n) {\r\n        int index = -1;\r\n        for (int i = n - 2; i >= 0; i--) {\r\n                if (Integer.parseInt(string.charAt(i) + \"\") > Integer.parseInt(string.charAt(i + 1) + \"\")) {\r\n                        index = i;\r\n                        break;\r\n                }\r\n        }\r\n        int smallGreatDgt = -1;\r\n        for (int i = n - 1; i > index; i--) {\r\n                if (smallGreatDgt == -1 && Integer.parseInt(string.charAt(i) + \"\") < Integer.parseInt(string.charAt(index) + \"\")) {\r\n                        smallGreatDgt = i;\r\n                } else if (index > -1 && Integer.parseInt(string.charAt(i) + \"\") >= Integer.parseInt(string.charAt(smallGreatDgt) + \"\") && Integer.parseInt(string.charAt(i) + \"\") < Integer.parseInt(string.charAt(index) + \"\")) {\r\n                        smallGreatDgt = i;\r\n                }\r\n        }\r\n        if (index == -1) {\r\n                return \"-1\";\r\n        } else {\r\n                char temp = string.charAt(index);\r\n                string = string.substring(0, index) + string.charAt(smallGreatDgt) + string.substring(index + 1);\r\n                string = string.substring(0, smallGreatDgt) + temp + string.substring(smallGreatDgt + 1);\r\n        }\r\n        return string;\r\n}", "15": "public static void max_area(int n, int m, int k) {\r\n        if (k > (n + m - 2)) {\r\n                System.out.println(\"Not possible\");\r\n        } else {\r\n                if (k < Math.max(m, n) - 1) {\r\n                        System.out.println(Math.max(m * (n / (k + 1)), n * (m / (k + 1))));\r\n                } else {\r\n                        System.out.println(Math.max(m / (k - n + 2), n / (k - m + 2)));\r\n                }\r\n        }\r\n}", "16": NaN, "17": "public static double avgOfFirstN(int n) {\r\n    return (double)(1 + n) / 2;\r\n}", "18": "public static int trace(int n, int m) {\r\n        double an = 1 + (n - 1) * (m + 1);\r\n        double rowmajorSum = sn(n, an);\r\n        an = 1 + (n - 1) * (n + 1);\r\n        double colmajorSum = sn(n, an);\r\n        return (int) (rowmajorSum + colmajorSum);\r\n}", "19": "public static double Convert(double radian) {\r\n    double pi = 3.14159;\r\n    double degree = radian * (180/pi);\r\n    return degree;\r\n}", "20": "public int countLastDigitK(int low, int high, int k) {\r\n        int mlow = (int) Math.ceil(low/10.0);\r\n        int mhigh = (int) Math.ceil(high/10.0);\r\n        int count = (mhigh - mlow)/10;\r\n        if (high % 10 >= k) {\r\n                count++;\r\n        }\r\n        if (low % 10 <= k && low % 10 > 0) {\r\n                count++;\r\n        }\r\n        return count;\r\n}", "21": "public static int countLastDigitK(int low, int high, int k) {\r\n        int count = 0;\r\n        for (int i = low; i <= high; i++) {\r\n                if (i % 10 == k) {\r\n                        count++;\r\n                }\r\n        }\r\n        return count;\r\n}", "22": "public static int gcd(int a, int b) {\r\n        if (a == 0 || b == 0) {\r\n                return 0;\r\n        }\r\n        if (a == b) {\r\n                return a;\r\n        }\r\n        if (a > b) {\r\n                return gcd(a - b, b);\r\n        }\r\n        return gcd(a, b - a);\r\n}\r\n\r\npublic static int cpFact(int x, int y) {\r\n        while (gcd(x, y) != 1) {\r\n                x = x / gcd(x, y);\r\n        }\r\n        return x;\r\n}", "23": "public class SumOfLargePrimeFactor {\r\n    public static void main(String[] args) {\r\n        int n = 100;\r\n        int sum = 0;\r\n        int max = n / 2;\r\n        boolean[] prime = new boolean[n + 1];\r\n        for (int p = 2; p <= max; p++) {\r\n            if (!prime[p]) {\r\n                for (int i = p * 2; i <= n; i += p) {\r\n                    prime[i] = true;\r\n                }\r\n            }\r\n        }\r\n        for (int p = 2; p <= n; p++) {\r\n            if (!prime[p]) {\r\n                sum += p;\r\n            }\r\n        }\r\n        System.out.println(sum);\r\n    }\r\n}", "24": "public static boolean isPrime(int n) {\r\n        if (n <= 1) {\r\n                return false;\r\n        }\r\n        for (int i = 2; i < n; i++) {\r\n                if (n % i == 0) {\r\n                        return false;\r\n                }\r\n        }\r\n        return true;\r\n}\r\npublic static boolean isEmirp(int n) {\r\n        if (isPrime(n) == false) {\r\n                return false;\r\n        }\r\n        int rev = 0;\r\n        while (n != 0) {\r\n                int d = n % 10;\r\n                rev = rev * 10 + d;\r\n                n = n / 10;\r\n        }\r\n        return isPrime(rev);\r\n}", "25": "public static int Series(int n) {\r\n        int sums = 0;\r\n        for (int i = 1; i <= n; i++) {\r\n                sums += (i * i);\r\n        }\r\n        return sums;\r\n}", "26": "public static int TrinomialValue(int dp[][], int n, int k) {\r\n        if (k < 0)\r\n                k = -k;\r\n        if (dp[n][k] != 0)\r\n                return dp[n][k];\r\n        if (n == 0 && k == 0)\r\n                return 1;\r\n        if (k < -n || k > n)\r\n                return 0;\r\n        return (TrinomialValue(dp, n - 1, k - 1) +\r\n                                TrinomialValue(dp, n - 1, k) +\r\n                                        TrinomialValue(dp, n - 1, k + 1));\r\n}\r\npublic static void printTrinomial(int n) {\r\n        int dp[][] = new int[10][10];\r\n        for (int i = 0; i < n; i++) {\r\n                for (int j = -i; j < 1; j++)\r\n                        System.out.print(TrinomialValue(dp, i, j) + \" \");\r\n                for (int j = 1; j <= i; j++)\r\n                        System.out.print(TrinomialValue(dp, i, j) + \" \");\r\n                System.out.println();\r\n        }\r\n}", "27": "public static int TrinomialValue(int n, int k) {\r\n        if (n == 0 && k == 0) {\r\n                return 1;\r\n        }\r\n        if (k < -n || k > n) {\r\n                return 0;\r\n        }\r\n        return (TrinomialValue(n - 1, k - 1) +\r\n                                TrinomialValue(n - 1, k) +\r\n                                                TrinomialValue(n - 1, k + 1));\r\n}\r\npublic static void printTrinomial(int n) {\r\n        for (int i = 0; i < n; i++) {\r\n                for (int j = -i; j < 1; j++) {\r\n                        System.out.print(TrinomialValue(i, j) + \" \");\r\n                }\r\n                for (int j = 1; j < i + 1; j++) {\r\n                        System.out.print(TrinomialValue(i, j) + \" \");\r\n                }\r\n                System.out.println();\r\n        }\r\n}", "28": "public static int gcd(int a, int b) {\n        if (b == 0) {\n                return a;\n        }\n        return gcd(b, a % b);\n}\npublic static int lcm(int a, int b) {\n        return a * b / gcd(a, b);\n}\npublic static int maxRational(int[] first, int[] sec) {\n        int k = lcm(first[1], sec[1]);\n        int nume1 = first[0];\n        int nume2 = sec[0];\n        nume1 *= k / first[1];\n        nume2 *= k / sec[1];\n        return first[0] > sec[0] ? first : sec;\n}", "29": "public static int averageOdd(int n) {\r\n        if (n % 2 == 0) {\r\n                System.out.println(\"Invalid Input\");\r\n                return -1;\r\n        }\r\n        return (n + 1) / 2;\r\n}", "30": "public static int averageOdd(int n) {\r\n        if (n % 2 == 0) {\r\n                System.out.println(\"Invalid Input\");\r\n                return -1;\r\n        }\r\n        int sm = 0;\r\n        int count = 0;\r\n        while (n >= 1) {\r\n                count = count + 1;\r\n                sm = sm + n;\r\n                n = n - 2;\r\n        }\r\n        return sm / count;\r\n}", "31": "public static int averageEven(int n) {\r\n        if (n % 2 != 0) {\r\n                System.out.println(\"Invalid Input\");\r\n                return -1;\r\n        }\r\n        return (n + 2) / 2;\r\n}", "32": "public static int averageEven(int n) {\r\n        if (n % 2 != 0) {\r\n                System.out.println(\"Invalid Input\");\r\n                return -1;\r\n        }\r\n        int sm = 0;\r\n        int count = 0;\r\n        while (n >= 2) {\r\n                count = count + 1;\r\n                sm = sm + n;\r\n                n = n - 2;\r\n        }\r\n        return sm / count;\r\n}", "33": "public class FibonacciTriangle {\r\n    public static void main(String[] args) {\r\n        int n = 10;\r\n        int N = n * (n + 1) / 2;\r\n        int[] f = new int[N + 1];\r\n        f[1] = 1;\r\n        f[2] = 1;\r\n        for (int i = 3; i <= N; i++) {\r\n            f[i] = f[i - 1] + f[i - 2];\r\n        }\r\n        int fiboNum = 1;\r\n        for (int i = 1; i <= n; i++) {\r\n            for (int j = 1; j <= i; j++) {\r\n                System.out.print(f[fiboNum] + \" \");\r\n                fiboNum++;\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}", "34": "public static int avg_of_odd_num(int n) {\r\n    return n;\r\n}", "35": "public static int avg_of_odd_num(int n) {\r\n        int sm = 0;\r\n        for (int i = 0; i < n; i++) {\r\n                sm = sm + (2 * i + 1);\r\n        }\r\n        return sm/n;\r\n}", "36": "public static boolean Div_by_8(int n) {\r\n        return (((n >> 3) << 3) == n);\r\n}", "37": "public class Solution {\r\n    public int digitNumber(int n) {\r\n        if (n == 0) return 1;\r\n        if (n == 1) return 9;\r\n        if (n % 2 != 0) {\r\n            int temp = digitNumber((n - 1) / 2) % mod;\r\n            return (9 * (temp * temp) % mod) % mod;\r\n        } else {\r\n            int temp = digitNumber(n / 2) % mod;\r\n            return (temp * temp) % mod;\r\n        }\r\n    }\r\n    public int countExcluding(int n, int d) {\r\n        if (d == 0) return (9 * digitNumber(n - 1)) % mod;\r\n        else return (8 * digitNumber(n - 1)) % mod;\r\n    }\r\n}", "38": "public int power(int n, int r) {\r\n        int count = 0; int i = r;\r\n        while((n / i) >= 1) {\r\n                count += n / i;\r\n                i = i * r;\r\n        }\r\n        return count;", "39": "public static int checkdigit(int n, int k) {\r\n        while (n != 0) {\r\n                int rem = n % 10;\r\n                if (rem == k) {\r\n                        return 1;\r\n                }\r\n                n = n / 10;\r\n        }\r\n        return 0;\r\n}\r\npublic static int findNthNumber(int n, int k) {\r\n        int i = k + 1;\r\n        int count = 1;\r\n        while (count < n) {\r\n                if (checkdigit(i, k) || (i % k == 0)) {\r\n                        count++;\r\n                }\r\n                if (count == n) {\r\n                        return i;\r\n                }\r\n                i++;\r\n        }\r\n        return -1;\r\n}", "40": "public static double seiresSum(int n, double[] a) {\r\n    return (n * (a[0] * a[0] - a[2 * n - 1] * a[2 * n - 1]) / (2 * n - 1));\r\n}", "41": "public static int seriesSum(int n, int[] a) {\r\n        int res = 0;\r\n        for (int i = 0; i < 2 * n; i++) {\r\n                if (i % 2 == 0) {\r\n                        res += a[i] * a[i];\r\n                } else {\r\n                        res -= a[i] * a[i];\r\n                }\r\n        }\r\n        return res;\r\n}", "42": "public static void series(int A, int X, int n) {\r\n        int term = (int) Math.pow(A, n);\r\n        System.out.print(term + \" \");\r\n        for (int i = 1; i <= n; i++) {\r\n                term = (int) (term * X * (n - i + 1)/(i * A));\r\n                System.out.print(term + \" \");\r\n        }\r\n}", "43": "public static void main(String[] args) {\r\n        int n = 5;\r\n        double A = 2.5;\r\n        double X = 3.5;\r\n        double sum = 0;\r\n        for (int i = 0; i <= n; i++) {\r\n                double aPow = Math.pow(A, n - i);\r\n                double xPow = Math.pow(X, i);\r\n                double nFact = 1;\r\n                for (int j = 2; j <= n; j++) {\r\n                        nFact *= j;\r\n                }\r\n                double niFact = 1;\r\n                for (int j = 2; j <= n - i; j++) {\r\n                        niFact *= j;\r\n                }\r\n                double iFact = 1;\r\n                for (int j = 2; j <= i; j++) {\r\n                        iFact *= j;\r\n                }\r\n                sum += (nFact * aPow * xPow) / (niFact * iFact);\r\n        }\r\n        System.out.println(sum);\r\n}", "44": "public static void pythagoreanTriplet(int n) {\r\n        for (int i = 1; i < n / 3 + 1; i++) {\r\n                for (int j = i + 1; j < n / 2 + 1; j++) {\r\n                        int k = n - i - j;\r\n                        if (i * i + j * j == k * k) {\r\n                                System.out.println(i + \", \" + j + \", \" + k);\r\n                                return;\r\n                        }\r\n                }\r\n        }\r\n        System.out.println(\"No Triplet\");\r\n}", "45": "public static boolean isUndulating(String n) {\r\n        if (n.length() <= 2) {\r\n                return false;\r\n        }\r\n        for (int i = 2; i < n.length(); i++) {\r\n                if (n.charAt(i - 2) != n.charAt(i)) {\r\n                        return false;\r\n                }\r\n        }\r\n        return true;\r\n}", "46": "public static boolean isUndulating(String n) {\r\n        if (n.length() <= 2) {\r\n                return false;\r\n        }\r\n        for (int i = 2; i < n.length(); i++) {\r\n                if (n.charAt(i - 2) != n.charAt(i)) {\r\n                        return false;\r\n                }\r\n        }\r\n        return true;\r\n}", "47": "public static void possibleTripletInRange(int L, int R) {\r\n        boolean flag = false;\r\n        int possibleA = 0;\r\n        int possibleB = 0;\r\n        int possibleC = 0;\r\n        int numbersInRange = (R - L + 1);\r\n        if (numbersInRange < 3) {\r\n                flag = false;\r\n        } else if (numbersInRange > 3) {\r\n                flag = true;\r\n                if ((L % 2) > 0) {\r\n                        L += 1;\r\n                }\r\n                possibleA = L;\r\n                possibleB = L + 1;\r\n                possibleC = L + 2;\r\n        } else {\r\n                if ((L % 2) == 0) {\r\n                        flag = true;\r\n                        possibleA = L;\r\n                        possibleB = L + 1;\r\n                        possibleC = L + 2;\r\n                } else {\r\n                        flag = false;\r\n                }\r\n        }\r\n        if (flag == true) {\r\n                System.out.println(\"(\" + possibleA + \",\" + possibleB + \",\" + possibleC + \") is one such possible triplet between \" + L + \" and \" + R);\r\n        } else {\r\n                System.out.println(\"No Such Triplet exists between \" + L + \" and \" + R);\r\n        }\r\n}", "48": "public static int gcd(int a, int b) {\n        if (a == 0)\n                return b;\n        return gcd(b % a, a);\n}\npublic static boolean coprime(int a, int b) {\n        return (gcd(a, b) == 1);\n}\npublic static void possibleTripletInRange(int L, int R) {\n        boolean flag = false;\n        int possibleA = 0;\n        int possibleB = 0;\n        int possibleC = 0;\n        for (int a = L; a <= R; a++) {\n                for (int b = a + 1; b <= R; b++) {\n                        for (int c = b + 1; c <= R; c++) {\n                                if (coprime(a, b) && coprime(b, c) &&\n                                                                        !coprime(a, c)) {\n                                        flag = true;\n                                        possibleA = a;\n                                        possibleB = b;\n                                        possibleC = c;\n                                        break;\n                                }\n                        }\n                        if (flag)\n                                break;\n                }\n                if (flag)\n                        break;\n        }\n        if (flag)\n                System.out.println(\"(\" + possibleA + \",\" + possibleB + \",\" + possibleC + \") is one such possible triplet between \" + L + \" and \" + R);\n        else\n                System.out.println(\"No Such Triplet exists between \" + L + \" and \" + R);\n}", "49": "public static int solve ( int n )\r\n{\r\n        int N = 2 * n - 2;\r\n        int R = n - 1 ;\r\n        return (nCr (N, R) *\r\n                        fact (n - 1));\r\n}"}}, "C++ - Python": {"id": {"0": 12439, "1": 12430, "2": 12429, "3": 12422, "4": 12340, "5": 12333, "6": 12316, "7": 12315, "8": 12314, "9": 12264, "10": 12261, "11": 12239, "12": 12228, "13": 12225, "14": 12192, "15": 12191, "16": 12185, "17": 12180, "18": 12170, "19": 12157, "20": 12147, "21": 12117, "22": 12078, "23": 12077, "24": 12076, "25": 12070, "26": 12058, "27": 12037, "28": 12035, "29": 12002, "30": 11998, "31": 11948, "32": 11906, "33": 11815, "34": 11774, "35": 11772, "36": 11748, "37": 11722, "38": 11709, "39": 11707, "40": 11687, "41": 11677, "42": 11667, "43": 11658, "44": 11629, "45": 11628, "46": 11627, "47": 11626, "48": 11613, "49": 11611, "50": 11549, "51": 11533}, "C++": {"0": "int findpos(string n)\n{\n        int pos = 0;\n        for (int i = 0; n[i] != '\\0'; i++) {\n                switch (n[i]) {\n                case '2':\n                        pos = pos * 4 + 1;\n                        break;\n                case '3':\n                        pos = pos * 4 + 2;\n                        break;\n                case '5':\n                        pos = pos * 4 + 3;\n                        break;\n                case '7':\n                        pos = pos * 4 + 4;\n                        break;\n                }\n        }\n        return pos;\n}", "1": NaN, "2": NaN, "3": "string find_Square_369(string num)\n{\n        char a, b, c, d;\n        if (num[0] == '3')\n                a = '1', b = '0', c = '8', d = '9';\n        else if (num[0] == '6')\n                a = '4', b = '3', c = '5', d = '6';\n        else\n                a = '9', b = '8', c = '0', d = '1';\n        string result = \"\";\n        int size = num.size();\n        for (int i = 1; i < num.size(); i++)\n                result += a;\n        result += b;\n        for (int i = 1; i < num.size(); i++)\n                result += c;\n        result += d;\n        return result;\n}", "4": "ll power(ll x, ll y, ll p)\n{\n        x = x % p;\n        while (y > 0) {\n                if (y & 1)\n                        res = (res * x) % p;\n                x = (x * x) % p;\n        }\n        return res;\n}", "5": "int findNthNonSquare(int n)\n{\n        long double x = (long double)n;\n        long double ans = x + floor(0.5 + sqrt(x));\n        return (int)ans;\n}\n", "6": "bool isPrime(int n)\n{\n        if (n <= 1)\n                return false;\n        if (n <= 3)\n                return true;\n        if (n % 2 == 0 n % 3 == 0)\n                return false;\n        for (int i = 5; i * i <= n; i = i + 6)\n                if (n % i == 0 || n % (i + 2) == 0)\n                        return false;\n        return true;\n}\nint SumOfPrimeDivisors(int n)\n{\n        int sum = 0;\n        int root_n = (int)sqrt(n);\n        for (int i = 1; i <= root_n; i++) {\n                if (n % i == 0) {\n                        if (i == n / i && isPrime(i)) {\n                                sum += i;\n                        }\n                        else {\n                                if (isPrime(i)) {\n                                        sum += i;\n                                }\n                                if (isPrime(n / i)) {\n                                        sum += (n / i);\n                                }\n                        }\n                }\n        }\n        return sum;\n}", "7": "int Sum(int N)\n{\n        int SumOfPrimeDivisors[N+1] = { 0 };\n        for (int i = 2; i <= N; ++i) {\n                if (!SumOfPrimeDivisors[i]) {\n                        for (int j = i; j <= N; j += i) {\n                                SumOfPrimeDivisors[j] += i;\n                        }\n                }\n        }\n        return SumOfPrimeDivisors[N];\n}\n", "8": "bool isPrime(int n)\n{\n        if (n <= 1)\n                return false;\n        if (n <= 3)\n                return true;\n        if (n % 2 == 0 n % 3 == 0)\n                return false;\n        for (int i = 5; i * i <= n; i = i + 6)\n                if (n % i == 0 || n % (i + 2) == 0)\n                        return false;\n        return true;\n}\nint SumOfPrimeDivisors(int n)\n{\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n                if (n % i == 0) {\n                        if (isPrime(i))\n                                sum += i;\n                }\n        }\n        return sum;\n}", "9": "int check(int n)\n{\n        int sum = 0;\n        while (n != 0) {\n                sum += n % 10;\n                n = n / 10;\n        }\n        if (sum % 7 == 0)\n                return 1;\n        else\n                return 0;\n}", "10": "int isPrime(int n)\n{\n        int i, c = 0;\n        for (i = 1; i < n / 2; i++) {\n                if (n % i == 0)\n                        c++;\n        }\n        if (c == 1)\n                return 1;\n        else\n                return 0;\n}\nvoid findMinNum(int arr[], int n)\n{\n        int first = 0, last = 0, num, rev, i;\n        int hash[10] = { 0 };\n        for (int i = 0; i < n; i++) {\n                hash[arr[i]]++;\n        }\n        cout << \"Minimum number: \";\n        for (int i = 0; i <= 9; i++) {\n                for (int j = 0; j < hash[i]; j++)\n                        cout << i;\n        }\n        cout << endl;\n        for (i = 0; i <= 9; i++) {\n                if (hash[i] != 0) {\n                        first = i;\n                        break;\n                }\n        }\n        for (i = 9; i >= 0; i--) {\n                if (hash[i] != 0) {\n                        last = i;\n                        break;\n                }\n        }\n        num = first * 10 + last;\n        rev = last * 10 + first;\n        cout << \"Prime combinations: \";\n        if (isPrime(num) && isPrime(rev))\n                cout << num << \" \" << rev;\n        else if (isPrime(num))\n                cout << num;\n        else if (isPrime(rev))\n                cout << rev;\n        else\n                cout << \"No combinations exist\";\n}", "11": "float Time(float arr[], int n, int Emptypipe)\n{\n        float fill = 0;\n        for (int i = 0; i < n; i++)\n                fill += 1 / arr[i];\n        fill = fill - (1 / (float)Emptypipe);\n        return 1 / fill;\n}", "12": "int calculateSum(int n)\n{\n        return (pow(2, n + 1) + n - 2);\n}\n", "13": "int Race(int B, int C)\n{\n        int result = 0;\n        result = ((C * 100) / B);\n        return 100 - result;\n}", "14": "int nthTerm(int N)\n{\n        return (N * ((N / 2) + ((N % 2) * 2) + N));\n}", "15": "int nextPerfectCube(int N)\n{\n        int nextN = floor(cbrt(N)) + 1;\n        return nextN * nextN * nextN;\n}", "16": "bool arePermutations(int a[], int b[], int n, int m)\n{\n        int sum1 = 0, sum2 = 0, mul1 = 1, mul2 = 1;\n        for (int i = 0; i < n; i++) {\n                sum1 += a[i];\n                mul1 *= a[i];\n        }\n        for (int i = 0; i < m; i++) {\n                sum2 += b[i];\n                mul2 *= b[i];\n        }\n        return ((sum1 == sum2) && (mul1 == mul2));\n}", "17": "int printNthElement(int n)\n{\n        int arr[n + 1];\n        arr[1] = 3;\n        arr[2] = 5;\n        for (int i = 3; i <= n; i++) {\n                if (i % 2 != 0)\n                        arr[i] = arr[i / 2] * 10 + 3;\n                else\n                        arr[i] = arr[(i / 2) - 1] * 10 + 5;\n        }\n        return arr[n];\n}", "18": "string findNthNo(int n)\n{\n        string res = \"\";\n        while (n >= 1) {\n                if (n & 1) {\n                        res = res + \"3\";\n                        n = (n - 1) / 2;\n                }\n                else {\n                        res = res + \"5\";\n                        n = (n - 2) / 2;\n                }\n        }\n        reverse(res.begin(), res.end());\n        return res;\n}", "19": "int calculateSum(int n)\n{\n        return n * (n + 1) / 2\n                + pow((n * (n + 1) / 2), 2);\n}", "20": "int nthTerm(int n)\n{\n        return 3 * pow(n, 2) - 4 * n + 2;\n}", "21": "float area(float a)\n{\n        if (a < 0)\n                return -1;\n        float area = pow((a * sqrt(3)) / (sqrt(2)), 2);\n        return area;\n}\n", "22": "bool isPrime(int n)\n{\n        if (n <= 1)\n                return false;\n        if (n <= 3)\n                return true;\n        if (n % 2 == 0 n % 3 == 0)\n                return false;\n        for (int i = 5; i * i <= n; i = i + 6) {\n                if (n % i == 0 || n % (i + 2) == 0) {\n                        return false;\n                }\n        }\n        return true;\n}\nbool isPowerOfTwo(int n)\n{\n        return (n && !(n & (n - 1)));\n}", "23": "void SieveOfEratosthenes()\n{\n        bool prime[MAX];\n        memset(prime, true, sizeof(prime));\n        for (int p = 2; p * p < MAX; p++) {\n                if (prime[p] == true) {\n                        for (int i = p * 2; i < MAX; i += p)\n                                prime[i] = false;\n                }\n        }\n        long long int product = 1;\n        for (int p = 2; p < MAX; p++) {\n                if (prime[p]) {\n                        product = product * p;\n                        s.insert(product + 1);\n                }\n        }\n}\nbool isEuclid(long n)\n{\n        if (s.find(n) != s.end())\n                return true;\n        else\n                return false;\n}", "24": "void SieveOfEratosthenes()\n{\n        bool prime[MAX];\n        memset(prime, true, sizeof(prime));\n        for (int p = 2; p * p < MAX; p++) {\n                if (prime[p] == true) {\n                        for (int i = p * 2; i < MAX; i += p)\n                                prime[i] = false;\n                }\n        }\n        for (int p = 2; p < MAX; p++)\n                if (prime[p])\n                        arr.push_back(p);\n}\nbool isEuclid(long n)\n{\n        long long product = 1;\n        int i = 0;\n        while (product < n) {\n                product = product * arr[i];\n                if (product + 1 == n)\n                        return true;\n                i++;\n        }\n        return false;\n}\n", "25": "void printLines(int n, int k)\n{\n        for (int i = 0; i < n; i++) {\n                cout << k * (6 * i + 1) << \" \"\n                        << k * (6 * i + 2) << \" \"\n                        << k * (6 * i + 3) << \" \"\n                        << k * (6 * i + 5) << endl;\n        }\n}", "26": NaN, "27": "void generateDivisors(int n)\n{\n        for (int i = 1; i <= sqrt(n); i++) {\n                if (n % i == 0) {\n                        if (n / i == i)\n                                arr.push_back(i);\n                        {\n                                arr.push_back(i);\n                                arr.push_back(n / i);\n                        }\n                }\n        }\n}\ndouble harmonicMean(int n)\n{\n        generateDivisors(n);\n        double sum = 0.0;\n        int len = arr.size();\n        for (int i = 0; i < len; i++)\n                sum = sum + double(n / arr[i]);\n        sum = double(sum / n);\n        return double(arr.size() / sum);\n}\nbool isOreNumber(int n)\n{\n        double mean = harmonicMean(n);\n        if (mean - int(mean) == 0)\n                return true;\n        else\n                return false;\n}", "28": "void isHalfReducible(int arr[], int n, int m)\n{\n        int frequencyHash[m + 1];\n        int i;\n        memset(frequencyHash, 0, sizeof(frequencyHash));\n        for (i = 0; i < n; i++) {\n                frequencyHash[arr[i] % (m + 1)]++;\n        }\n        for (i = 0; i <= m; i++) {\n                if (frequencyHash[i] >= n / 2)\n                        break;\n        }\n        if (i <= m)\n                cout << \"Yes\" << endl;\n        else\n                cout << \"No\" << endl;\n}", "29": "int Nth_Term(int n)\n{\n        return (2 * pow(n, 3) - 3 *\n                                pow(n, 2) + n + 6) / 6;\n}", "30": "int largestPrimeFactor(int n)\n{\n        int max = -1;\n        while (n % 2 == 0) {\n                max = 2;\n        }\n        for (int i = 3; i <= sqrt(n); i += 2) {\n                while (n % i == 0) {\n                        max = i;\n                        n = n / i;\n                }\n        }\n        if (n > 2)\n                max = n;\n        return max;\n}\nbool checkUnusual(int n)\n{\n        int factor = largestPrimeFactor(n);\n        if (factor > sqrt(n)) {\n                return true;\n        }\n        else {\n                return false;\n        }\n}\n", "31": "bool check(int s)\n{\n        int freq[10] = {0},r;\n        while(s != 0)\n        {\n                r = s % 10;\n                s = int(s / 10);\n                freq[r] += 1;\n        }\n        int xor__ = 0;\n        for (int i=0;i<10;i++)\n        {\n        xor__ = xor__ ^ freq[i];\n        if(xor__ == 0)\n                return true;\n        else\n                return false;\n        }\n}", "32": "float getSum(int a, int n)\n{\n        float sum = 0;\n        for (int i = 1; i <= n; ++i)\n        {\n                sum += (i / pow(a, i));\n        }\n        return sum;\n}", "33": "int countDigitsToBeRemoved(int N, int K)\n{\n        string s = to_string(N);\n        int res = 0;\n        int f_zero = 0;\n        for (int i = s.size() - 1; i >= 0; i--) {\n                if (K == 0)\n                        return res;\n                if (s[i] == '0') {\n                        f_zero = 1;\n                        K--;\n                }\n                else\n                        res++;\n        }\n        if (!K)\n                return res;\n        else if (f_zero)\n                return s.size() - 1;\n        return -1;\n}", "34": "bool isPrime(int n)\n{\n        if (n <= 1)\n                return false;\n        if (n <= 3)\n                return true;\n        if (n % 2 == 0 n % 3 == 0)\n                return false;\n        for (int i = 5; i * i <= n; i = i + 6)\n                if (n % i == 0 || n % (i + 2) == 0)\n                        return false;\n        return true;\n}\nbool isFactorialPrime(long n)\n{\n        if (!isPrime(n))\n                return false;\n        long fact = 1;\n        int i = 1;\n        while (fact <= n + 1) {\n                fact = fact * i;\n                if (n + 1 == fact n - 1 == fact)\n                        return true;\n                i++;\n        }\n        return false;\n}", "35": "bool isPrime(int n)\n{\n        if (n <= 1)\n                return false;\n        if (n <= 3)\n                return true;\n        if (n % 2 == 0 n % 3 == 0)\n                return false;\n        for (int i = 5; i * i <= n; i = i + 6)\n                if (n % i == 0 || n % (i + 2) == 0)\n                        return false;\n        return true;\n}\nstatic bool isStrongPrime(int n)\n{\n        if (!isPrime(n) n == 2)\n                return false;\n        int previous_prime = n - 1;\n        int next_prime = n + 1;\n        while (!isPrime(next_prime))\n                next_prime++;\n        while (!isPrime(previous_prime))\n                previous_prime--;\n        int mean = (previous_prime + next_prime) / 2;\n        if (n > mean)\n                return true;\n        else\n                return false;\n}", "36": "ll gcd(ll a, ll b)\r\n{\r\n\tif (b == 0)\r\n\t\treturn a;\r\n\telse\r\n\t\treturn gcd(b, a % b);\r\n}\r\nll lcmOfArray(int arr[], int n)\r\n{\r\n\tif (n < 1)\r\n\t\treturn 0;\r\n\tll lcm = arr[0];\r\n\tfor (int i = 1; i < n; i++)\r\n\t\tlcm = (lcm * arr[i]) / gcd(lcm, arr[i]);\r\n\treturn lcm;\r\n}\r\nint minPerfectCube(int arr[], int n)\r\n{\r\n\tll minPerfectCube;\r\n\tll lcm = lcmOfArray(arr, n);\r\n\tminPerfectCube = (long long)lcm;\r\n\tint cnt = 0;\r\n\twhile (lcm > 1 && lcm % 2 == 0) {\r\n\t\tcnt++;\r\n\t\tlcm /= 2;\r\n\t}\r\n\tif (cnt % 3 == 2)\r\n\t\tminPerfectCube *= 2;\r\n\telse if (cnt % 3 == 1)\r\n\t\tminPerfectCube *= 4;\r\n\tint i = 3;\r\n\twhile (lcm > 1) {\r\n\t\tcnt = 0;\r\n\t\twhile (lcm % i == 0) {\r\n\t\t\tcnt++;\r\n\t\t\tlcm /= i;\r\n\t\t}\r\n\t\tif (cnt % 3 == 1)\r\n\t\t\tminPerfectCube *= i * i;\r\n\t\telse if (cnt % 3 == 2)\r\n\t\t\tminPerfectCube *= i;\r\n\t\ti += 2;\r\n\t}\r\n\treturn minPerfectCube;\r\n}", "37": "int countOdd(int arr[], int n)\n{\n        int odd = 0;\n        for (int i = 0; i < n; i++) {\n                if (arr[i] % 2 == 1)\n                        odd++;\n        }\n        return odd;\n}\nint countValidPairs(int arr[], int n)\n{\n        int odd = countOdd(arr, n);\n        return (odd * (odd - 1)) / 2;\n}", "38": "int minAbsDiff(int n)\n{\n        int mod = n % 4;\n        if (mod == 0 mod == 3)\n                return 0;\n        return 1;\n}", "39": "bool digitWell(int n, int m, int k)\n{\n        int cnt = 0;\n        while (n > 0) {\n                if (n % 10 == m)\n                        ++cnt;\n                n /= 10;\n        }\n        return cnt == k;\n}\nint findInt(int n, int m, int k)\n{\n        int i = n + 1;\n        while (true) {\n                if (digitWell(i, m, k))\n                        return i;\n                i++;\n        }\n}", "40": "int minValue(int n, int x, int y)\n{\n        float val = (y * n) / 100;\n        if (x >= val)\n                return 0;\n        else\n                return (ceil(val) - x);\n}", "41": "void initialize()\n{\n        l[0][0] = 1;\n        for (int i = 1; i < 1001; i++) {\n                l[i][0] = 1;\n                for (int j = 1; j < i + 1; j++) {\n                        l[i][j] = (l[i - 1][j - 1] + l[i - 1][j]);\n                }\n        }\n}\nint nCr(int n, int r)\n{\n        return l[n][r];\n}\n", "42": "int findAndSum(int arr[], int n)\n{\n        int sum = 0;\n        int mul = 1;\n        for (int i = 0; i < 30; i++) {\n                bool count_on = 0;\n                int l = 0;\n                for (int j = 0; j < n; j++) {\n                        if ((arr[j] & (1 << i)) > 0)\n                                if (count_on)\n                                        l++;\n                                else {\n                                        count_on = 1;\n                                        l++;\n                                }\n                        else if (count_on) {\n                                sum += ((mul * l * (l + 1)) / 2);\n                                count_on = 0;\n                                l = 0;\n                        }\n                }\n                if (count_on) {\n                        sum += ((mul * l * (l + 1)) / 2);\n                        count_on = 0;\n                        l = 0;\n                }\n                mul *= 2;\n        }\n        return sum;\n}", "43": "int Cycles(int N)\n{\n        int fact = 1, result = 0;\n        result = N - 1;\n        int i = result;\n        while (i > 0) {\n                fact = fact * i;\n                i--;\n        }\n        return fact / 2;\n}", "44": "void BalanceArray(vector<int>& A, vector<vector<int> >& Q)\n{\n        vector<int> ANS;\n        int i, sum = 0;\n        for (i = 0; i < A.size(); i++)\n                if (A[i] % 2 == 0)\n                        sum = sum + A[i];\n        for (i = 0; i < Q.size(); i++) {\n                int index = Q[i][0];\n                int value = Q[i][1];\n                if (A[index] % 2 == 0)\n                        sum = sum - A[index];\n                A[index] = A[index] + value;\n                if (A[index] % 2 == 0)\n                        sum = sum + A[index];\n                ANS.push_back(sum);\n        }\n        for (i = 0; i < ANS.size(); i++)\n                cout << ANS[i] << \" \";\n}", "45": "int EvenSum(vector<int>& A, int index, int value)\n{\n        A[index] = A[index] + value;\n        int sum = 0;\n        for (int i = 0; i < A.size(); i++)\n                if (A[i] % 2 == 0)\n                        sum = sum + A[i];\n        return sum;\n}\nvoid BalanceArray(vector<int>& A, vector<vector<int> >& Q)\n{\n        vector<int> ANS;\n        int i, sum;\n        for (i = 0; i < Q.size(); i++) {\n                int index = Q[i][0];\n                int value = Q[i][1];\n                sum = EvenSum(A, index, value);\n                ANS.push_back(sum);\n        }\n        for (i = 0; i < ANS.size(); i++)\n                cout << ANS[i] << \" \";\n}\n", "46": "int countWays(int N)\n{\n        int E = (N * (N - 1)) / 2;\n        if (N == 1)\n                return 0;\n        return pow(2, E - 1);\n}", "47": "int countNumbers(int L, int R, int K)\n{\n        if (K == 9)\n                K = 0;\n        int totalnumbers = R - L + 1;\n        int factor9 = totalnumbers / 9;\n        int rem = totalnumbers % 9;\n        int ans = factor9;\n        for (int i = R; i > R - rem; i--) {\n                int rem1 = i % 9;\n                if (rem1 == K)\n                        ans++;\n        }\n        return ans;\n}", "48": "int countQuadruples(int a[], int n)\n{\n        unordered_map<int, int> mpp;\n        for (int i = 0; i < n; i++)\n                mpp[a[i]]++;\n        int count = 0;\n        for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n                        if (j == k)\n                                continue;\n                        mpp[a[j]]--;\n                        mpp[a[k]]--;\n                        int first = a[j] - (a[k] - a[j]);\n                        int fourth = (a[k] * a[k]) / a[j];\n                        if ((a[k] * a[k]) % a[j] == 0) {\n                                if (a[j] != a[k])\n                                        count += mpp[first] * mpp[fourth];\n                                else\n                                        count += mpp[first] * (mpp[fourth] - 1);\n                        }\n                        mpp[a[j]]++;\n                        mpp[a[k]]++;\n                }\n        }\n        return count;\n}", "49": "void sieve()\n{\n        spf[1] = 1;\n        for (int i = 2; i < MAXN; i++)\n                spf[i] = i;\n        for (int i = 4; i < MAXN; i += 2)\n                spf[i] = 2;\n        for (int i = 3; i * i < MAXN; i++) {\n                if (spf[i] == i) {\n                        for (int j = i * i; j < MAXN; j += i)\n                                if (spf[j] == j)\n                                        spf[j] = i;\n                }\n        }\n}\nvoid getFactorization(int x)\n{\n        int temp;\n        while (x != 1) {\n                temp = spf[x];\n                if (x % temp == 0) {\n                        hash1[spf[x]]++;\n                        x = x / spf[x];\n                }\n                while (x % temp == 0)\n                        x = x / temp;\n        }\n}\nbool check(int x)\n{\n        int temp;\n        while (x != 1) {\n                temp = spf[x];\n                if (x % temp == 0 && hash1[temp] > 1)\n                        return false;\n                while (x % temp == 0)\n                        x = x / temp;\n        }\n        return true;\n}\nbool hasValidNum(int arr[], int n)\n{\n        sieve();\n        for (int i = 0; i < n; i++)\n                getFactorization(arr[i]);\n        for (int i = 0; i < n; i++)\n                if (check(arr[i]))\n                        return true;\n        return false;\n}", "50": "void Loss(int SP, int P)\n{\n        float loss = 0;\n        loss = (2 * P * P * SP) / float(100 * 100 - P * P);\n        cout << \"Loss = \" << loss;\n}\n", "51": "int countSquares(int r, int c, int m)\n{\n        int squares = 0;\n        for (int i = 1; i <= 8; i++) {\n                for (int j = 1; j <= 8; j++) {\n                        if (max(abs(i - r), abs(j - c)) <= m)\n                                squares++;\n                }\n        }\n        return squares;\n}"}, "Python": {"0": "def findpos(n):\r\n    pos = 0\r\n    for i in range(len(n)):\r\n        if n[i] == '2':\r\n            pos = pos * 4 + 1\r\n        elif n[i] == '3':\r\n            pos = pos * 4 + 2\r\n        elif n[i] == '5':\r\n            pos = pos * 4 + 3\r\n        elif n[i] == '7':\r\n            pos = pos * 4 + 4\r\n    return pos", "1": NaN, "2": NaN, "3": "def find_Square_369(num):\r\n    if num[0] == '3':\r\n        a = '1', b = '0', c = '8', d = '9'\r\n    elif num[0] == '6':\r\n        a = '4', b = '3', c = '5', d = '6'\r\n    else:\r\n        a = '9', b = '8', c = '0', d = '1'\r\n    result = \"\"\r\n    size = len(num)\r\n    for i in range(1, size):\r\n        result += a\r\n    result += b\r\n    for i in range(1, size):\r\n        result += c\r\n    result += d\r\n    return result", "4": NaN, "5": "def findNthNonSquare(n):\r\n    x = n\r\n    ans = x + math.floor(0.5 + math.sqrt(x))\r\n    return int(ans)", "6": "def isPrime(n):\r\n    if n <= 1:\r\n        return False\r\n    if n <= 3:\r\n        return True\r\n    if n % 2 == 0 or n % 3 == 0:\r\n        return False\r\n    for i in range(5, int(n**0.5) + 1, 6):\r\n        if n % i == 0 or n % (i + 2) == 0:\r\n            return False\r\n    return True\r\n\r\ndef SumOfPrimeDivisors(n):\r\n    sum = 0\r\n    root_n = int(n**0.5)\r\n    for i in range(1, root_n + 1):\r\n        if n % i == 0:\r\n            if i == n / i and isPrime(i):\r\n                sum += i\r\n            else:\r\n                if isPrime(i):\r\n                    sum += i\r\n                if isPrime(n / i):\r\n                    sum += n / i\r\n    return sum", "7": "def Sum(N):\r\n    SumOfPrimeDivisors = [0] * (N+1)\r\n    for i in range(2,N+1):\r\n        if SumOfPrimeDivisors[i] == 0:\r\n            for j in range(i,N+1,i):\r\n                SumOfPrimeDivisors[j] += i\r\n    return SumOfPrimeDivisors[N]", "8": "def isPrime(n):\r\n    if n <= 1:\r\n        return False\r\n    if n <= 3:\r\n        return True\r\n    if n % 2 == 0 or n % 3 == 0:\r\n        return False\r\n    i = 5\r\n    while i * i <= n:\r\n        if n % i == 0 or n % (i + 2) == 0:\r\n            return False\r\n        i = i + 6\r\n    return True\r\n\r\ndef SumOfPrimeDivisors(n):\r\n    sum = 0\r\n    for i in range(1, n + 1):\r\n        if n % i == 0:\r\n            if isPrime(i):\r\n                sum += i\r\n    return sum", "9": "def check(n):\r\n    sum = 0\r\n    while n != 0:\r\n        sum += n % 10\r\n        n = n / 10\r\n    if sum % 7 == 0:\r\n        return 1\r\n    else:\r\n        return 0", "10": "def isPrime(n):\n    i, c = 1, 0\n    while i < n / 2:\n        if n % i == 0:\n            c += 1\n        i += 1\n    if c == 1:\n        return 1\n    else:\n        return 0\n\ndef findMinNum(arr, n):\n    first, last, num, rev, i = 0, 0, 0, 0, 0\n    hash = [0] * 10\n    for i in range(n):\n        hash[arr[i]] += 1\n    print(\"Minimum number: \", end=\"\")\n    for i in range(10):\n        for j in range(hash[i]):\n            print(i, end=\"\")\n    print()\n    for i in range(10):\n        if hash[i] != 0:\n            first = i\n            break\n    for i in range(9, -1, -1):\n        if hash[i] != 0:\n            last = i\n            break\n    num = first * 10 + last\n    rev = last * 10 + first\n    print(\"Prime combinations: \", end=\"\")\n    if isPrime(num) and isPrime(rev):\n        print(num, rev, end=\" \")\n    elif isPrime(num):\n        print(num, end=\" \")\n    elif isPrime(rev):\n        print(rev, end=\" \")\n    else:\n        print(\"No combinations exist\")", "11": "def Time(arr, n, Emptypipe):\r\n    fill = 0\r\n    for i in range(n):\r\n        fill += 1 / arr[i]\r\n    fill = fill - (1 / Emptypipe)\r\n    return 1 / fill", "12": "def calculateSum(n):\r\n    return (pow(2, n + 1) + n - 2)", "13": "def Race(B, C):\r\n    result = 0\r\n    result = ((C * 100) / B)\r\n    return 100 - result", "14": "def nthTerm(N):\r\n    return (N * ((N / 2) + ((N % 2) * 2) + N))", "15": "def nextPerfectCube(N):\r\n    nextN = int(N**(1/3)) + 1\r\n    return nextN * nextN * nextN", "16": "def arePermutations(a, b, n, m):\r\n    sum1 = 0\r\n    sum2 = 0\r\n    mul1 = 1\r\n    mul2 = 1\r\n    for i in range(n):\r\n        sum1 += a[i]\r\n        mul1 *= a[i]\r\n    for i in range(m):\r\n        sum2 += b[i]\r\n        mul2 *= b[i]\r\n    return ((sum1 == sum2) and (mul1 == mul2))", "17": "def printNthElement(n):\r\n    arr = [0] * (n + 1)\r\n    arr[1] = 3\r\n    arr[2] = 5\r\n    for i in range(3, n + 1):\r\n        if i % 2 != 0:\r\n            arr[i] = arr[i // 2] * 10 + 3\r\n        else:\r\n            arr[i] = arr[(i // 2) - 1] * 10 + 5\r\n    return arr[n]", "18": "def findNthNo(n):\r\n    res = \"\"\r\n    while n >= 1:\r\n        if n & 1:\r\n            res = res + \"3\"\r\n            n = (n - 1) / 2\r\n        else:\r\n            res = res + \"5\"\r\n            n = (n - 2) / 2\r\n    res = res[::-1]\r\n    return res", "19": "def calculateSum(n):\r\n    return n * (n + 1) / 2 + pow((n * (n + 1) / 2), 2)", "20": "def nthTerm(n):\r\n    return 3 * pow(n, 2) - 4 * n + 2", "21": "def area(a):\r\n    if a < 0:\r\n        return -1\r\n    area = pow((a * sqrt(3)) / (sqrt(2)), 2)\r\n    return area", "22": "def isPrime(n):\r\n    if n <= 1:\r\n        return False\r\n    if n <= 3:\r\n        return True\r\n    if n % 2 == 0 or n % 3 == 0:\r\n        return False\r\n    i = 5\r\n    while i * i <= n:\r\n        if n % i == 0 or n % (i + 2) == 0:\r\n            return False\r\n        i = i + 6\r\n    return True\r\ndef isPowerOfTwo(n):\r\n    return (n and not (n & (n - 1)))", "23": "def SieveOfEratosthenes():\r\n        prime = [True for i in range(MAX)]\r\n        p = 2\r\n        while (p * p < MAX):\r\n                if (prime[p] == True):\r\n                        for i in range(p * 2, MAX, p):\r\n                                prime[i] = False\r\n                p += 1\r\n        s = set()\r\n        for p in range(2, MAX):\r\n                if prime[p]:\r\n                        s.add(pow(p, 2) + 1)\r\n        return s\r\n\r\ndef isEuclid(n):\r\n        if n in s:\r\n                return True\r\n        else:\r\n                return False", "24": "def SieveOfEratosthenes():\r\n        prime = [True for i in range(MAX)]\r\n        p = 2\r\n        while (p * p < MAX):\r\n                if (prime[p] == True):\r\n                        for i in range(p * 2, MAX, p):\r\n                                prime[i] = False\r\n                p += 1\r\n        for p in range(2, MAX):\r\n                if prime[p]:\r\n                        arr.append(p)\r\n\r\ndef isEuclid(n):\r\n        product = 1\r\n        i = 0\r\n        while (product < n):\r\n                product = product * arr[i]\r\n                if (product + 1 == n):\r\n                        return True\r\n                i += 1\r\n        return False", "25": "def printLines(n, k):\r\n    for i in range(n):\r\n        print(k * (6 * i + 1), k * (6 * i + 2), k * (6 * i + 3), k * (6 * i + 5))", "26": NaN, "27": "def generateDivisors(n):\r\n    for i in range(1, int(n**0.5)+1):\r\n        if n % i == 0:\r\n            if n / i == i:\r\n                arr.append(i)\r\n            else:\r\n                arr.append(i)\r\n                arr.append(n / i)\r\n\r\ndef harmonicMean(n):\r\n    generateDivisors(n)\r\n    sum = 0.0\r\n    len = len(arr)\r\n    for i in range(0, len):\r\n        sum = sum + n / arr[i]\r\n    sum = sum / n\r\n    return len / sum\r\n\r\ndef isOreNumber(n):\r\n    mean = harmonicMean(n)\r\n    if mean - int(mean) == 0:\r\n        return True\r\n    else:\r\n        return False", "28": "def isHalfReducible(arr, n, m):\n    frequencyHash = [0] * (m + 1)\n    for i in range(n):\n        frequencyHash[arr[i] % (m + 1)] += 1\n    for i in range(m + 1):\n        if frequencyHash[i] >= n / 2:\n            return True\n    return False", "29": "def Nth_Term(n):\r\n    return (2 * pow(n, 3) - 3 *\r\n                            pow(n, 2) + n + 6) / 6", "30": "def largestPrimeFactor(n):\r\n    max = -1\r\n    while n % 2 == 0:\r\n        max = 2\r\n        n = n / 2\r\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\r\n        while n % i == 0:\r\n            max = i\r\n            n = n / i\r\n    if n > 2:\r\n        max = n\r\n    return max\r\n\r\ndef checkUnusual(n):\r\n    factor = largestPrimeFactor(n)\r\n    if factor > math.sqrt(n):\r\n        return True\r\n    else:\r\n        return False", "31": "def check(s):\r\n    freq = [0] * 10\r\n    while s != 0:\r\n        r = s % 10\r\n        s = int(s / 10)\r\n        freq[r] += 1\r\n    xor__ = 0\r\n    for i in range(10):\r\n        xor__ = xor__ ^ freq[i]\r\n        if xor__ == 0:\r\n            return True\r\n        else:\r\n            return False", "32": "def getSum(a, n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i / pow(a, i)\r\n    return sum", "33": "def countDigitsToBeRemoved(N, K):\r\n    s = str(N)\r\n    res = 0\r\n    f_zero = 0\r\n    for i in range(len(s)-1, -1, -1):\r\n        if K == 0:\r\n            return res\r\n        if s[i] == '0':\r\n            f_zero = 1\r\n            K -= 1\r\n        else:\r\n            res += 1\r\n    if not K:\r\n        return res\r\n    elif f_zero:\r\n        return len(s) - 1\r\n    return -1", "34": "def isPrime(n):\r\n    if n <= 1:\r\n        return False\r\n    if n <= 3:\r\n        return True\r\n    if n % 2 == 0 or n % 3 == 0:\r\n        return False\r\n    i = 5\r\n    while i * i <= n:\r\n        if n % i == 0 or n % (i + 2) == 0:\r\n            return False\r\n        i += 6\r\n    return True\r\ndef isFactorialPrime(n):\r\n    if not isPrime(n):\r\n        return False\r\n    fact = 1\r\n    i = 1\r\n    while fact <= n + 1:\r\n        fact = fact * i\r\n        if n + 1 == fact and n - 1 == fact:\r\n            return True\r\n        i += 1\r\n    return False", "35": "def isPrime(n):\r\n    if n <= 1:\r\n        return False\r\n    if n <= 3:\r\n        return True\r\n    if n % 2 == 0 or n % 3 == 0:\r\n        return False\r\n    i = 5\r\n    while i * i <= n:\r\n        if n % i == 0 or n % (i + 2) == 0:\r\n            return False\r\n        i = i + 6\r\n    return True\r\n\r\ndef isStrongPrime(n):\r\n    if not isPrime(n):\r\n        return False\r\n    if n == 2:\r\n        return False\r\n    previous_prime = n - 1\r\n    next_prime = n + 1\r\n    while not isPrime(next_prime):\r\n        next_prime += 1\r\n    while not isPrime(previous_prime):\r\n        previous_prime -= 1\r\n    mean = (previous_prime + next_prime) / 2\r\n    if n > mean:\r\n        return True\r\n    else:\r\n        return False", "36": NaN, "37": "def countOdd(arr, n):\r\n        odd = 0\r\n        for i in range(n):\r\n                if arr[i] % 2 == 1:\r\n                        odd += 1\r\n        return odd\r\ndef countValidPairs(arr, n):\r\n        odd = countOdd(arr, n)\r\n        return (odd * (odd - 1)) // 2", "38": "def minAbsDiff(n):\r\n    mod = n % 4\r\n    if mod == 0 or mod == 3:\r\n        return 0\r\n    return 1", "39": "def digitWell(n, m, k):\r\n    cnt = 0\r\n    while n > 0:\r\n        if n % 10 == m:\r\n            cnt += 1\r\n        n /= 10\r\n    return cnt == k\r\n\r\ndef findInt(n, m, k):\r\n    i = n + 1\r\n    while True:\r\n        if digitWell(i, m, k):\r\n            return i\r\n        i += 1", "40": "def minValue(n, x, y):\r\n    val = (y * n) / 100\r\n    if x >= val:\r\n        return 0\r\n    else:\r\n        return (math.ceil(val) - x)", "41": "def initialize():\r\n        l[0][0] = 1\r\n        for i in range(1, 1001):\r\n                l[i][0] = 1\r\n                for j in range(1, i + 1):\r\n                        l[i][j] = (l[i - 1][j - 1] + l[i - 1][j])\r\n\r\ndef nCr(n, r):\r\n        return l[n][r]", "42": "def findAndSum(arr, n):\r\n    sum = 0\r\n    mul = 1\r\n    for i in range(30):\r\n        count_on = 0\r\n        l = 0\r\n        for j in range(n):\r\n            if (arr[j] & (1 << i)):\r\n                if (count_on):\r\n                    l += 1\r\n                else:\r\n                    count_on = 1\r\n                    l += 1\r\n            else:\r\n                if (count_on):\r\n                    sum += ((mul * l * (l + 1)) / 2)\r\n                    count_on = 0\r\n                    l = 0\r\n        if (count_on):\r\n            sum += ((mul * l * (l + 1)) / 2)\r\n            count_on = 0\r\n            l = 0\r\n        mul *= 2\r\n    return sum", "43": "def Cycles(N):\r\n    fact = 1\r\n    result = 0\r\n    result = N - 1\r\n    i = result\r\n    while i > 0:\r\n        fact = fact * i\r\n        i = i - 1\r\n    return fact / 2", "44": "def BalanceArray(A, Q):\r\n    ANS = []\r\n    i = 0\r\n    sum = 0\r\n    for i in range(len(A)):\r\n        if A[i] % 2 == 0:\r\n            sum = sum + A[i]\r\n    for i in range(len(Q)):\r\n        index = Q[i][0]\r\n        value = Q[i][1]\r\n        if A[index] % 2 == 0:\r\n            sum = sum - A[index]\r\n        A[index] = A[index] + value\r\n        if A[index] % 2 == 0:\r\n            sum = sum + A[index]\r\n        ANS.append(sum)\r\n    for i in range(len(ANS)):\r\n        print ANS[i],", "45": "def EvenSum(A, index, value):\r\n    A[index] = A[index] + value\r\n    sum = 0\r\n    for i in range(len(A)):\r\n        if A[i] % 2 == 0:\r\n            sum = sum + A[i]\r\n    return sum\r\ndef BalanceArray(A, Q):\r\n    ANS = []\r\n    i, sum = 0, 0\r\n    for i in range(len(Q)):\r\n        index = Q[i][0]\r\n        value = Q[i][1]\r\n        sum = EvenSum(A, index, value)\r\n        ANS.append(sum)\r\n    for i in range(len(ANS)):\r\n        print(ANS[i], end = \" \")", "46": "def countWays(N):\r\n    E = (N * (N - 1)) / 2\r\n    if N == 1:\r\n        return 0\r\n    return pow(2, E - 1)", "47": "def countNumbers(L, R, K):\r\n    if K == 9:\r\n        K = 0\r\n    totalnumbers = R - L + 1\r\n    factor9 = totalnumbers // 9\r\n    rem = totalnumbers % 9\r\n    ans = factor9\r\n    for i in range(R, R - rem, -1):\r\n        rem1 = i % 9\r\n        if rem1 == K:\r\n            ans += 1\r\n    return ans", "48": "def countQuadruples(a, n):\r\n    mpp = {}\r\n    for i in range(n):\r\n        if a[i] in mpp:\r\n            mpp[a[i]] += 1\r\n        else:\r\n            mpp[a[i]] = 1\r\n    count = 0\r\n    for j in range(n):\r\n        for k in range(n):\r\n            if j == k:\r\n                continue\r\n            mpp[a[j]] -= 1\r\n            mpp[a[k]] -= 1\r\n            first = a[j] - (a[k] - a[j])\r\n            fourth = (a[k] * a[k]) / a[j]\r\n            if (a[k] * a[k]) % a[j] == 0:\r\n                if a[j] != a[k]:\r\n                    count += mpp[first] * mpp[fourth]\r\n                else:\r\n                    count += mpp[first] * (mpp[fourth] - 1)\r\n            mpp[a[j]] += 1\r\n            mpp[a[k]] += 1\r\n    return count", "49": "def sieve():\r\n    spf[1] = 1\r\n    for i in range(2, MAXN):\r\n        spf[i] = i\r\n    for i in range(4, MAXN, 2):\r\n        spf[i] = 2\r\n    for i in range(3, int(math.sqrt(MAXN)) + 1):\r\n        if spf[i] == i:\r\n            for j in range(i * i, MAXN, i):\r\n                if spf[j] == j:\r\n                    spf[j] = i\r\n\r\ndef getFactorization(x):\r\n    temp = spf[x]\r\n    while x != 1:\r\n        if x % temp == 0:\r\n            hash1[spf[x]] += 1\r\n            x = x / spf[x]\r\n        while x % temp == 0:\r\n            x = x / temp\r\n\r\ndef check(x):\r\n    temp = spf[x]\r\n    while x != 1:\r\n        if x % temp == 0 and hash1[temp] > 1:\r\n            return False\r\n        while x % temp == 0:\r\n            x = x / temp\r\n    return True\r\n\r\ndef hasValidNum(arr, n):\r\n    sieve()\r\n    for i in range(n):\r\n        getFactorization(arr[i])\r\n    for i in range(n):\r\n        if check(arr[i]):\r\n            return True\r\n    return False", "50": "def Loss(SP, P):\r\n    loss = 0\r\n    loss = (2 * P * P * SP) / float(100 * 100 - P * P)\r\n    print(\"Loss = \" + str(loss))", "51": "def countSquares(r, c, m):\r\n    squares = 0\r\n    for i in range(1, 9):\r\n        for j in range(1, 9):\r\n            if max(abs(i - r), abs(j - c)) <= m:\r\n                squares += 1\r\n    return squares"}}, "Python - C++": {"id": {"0": 11549, "1": 11533, "2": 11523, "3": 11510, "4": 11435, "5": 11418, "6": 11404, "7": 11387, "8": 11370, "9": 11343, "10": 11342, "11": 11331, "12": 11315, "13": 11306, "14": 11302, "15": 11294, "16": 11283, "17": 11253, "18": 11217, "19": 11204, "20": 11199, "21": 11196, "22": 11194, "23": 11182, "24": 11180, "25": 11139, "26": 11102, "27": 11094, "28": 11088, "29": 11060, "30": 11052, "31": 11051, "32": 11045, "33": 11015, "34": 11014, "35": 10974, "36": 10960, "37": 10952, "38": 10951, "39": 10936, "40": 10935, "41": 10932, "42": 10921, "43": 10897, "44": 10885, "45": 10874, "46": 10812, "47": 10801, "48": 10768, "49": 10753}, "Python": {"0": "def Loss(SP, P):\n        loss = 0\n        loss = ((2 * P * P * SP) /\n                        (100 * 100 - P * P))\n        print(\"Loss =\", round(loss, 3)", "1": "def countSquares(r, c, m):\n        squares = 0\n        for i in range (1, 9):\n                for j in range (1, 9):\n                        if(max(abs(i - r), abs(j - c)) <= m):\n                                squares = squares + 1\n        return squares", "2": "def freqPairs(arr, n):\n        max = arr[0]\n        for i in range(len(arr)):\n                if arr[i] > max:\n                        max = arr[i]\n        freq = [0 for i in range(max + 1)]\n        count = 0\n        for i in range(n):\n                freq[arr[i]] += 1\n        for i in range(n):\n                for j in range(2 * arr[i], max + 1, arr[i]):\n                        if (freq[j] >= 1):\n                                count += freq[j]\n                if (freq[arr[i]] > 1):\n                        count += freq[arr[i]] - 1\n                        freq[arr[i]] -= 1\n        return count\n", "3": "def smallestIndex(a, n):\n        right1 = 0\n        right0 = 0\n        for i in range(n):\n                if (a[i] == 1):\n                        right1 = i\n                else:\n                        right0 = i\n        return min(right1, right0)", "4": "def primeCount(arr, n):\n        max_val = max(arr)\n        prime = [True] * (max_val+1)\n        prime[0] = prime[1] = False\n        p = 2\n        while p * p <= max_val: \n                if prime[p] == True: \n                        for i in range(p * 2, max_val+1, p):\n                                prime[i] = False\n                p += 1\n        count = 0\n        for i in range(0, n):\n                if prime[arr[i]]:\n                        count += 1\n        return count\ndef getPrefixArray(arr, n, pre):\n        pre[0] = arr[0]\n        for i in range(1, n): \n                pre[i] = pre[i - 1] + arr[i]", "5": "def getAverage(x, y):\n        avg = (x & y) + ((x ^ y) >> 1);\n        return avg\n", "6": "def numberOfDays(a, b, n):\n        Days = b * (n + a) // (a + b)\n        return Days", "7": "def count(N):\n        a = 0;\n        a = (N * (N + 1)) / 2;\n        return int(a);", "8": "def canConvert(a, b) :\n        while (b > a) :\n                if (b % 10 == 1) :\n                        b //= 10;\n                        continue;\n                if (b % 2 == 0) :\n                        b /= 2;\n                        continue;\n                return false;\n        if (b == a) :\n                return True;\n        return False;", "9": "def MinimumValue(x, y):\n        if (x > y):\n                x, y = y, x\n        a = 1\n        b = x - 1\n        c = y - b\n        print(a, b, c)", "10": "def decimalToBinary(n) :\n        if (n == 0) :\n                print(\"0\",end=\"\");\n                return;\n        decimalToBinary(n // 2);\n        print(n % 2,end=\"\");", "11": "def Max_sum(a, n):\n        pos = 0\n        neg = 0\n        for i in range(n):\n                if(a[i] > 0):\n                        pos = 1\n                elif(a[i] < 0):\n                        neg = 1\n                if(pos == 1 and neg == 1):\n                        break\n        sum = 0\n        if(pos==1 and neg==1):\n                for i in range(n):\n                        sum += abs(a[i])\n        elif(pos == 1):\n                mini = a[0]\n                sum = a[0]\n                for i in range(1,n,1):\n                        mini = min(mini, a[i])\n                        sum += a[i]\n                sum -= 2*mini\n        elif(neg == 1):\n                for i in range(n):\n                        a[i] = abs(a[i])\n                mini = a[0]\n                sum = a[0]\n                for i in range(1,n):\n                        mini = min(mini, a[i])\n                        sum += a[i]\n                sum -= 2*mini\n        return sum", "12": "def Wedderburn(n):\n        if (n <= 2):\n                return store[n]\n        elif (n % 2 == 0):\n                x = n // 2\n                ans = 0\n                for i in range(1, x):\n                        ans += store[i] * store[n - i]\n                ans += (store[x] * (store[x] + 1)) // 2\n                store[n] = ans\n                return ans\n        else:\n                x = (n + 1) // 2\n                ans = 0\n                for i in range(1, x):\n                        ans += store[i] * store[n - i]\n                store[n] = ans\n                return ans\ndef Wedderburn_Etherington(n):\n        store[0] = 0\n        store[1] = 1\n        store[2] = 1\n        for i in range(n):\n                print(Wedderburn(i), end = \"\")\n                if(i != n - 1):\n                        print(end = \", \")", "13": "def addPrimes():\n        n = MAX\n        prime = [True for i in range(n + 1)]\n        for p in range(2, n + 1):\n                if p * p > n:\n                        break\n                if (prime[p] == True):\n                        for i in range(2 * p, n + 1, p):\n                                prime[i] = False\n        ans = []\n        for p in range(2, n + 1):\n                if (prime[p]):\n                        ans.append(p)\n        return ans\ndef is_prime(n):\n        if n in [3, 5, 7]:\n                return True\n        return False\ndef find_Sum(n):\n        Sum = 0\n        v = addPrimes()\n        for i in range(len(v)):\n                flag = 1\n                a = v[i]\n                while (a != 0):\n                        d = a % 10;\n                        a = a // 10;\n                        if (is_prime(d)):\n                                flag = 0\n                                break\n                if (flag == 1):\n                        n -= 1\n                        Sum = Sum + v[i]\n                if n == 0:\n                        break\n        return Sum", "14": "def find_count(ele):\n        count = 0\n        for i in range(len(ele)):\n                p = []\n                c = 0\n                j = len(ele) - 1\n                while j >= (len(ele) - 1 - i) and j >= 0:\n                        p.append(ele[j])\n                        j -= 1\n                j = len(ele) - 1\n                k = 0\n                while j >= 0:\n                        if ele[j] != p[k]:\n                                break\n                        j -= 1\n                        k += 1\n                        if k == len(p):\n                                c += 1\n                                k = 0\n                count = max(count, c)\n        return count\ndef solve(n):\n        count = 1\n        ele = []\n        for i in range(n):\n                print(count, end = \" \")\n                ele.append(count)\n                count = find_count(ele)", "15": "def ZigZag(n):\n        fact = [0 for i in range(n + 1)]\n        zig = [0 for i in range(n + 1)]\n        fact[0] = 1\n        for i in range(1, n + 1):\n                fact[i] = fact[i - 1] * i\n        zig[0] = 1\n        zig[1] = 1\n        print(\"zig zag numbers: \", end = \" \")\n        print(zig[0], zig[1], end = \" \")\n        for i in range(2, n):\n                sum = 0\n                for k in range(0, i):\n                        sum += ((fact[i - 1] //\n                                        (fact[i - 1 - k] * fact[k])) * zig[k] * zig[i - 1 - k])\n                zig[i] = sum // 2\n                print(sum // 2, end = \" \")\n", "16": "def compareValues(a, b, c, d):\n        log1 = math.log10(a)\n        num1 = log1 * b\n        log2 = math.log10(c)\n        num2 = log2 * d\n        if num1 > num2 :\n                print(a, '^', b)\n        else :\n                print(c, '^', d)\n", "17": "def compareVal(x, y) :\n        a = y * log(x);\n        b = x * log(y);\n        if (a > b) :\n                print(x, \"^\", y, \">\", y, \"^\", x);\n        elif (a < b) :\n                print(x, \"^\", y, \"<\", y ,\"^\", x);\n        elif (a == b) :\n                print(x, \"^\", y, \"=\", y, \"^\", x);", "18": "def least_prime_factor():\n        for i in range(2, N):\n                if (lpf[i] == 0):\n                        for j in range(i, N, i):\n                                if (lpf[j] == 0):\n                                        lpf[j] = i\ndef Mobius():\n        for i in range(1, N):\n                if (i == 1):\n                        mobius[i] = 1\n                else:\n                        if (lpf[ (i // lpf[i]) ] == lpf[i]):\n                                mobius[i] = 0\n                        else:\n                                mobius[i] = -1 * mobius[i // lpf[i]]\ndef gcd_pairs(a, n):\n        maxi = 0\n        fre = [0 for i in range(N)]\n        for i in range(n):\n                fre[a[i]] += 1\n                maxi = max(a[i], maxi)\n        least_prime_factor()\n        Mobius()\n        ans = 0\n        for i in range(1, maxi + 1):\n                if (mobius[i] == 0):\n                        continue\n                temp = 0\n                for j in range(i, maxi + 1, i):\n                        temp += fre[j]\n                ans += temp * (temp - 1) // 2 * mobius[i]\n        return ans", "19": "def power(p):\n        res = 1\n        for i in range(1, p + 1):\n                res *= 2\n                res %= mod\n        return res % mod\ndef subset_square_sum(A):\n        n = len(A)\n        ans = 0\n        for i in A:\n                ans += i * i % mod\n                ans %= mod\n        return ans * power(n - 1) % mod", "20": "def calculate_angle(n, i, j, k):\n        x, y = 0, 0\n        if (i < j):\n                x = j - i\n        else:\n                x = j + n - i\n        if (j < k):\n                y = k - j\n        else:\n                y = k + n - j\n        ang1 = (180 * x) // n\n        ang2 = (180 * y) // n\n        ans = 180 - ang1 - ang2\n        return ans", "21": "def gcd(a, b):\n        if (a == 0):\n                return b;\n        return gcd(b % a, a);\ndef divTermCount(a, b, c, num):\n        return ((num / a) + (num / b) + (num / c) -\n                                (num / ((a * b) / gcd(a, b))) -\n                                (num / ((c * b) / gcd(c, b))) -\n                                (num / ((a * c) / gcd(a, c))) +\n                                (num / ((a * b * c) / gcd(gcd(a, b), c))));\ndef findNthTerm(a, b, c, n):\n        low = 1; high = sys.maxsize; mid = 0;\n        while (low < high):\n                mid = low + (high - low) / 2;\n                if (divTermCount(a, b, c, mid) < n):\n                        low = mid + 1;\n                else:\n                        high = mid;\n        return int(low);", "22": "def preCompute():\n        fact[0] = 1\n        result[0] = 1\n        for i in range(1, MAX + 1):\n                fact[i] = ((fact[i - 1] % MOD) * i) % MOD\n                result[i] = ((result[i - 1] % MOD) *\n                                        (fact[i] % MOD)) % MOD\ndef performQueries(q, n):\n        preCompute()\n        for i in range(n):\n                print(result[q[i]])", "23": "def modFact(n, m) :\n        result = 1\n        for i in range(1, m + 1) :\n                result = (result * i) % MOD\n        return result", "24": "def findMinValue(arr, n):\n        sum = 0\n        for i in range(n):\n                sum += arr[i]\n        return (sum // n) + 1", "25": "def count(n) :\n        return n * (3 * n - 1) // 2;", "26": "def diameter(n):\n        L, H, templen = 0, 0, 0;\n        L = 1;\n        H = 0;\n        if (n == 1):\n                return 1;\n        if (n == 2):\n                return 2;\n        if (n == 3):\n                return 3;\n        while (L * 2 <= n):\n                L *= 2;\n                H += 1;\n        if (n >= L * 2 - 1):\n                return 2 * H + 1;\n        elif (n >= L + (L / 2) - 1):\n                return 2 * H;\n        return 2 * H - 1;", "27": "def lcm(a, b) :\n        GCD = gcd(a, b);\n        return (a * b) // GCD;\ndef MinLCM(a, n) :\n        Prefix = [0] * (n + 2);\n        Suffix = [0] * (n + 2);\n        Prefix[1] = a[0];\n        for i in range(2, n + 1) :\n                Prefix[i] = lcm(Prefix[i - 1], a[i - 1]);\n        Suffix[n] = a[n - 1];\n        for i in range(n - 1, 0, -1) :\n                Suffix[i] = lcm(Suffix[i + 1], a[i - 1]);\n        ans = min(Suffix[2], Prefix[n - 1]);\n        for i in range(2, n) :\n                ans = min(ans, lcm(Prefix[i - 1], Suffix[i + 1]));\n        return ans;", "28": "def isFactorial(n) :\n        i = 1;\n        while(True) :\n                if (n % i == 0) :\n                        n //= i;\n                else :\n                        break;\n                i += 1;\n        if (n == 1) :\n                return True;\n        else :\n                return False;", "29": "def digitDividesK(num, k):\n        while (num):\n                d = num % 10\n                if (d != 0 and k % d == 0):\n                        return True\n                num = num // 10\n        return False\ndef findCount(l, r, k):\n        count = 0\n        for i in range(l, r + 1):\n                if (digitDividesK(i, k)):\n                        count += 1\n        return count", "30": "def maxXOR(arr, n):\n        xorArr = 0\n        for i in range(n):\n                xorArr ^= arr[i]\n        ans = 0\n        for i in range(n):\n                ans = max(ans, (xorArr ^ arr[i]))\n        return ans", "31": "def find_composite_nos(n) :\n        print(9 * n, 8 * n);", "32": "def decBinary(arr, n):\n        k = int(math.log2(n))\n        while (n > 0):\n                arr[k] = n % 2\n                k = k - 1\n                n = n//2\ndef binaryDec(arr, n):\n        ans = 0\n        for i in range(0, n):\n                ans = ans + (arr[i] << (n - i - 1))\n        return ans\ndef getNum(n, k):\n        l = int(math.log2(n)) + 1\n        a = [0 for i in range(0, l)]\n        decBinary(a, n)\n        if(k > l):\n                return n\n        if(a[k - 1] == 0):\n                a[k - 1] = 1\n        else:\n                a[k - 1] = 0\n        return binaryDec(a, l)", "33": "def Count_subarray(arr, n) :\n        total_sum = 0;\n        count = 0;\n        for i in range(n) :\n                total_sum += arr[i];\n        for i in range(n) :\n                subarray_sum = 0;\n                for j in range(i, n) :\n                        subarray_sum += arr[j];\n                        remaining_sum = total_sum - subarray_sum;\n                        if (subarray_sum > remaining_sum) :\n                                count += 1;\n        return count;\n", "34": "def Count_subarray(arr, n):\n        subarray_sum, remaining_sum, count = 0, 0, 0;\n        for i in range(n):\n                for j in range(i, n):\n                        subarray_sum = 0;\n                        remaining_sum = 0;\n                        for k in range(i, j + 1):\n                                subarray_sum += arr[k];\n                        for l in range(i):\n                                remaining_sum += arr[l];\n                        for l in range(j + 1, n):\n                                remaining_sum += arr[l];\n                        if (subarray_sum > remaining_sum):\n                                count += 1;\n        return count;", "35": "def smallestPoss(s, n):\n        ans = \"\";\n        arr = [0]*10;\n        for i in range(n):\n                arr[ord(s[i]) - 48] += 1;\n        for i in range(10):\n                for j in range(arr[i]):\n                        ans = ans + str(i);\n        return ans;\n", "36": "def noOfCards(n):\n        return n * (3 * n + 1) // 2", "37": "def powOfPositive(n) :\n        pos = floor(log2(n));\n        return 2**pos;\ndef powOfNegative(n) :\n        pos = ceil(log2(n));\n        return (-1 * pow(2, pos));\ndef highestPowerOf2(n) :\n        if (n > 0) :\n                print(powOfPositive(n));\n        else :\n                n = -n;\n                print(powOfNegative(n));", "38": "def printValueOfPi(N) :\n        b = '{:.' + str(N) + 'f}'\n        pi= b.format(2 * acos(0.0))\n        print(pi);\n", "39": "def nearest(n) :\n        prevSquare = int(sqrt(n));\n        nextSquare = prevSquare + 1;\n        prevSquare = prevSquare * prevSquare;\n        nextSquare = nextSquare * nextSquare;\n        ans        = (prevSquare - n) if (n - prevSquare) < (nextSquare - n) else (nextSquare - n);\n        return ans;\n", "40": "def power(p) :\n        res = 1; \n        for i in range(1, p + 1) :\n                res *= 2; \n                res %= mod; \n        return res % mod;\ndef subset_cube_sum(A) : \n        n = len(A); \n        ans = 0; \n        for i in A :\n                ans += (i * i * i) % mod; \n                ans %= mod; \n        return (ans * power(n - 1)) % mod;", "41": "def printPairs(arr, n):\n        for i in range(n):\n                for j in range(n):\n                        print(\"(\",arr[i],\",\",arr[j],\")\",end=\", \")", "42": "def isPrime( N):\n        isPrime = True;\n        arr= [ 7, 11, 13, 17, 19, 23, 29, 31 ]\n        if (N < 2) :\n                isPrime = False\n        if (N % 2 == 0 or N % 3 == 0 or N % 5 == 0):\n                isPrime = False\n        for i in range(0,int(math.sqrt(N)), 30) :\n                for c in arr:\n                        if (c > int(math.sqrt(N))):\n                                break\n                        else :\n                                if (N % (c + i) == 0) :\n                                        isPrime = False\n                                        break\n                        if (not isPrime):\n                                break\n        if (isPrime):\n                print(\"Prime Number\")\n        else:\n                print(\"Not a Prime Number\")", "43": "def canBeReduced(x,y):\n        maxi = max(x, y)\n        mini = min(x, y)\n        if (((x + y) % 3) == 0 and maxi <= 2*mini):\n                print(\"YES\")\n        else:\n                print(\"NO\")", "44": "def largest_sum(arr, n):\n        maximum = -1\n        m = dict()\n        for i in arr:\n                m[i] = m.get(i,0) + 1\n        for j in list(m):\n                if ((j in m) and m[j] > 1):\n                        x, y = 0, 0\n                        if 2*j in m:\n                                m[2*j] = m[2 * j]+ m[j]// 2\n                        else:\n                                m[2*j] = m[j]//2\n                        if (2 * j > maximum):\n                                maximum = 2 * j\n        return maximum", "45": "def isPerfectCube(x):\n        x = abs(x)\n        return int(round(x ** (1. / 3))) ** 3 == x\ndef checkCube(a, b):\n        s1 = str(a)\n        s2 = str(b)\n        c = int(s1 + s2)\n        if (isPerfectCube(c)):\n                print(\"Yes\")\n        else:\n                print(\"No\")\n", "46": "def probability(N):\n        a = 2\n        b = 3\n        if N == 1:\n                return a\n        elif N == 2:\n                return b\n        else:\n                for i in range(3, N + 1):\n                        c = a + b\n                        a = b\n                        b = c\n                return b\ndef operations(N):\n        x = probability (N)\n        y = math.pow(2, N)\n        return round(x / y, 2)", "47": "def NthSmallest(K):\n        Q = []\n        for i in range(1,10):\n                Q.append(i)\n        for i in range(1,K+1):\n                x = Q[0]\n                Q.remove(Q[0])\n                if (x % 10 != 0):\n                        Q.append(x * 10 + x % 10 - 1)\n                Q.append(x * 10 + x % 10)\n                if (x % 10 != 9):\n                        Q.append(x * 10 + x % 10 + 1)\n        return x\n", "48": "def power(x, y, p):\n        res = 1\n        x = x % p\n        while (y > 0):\n                if (y & 1):\n                        res = (res * x) % p\n                x = (x * x) % p\n        return res\ndef modInverse(n, p):\n        return power(n, p - 2, p)\ndef nCrModPFermat(n, r, p):\n        if (r == 0):\n                return 1\n        if (n < r):\n                return 0\n        fac = [0]*(n + 1)\n        fac[0] = 1\n        for i in range(1, n + 1):\n                fac[i] = fac[i - 1] * i % p\n        return (fac[n] * modInverse(fac[r], p) % p *\n                        modInverse(fac[n - r], p) % p) % p\ndef SumOfXor(a, n):\n        mod = 10037\n        answer = 0\n        for k in range(32):\n                x = 0\n                y = 0\n                for i in range(n):\n                        if (a[i] & (1 << k)):\n                                x += 1\n                        else:\n                                y += 1\n                answer += ((1 << k) % mod * (nCrModPFermat(x, 3, mod)\n                                        + x * nCrModPFermat(y, 2, mod)) % mod) % mod\n        return answer\n", "49": "def Solve(arr, size, n):\n        v = [0] * (n + 1);\n        for i in range(size):\n                v[arr[i]] += 1\n        max1 = max(set(arr), key = v.count)\n        diff1 = n + 1 - v.count(0)\n        max_size = max(min(v[max1] - 1, diff1),\n                                min(v[max1], diff1 - 1))\n        print(\"Maximum size is :\", max_size)\n        print(\"The First Array Is : \")\n        for i in range(max_size):\n                print(max1, end = \" \")\n                v[max1] -= 1\n        print()\n        print(\"The Second Array Is : \")\n        for i in range(n + 1):\n                if (v[i] > 0):\n                        print(i, end = \" \")\n                        max_size -= 1\n                if (max_size < 1):\n                        break\n        print()"}, "C++": {"0": "double Loss(double SP, double P)\r\n{\r\n    double loss;\r\n    loss = ((2 * P * P * SP) /\r\n            (100 * 100 - P * P));\r\n    cout << \"Loss = \" << round(loss, 3) << endl;\r\n}", "1": "int countSquares(int r, int c, int m) {\r\n        int squares = 0;\r\n        for (int i = 1; i < 9; i++) {\r\n                for (int j = 1; j < 9; j++) {\r\n                        if (max(abs(i - r), abs(j - c)) <= m) {\r\n                                squares = squares + 1;\r\n                        }\r\n                }\r\n        }\r\n        return squares;\r\n}", "2": "int freqPairs(vector<int> arr, int n) {\r\n        int max = arr[0];\r\n        for (int i = 0; i < n; i++) {\r\n                if (arr[i] > max) {\r\n                        max = arr[i];\r\n                }\r\n        }\r\n        vector<int> freq(max + 1, 0);\r\n        int count = 0;\r\n        for (int i = 0; i < n; i++) {\r\n                freq[arr[i]] += 1;\r\n        }\r\n        for (int i = 0; i < n; i++) {\r\n                for (int j = 2 * arr[i]; j <= max; j += arr[i]) {\r\n                        if (freq[j] >= 1) {\r\n                                count += freq[j];\r\n                        }\r\n                }\r\n                if (freq[arr[i]] > 1) {\r\n                        count += freq[arr[i]] - 1;\r\n                        freq[arr[i]] -= 1;\r\n                }\r\n        }\r\n        return count;\r\n}", "3": "int smallestIndex(int a[], int n)\r\n{\r\n        int right1 = 0;\r\n        int right0 = 0;\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n                if (a[i] == 1)\r\n                        right1 = i;\r\n                else\r\n                        right0 = i;\r\n        }\r\n        return min(right1, right0);\r\n}", "4": "int primeCount(vector<int> arr, int n) {\n        int max_val = *max_element(arr.begin(), arr.end());\n        vector<bool> prime(max_val + 1, true);\n        prime[0] = prime[1] = false;\n        int p = 2;\n        while (p * p <= max_val) {\n                if (prime[p] == true) {\n                        for (int i = p * 2; i <= max_val; i += p) {\n                                prime[i] = false;\n                        }\n                }\n                p += 1;\n        }\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n                if (prime[arr[i]]) {\n                        count++;\n                }\n        }\n        return count;\n}\n\nvoid getPrefixArray(vector<int> arr, int n, vector<int> &pre) {\n        pre[0] = arr[0];\n        for (int i = 1; i < n; i++) {\n                pre[i] = pre[i - 1] + arr[i];\n        }\n}", "5": "int getAverage(int x, int y) {\r\n        int avg = (x & y) + ((x ^ y) >> 1);\r\n        return avg;\r\n}", "6": "int numberOfDays(int a, int b, int n) {\r\n    int Days = b * (n + a) / (a + b);\r\n    return Days;\r\n}", "7": "int count(int N) {\r\n        int a = 0;\r\n        a = (N * (N + 1)) / 2;\r\n        return a;\r\n}", "8": "bool canConvert(int a, int b) {\r\n        while (b > a) {\r\n                if (b % 10 == 1) {\r\n                        b /= 10;\r\n                        continue;\r\n                }\r\n                if (b % 2 == 0) {\r\n                        b /= 2;\r\n                        continue;\r\n                }\r\n                return false;\r\n        }\r\n        if (b == a) {\r\n                return true;\r\n        }\r\n        return false;\r\n}", "9": "int MinimumValue(int x, int y)\r\n{\r\n        if (x > y)\r\n        {\r\n                int temp = x;\r\n                x = y;\r\n                y = temp;\r\n        }\r\n        int a = 1;\r\n        int b = x - 1;\r\n        int c = y - b;\r\n        cout << a << \" \" << b << \" \" << c << endl;\r\n}", "10": "void decimalToBinary(int n) {\r\n        if (n == 0) {\r\n                cout << \"0\";\r\n                return;\r\n        }\r\n        decimalToBinary(n / 2);\r\n        cout << n % 2;\r\n}", "11": "int Max_sum(int a[], int n)\r\n{\r\n        int pos = 0, neg = 0;\r\n        for(int i=0; i<n; i++)\r\n        {\r\n                if(a[i] > 0)\r\n                        pos = 1;\r\n                else if(a[i] < 0)\r\n                        neg = 1;\r\n                if(pos == 1 && neg == 1)\r\n                        break;\r\n        }\r\n        int sum = 0;\r\n        if(pos == 1 && neg == 1)\r\n        {\r\n                for(int i=0; i<n; i++)\r\n                        sum += abs(a[i]);\r\n        }\r\n        else if(pos == 1)\r\n        {\r\n                int mini = a[0];\r\n                sum = a[0];\r\n                for(int i=1; i<n; i++)\r\n                {\r\n                        mini = min(mini, a[i]);\r\n                        sum += a[i];\r\n                }\r\n                sum -= 2*mini;\r\n        }\r\n        else if(neg == 1)\r\n        {\r\n                for(int i=0; i<n; i++)\r\n                        a[i] = abs(a[i]);\r\n                int mini = a[0];\r\n                sum = a[0];\r\n                for(int i=1; i<n; i++)\r\n                {\r\n                        mini = min(mini, a[i]);\r\n                        sum += a[i];\r\n                }\r\n                sum -= 2*mini;\r\n        }\r\n        return sum;\r\n}", "12": "int Wedderburn(int n) {\r\n        if (n <= 2) {\r\n                return store[n];\r\n        }\r\n        else if (n % 2 == 0) {\r\n                int x = n / 2;\r\n                int ans = 0;\r\n                for (int i = 1; i < x; i++) {\r\n                        ans += store[i] * store[n - i];\r\n                }\r\n                ans += (store[x] * (store[x] + 1)) / 2;\r\n                store[n] = ans;\r\n                return ans;\r\n        }\r\n        else {\r\n                int x = (n + 1) / 2;\r\n                int ans = 0;\r\n                for (int i = 1; i < x; i++) {\r\n                        ans += store[i] * store[n - i];\r\n                }\r\n                store[n] = ans;\r\n                return ans;\r\n        }\r\n}\r\n\r\nvoid Wedderburn_Etherington(int n) {\r\n        store[0] = 0;\r\n        store[1] = 1;\r\n        store[2] = 1;\r\n        for (int i = 0; i < n; i++) {\r\n                cout << Wedderburn(i) << \", \";\r\n        }\r\n}", "13": NaN, "14": NaN, "15": "int fact[100];\r\nint zig[100];\r\nvoid zigZag(int n)\r\n{\r\n    fact[0] = 1;\r\n    for(int i = 1; i <= n; i++)\r\n    {\r\n        fact[i] = fact[i - 1] * i;\r\n    }\r\n    zig[0] = 1;\r\n    zig[1] = 1;\r\n    cout<<\"zig zag numbers: \";\r\n    cout<<zig[0]<<zig[1]<<\" \";\r\n    for(int i = 2; i <= n; i++)\r\n    {\r\n        int sum = 0;\r\n        for(int k = 0; k < i; k++)\r\n        {\r\n            sum += ((fact[i - 1] / (fact[i - 1 - k] * fact[k])) * zig[k] * zig[i - 1 - k]);\r\n        }\r\n        zig[i] = sum / 2;\r\n        cout<<sum / 2<<\" \";\r\n    }\r\n}", "16": "int main()\r\n{\r\n        double a, b, c, d;\r\n        cout << \"Enter a: \";\r\n        cin >> a;\r\n        cout << \"Enter b: \";\r\n        cin >> b;\r\n        cout << \"Enter c: \";\r\n        cin >> c;\r\n        cout << \"Enter d: \";\r\n        cin >> d;\r\n        double log1 = log10(a);\r\n        double num1 = log1 * b;\r\n        double log2 = log10(c);\r\n        double num2 = log2 * d;\r\n        if (num1 > num2)\r\n        {\r\n                cout << a << \"^\" << b << endl;\r\n        }\r\n        else\r\n        {\r\n                cout << c << \"^\" << d << endl;\r\n        }\r\n        return 0;\r\n}", "17": "int main() {\r\n        int x, y;\r\n        cout << \"Enter two numbers: \";\r\n        cin >> x >> y;\r\n        if (pow(x, y) > pow(y, x)) {\r\n                cout << x << \"^\" << y << \"> \" << y << \"^\" << x << endl;\r\n        } else if (pow(x, y) < pow(y, x)) {\r\n                cout << x << \"^\" << y << \"< \" << y << \"^\" << x << endl;\r\n        } else {\r\n                cout << x << \"^\" << y << \"= \" << y << \"^\" << x << endl;\r\n        }\r\n        return 0;\r\n}", "18": "int main()\r\n{\r\n        int n;\r\n        cin >> n;\r\n        int a[n];\r\n        for (int i = 0; i < n; i++)\r\n                cin >> a[i];\r\n        int ans = gcd_pairs(a, n);\r\n        cout << ans << endl;\r\n        return 0;\r\n}", "19": "const int mod = 1e9 + 7;\nint power(int p) {\n        int res = 1;\n        for (int i = 1; i <= p; i++) {\n                res *= 2;\n                res %= mod;\n        }\n        return res % mod;\n}\nint subset_square_sum(vector<int> A) {\n        int n = A.size();\n        int ans = 0;\n        for (int i : A) {\n                ans += i * i % mod;\n                ans %= mod;\n        }\n        return ans * power(n - 1) % mod;\n}", "20": "int calculate_angle(int n, int i, int j, int k)\n{\n        int x, y;\n        if (i < j)\n                x = j - i;\n        else\n                x = j + n - i;\n        if (j < k)\n                y = k - j;\n        else\n                y = k + n - j;\n        int ang1 = (180 * x) / n;\n        int ang2 = (180 * y) / n;\n        int ans = 180 - ang1 - ang2;\n        return ans;\n}", "21": "int gcd(int a, int b)\n{\n        if (a == 0)\n                return b;\n        return gcd(b % a, a);\n}\nint divTermCount(int a, int b, int c, int num)\n{\n        return ((num / a) + (num / b) + (num / c) -\n                                (num / ((a * b) / gcd(a, b))) -\n                                (num / ((c * b) / gcd(c, b))) -\n                                (num / ((a * c) / gcd(a, c))) +\n                                (num / ((a * b * c) / gcd(gcd(a, b), c))));\n}\nint findNthTerm(int a, int b, int c, int n)\n{\n        int low = 1, high = INT_MAX, mid = 0;\n        while (low < high)\n        {\n                mid = low + (high - low) / 2;\n                if (divTermCount(a, b, c, mid) < n)\n                        low = mid + 1;\n                else\n                        high = mid;\n        }\n        return low;\n}", "22": NaN, "23": "int modFact(int n, int m) {\r\n        int result = 1;\r\n        for (int i = 1; i <= m; i++) {\r\n                result = (result * i) % MOD;\r\n        }\r\n        return result;\r\n}", "24": "int findMinValue(int arr[], int n)\r\n{\r\n        int sum = 0;\r\n        for (int i = 0; i < n; i++)\r\n                sum += arr[i];\r\n        return (sum / n) + 1;\r\n}", "25": "int count(int n) {\n    return n * (3 * n - 1) / 2;\n}", "26": "int diameter(int n) {\r\n        int L, H, templen;\r\n        L = 1;\r\n        H = 0;\r\n        if (n == 1) {\r\n                return 1;\r\n        }\r\n        if (n == 2) {\r\n                return 2;\r\n        }\r\n        if (n == 3) {\r\n                return 3;\r\n        }\r\n        while (L * 2 <= n) {\r\n                L *= 2;\r\n                H += 1;\r\n        }\r\n        if (n >= L * 2 - 1) {\r\n                return 2 * H + 1;\r\n        }\r\n        else if (n >= L + (L / 2) - 1) {\r\n                return 2 * H;\r\n        }\r\n        return 2 * H - 1;\r\n}", "27": "int gcd(int a, int b) {\r\n        if (b == 0)\r\n                return a;\r\n        return gcd(b, a % b);\r\n}\r\nint lcm(int a, int b) {\r\n        return (a * b) / gcd(a, b);\r\n}\r\nint MinLCM(vector<int> a, int n) {\r\n        vector<int> Prefix(n + 2);\r\n        vector<int> Suffix(n + 2);\r\n        Prefix[1] = a[0];\r\n        for (int i = 2; i <= n; i++)\r\n                Prefix[i] = lcm(Prefix[i - 1], a[i - 1]);\r\n        Suffix[n] = a[n - 1];\r\n        for (int i = n - 1; i >= 1; i--)\r\n                Suffix[i] = lcm(Suffix[i + 1], a[i - 1]);\r\n        int ans = min(Suffix[2], Prefix[n - 1]);\r\n        for (int i = 2; i < n; i++)\r\n                ans = min(ans, lcm(Prefix[i - 1], Suffix[i + 1]));\r\n        return ans;\r\n}", "28": "bool isFactorial(int n) {\r\n        int i = 1;\r\n        while(true) {\r\n                if (n % i == 0) {\r\n                        n /= i;\r\n                } else {\r\n                        break;\r\n                }\r\n                i += 1;\r\n        }\r\n        if (n == 1) {\r\n                return true;\r\n        } else {\r\n                return false;\r\n        }\r\n}", "29": "bool digitDividesK(int num, int k)\r\n{\r\n        while (num)\r\n        {\r\n                int d = num % 10;\r\n                if (d != 0 && k % d == 0)\r\n                        return true;\r\n                num = num / 10;\r\n        }\r\n        return false;\r\n}\r\nint findCount(int l, int r, int k)\r\n{\r\n        int count = 0;\r\n        for (int i = l; i <= r; i++)\r\n                if (digitDividesK(i, k))\r\n                        count++;\r\n        return count;\r\n}", "30": "int maxXOR(vector<int> arr, int n) {\r\n        int xorArr = 0;\r\n        for (int i = 0; i < n; i++) {\r\n                xorArr ^= arr[i];\r\n        }\r\n        int ans = 0;\r\n        for (int i = 0; i < n; i++) {\r\n                ans = max(ans, (xorArr ^ arr[i]));\r\n        }\r\n        return ans;\r\n}", "31": "void find_composite_nos(int n) {\r\n    cout << 9 * n << \" \" << 8 * n << endl;\r\n}", "32": "int decBinary(vector<int> &arr, int n) {\r\n        int k = log2(n);\r\n        while (n > 0) {\r\n                arr[k] = n % 2;\r\n                k = k - 1;\r\n                n = n/2;\r\n        }\r\n}\r\nint binaryDec(vector<int> &arr, int n) {\r\n        int ans = 0;\r\n        for (int i = 0; i < n; i++) {\r\n                ans = ans + (arr[i] << (n - i - 1));\r\n        }\r\n        return ans;\r\n}\r\nint getNum(int n, int k) {\r\n        int l = log2(n) + 1;\r\n        vector<int> a(l, 0);\r\n        decBinary(a, n);\r\n        if (k > l) {\r\n                return n;\r\n        }\r\n        if (a[k - 1] == 0) {\r\n                a[k - 1] = 1;\r\n        } else {\r\n                a[k - 1] = 0;\r\n        }\r\n        return binaryDec(a, l);\r\n}", "33": "int Count_subarray(vector<int> arr, int n) {\r\n    int total_sum = 0;\r\n    int count = 0;\r\n    for (int i = 0; i < n; i++) {\r\n        total_sum += arr[i];\r\n    }\r\n    for (int i = 0; i < n; i++) {\r\n        int subarray_sum = 0;\r\n        for (int j = i; j < n; j++) {\r\n            subarray_sum += arr[j];\r\n            int remaining_sum = total_sum - subarray_sum;\r\n            if (subarray_sum > remaining_sum) {\r\n                count += 1;\r\n            }\r\n        }\r\n    }\r\n    return count;\r\n}", "34": "int Count_subarray(vector<int> arr, int n)\r\n{\r\n    int subarray_sum, remaining_sum, count;\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        for (int j = i; j < n; j++)\r\n        {\r\n            subarray_sum = 0;\r\n            remaining_sum = 0;\r\n            for (int k = i; k <= j; k++)\r\n            {\r\n                subarray_sum += arr[k];\r\n            }\r\n            for (int l = 0; l < i; l++)\r\n            {\r\n                remaining_sum += arr[l];\r\n            }\r\n            for (int l = j + 1; l < n; l++)\r\n            {\r\n                remaining_sum += arr[l];\r\n            }\r\n            if (subarray_sum > remaining_sum)\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    return count;\r\n}", "35": "string smallestPoss(string s, int n) {\r\n    string ans = \"\";\r\n    vector<int> arr(10, 0);\r\n    for (int i = 0; i < n; i++) {\r\n        arr[s[i] - '0'] += 1;\r\n    }\r\n    for (int i = 0; i < 10; i++) {\r\n        for (int j = 0; j < arr[i]; j++) {\r\n            ans += (char)(i + '0');\r\n        }\r\n    }\r\n    return ans;\r\n}", "36": "int noOfCards(int n)\r\n{\r\n    return n * (3 * n + 1) / 2;\r\n}", "37": "int powOfPositive(int n) {\r\n        int pos = floor(log2(n));\r\n        return pow(2, pos);\r\n}\r\nint powOfNegative(int n) {\r\n        int pos = ceil(log2(n));\r\n        return (-1 * pow(2, pos));\r\n}\r\nint highestPowerOf2(int n) {\r\n        if (n > 0) {\r\n                cout << powOfPositive(n);\r\n        } else {\r\n                n = -n;\r\n                cout << powOfNegative(n);\r\n        }\r\n}", "38": "void printValueOfPi(int N) {\r\n        std::string b = std::to_string(N);\r\n        std::string pi = std::to_string(2 * acos(0.0));\r\n        std::cout << pi << std::endl;\r\n}", "39": "int nearest(int n) {\r\n        int prevSquare = sqrt(n);\r\n        int nextSquare = prevSquare + 1;\r\n        prevSquare = prevSquare * prevSquare;\r\n        nextSquare = nextSquare * nextSquare;\r\n        int ans        = (prevSquare - n) if (n - prevSquare) < (nextSquare - n) else (nextSquare - n);\r\n        return ans;\r\n}", "40": "int power(int p) {\r\n        int res = 1; \r\n        for (int i = 1; i <= p; i++) {\r\n                res *= 2; \r\n                res %= mod; \r\n        }\r\n        return res % mod;\r\n}\r\nint subset_cube_sum(vector<int> A) {\r\n        int n = A.size(); \r\n        int ans = 0; \r\n        for (int i : A) {\r\n                ans += (i * i * i) % mod; \r\n                ans %= mod; \r\n        }\r\n        return (ans * power(n - 1)) % mod;\r\n}", "41": "void printPairs(int arr[], int n)\r\n{\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n                for (int j = 0; j < n; j++)\r\n                {\r\n                        cout << \"(\" << arr[i] << \",\" << arr[j] << \")\" << \",\";\r\n                }\r\n        }\r\n}", "42": NaN, "43": NaN, "44": "int largest_sum(vector<int> arr, int n) {\r\n        map<int, int> m;\r\n        int maximum = -1;\r\n        for (int i : arr) {\r\n                m[i]++;\r\n        }\r\n        for (int j : m) {\r\n                if (m[j.first] > 1) {\r\n                        int x = 0, y = 0;\r\n                        if (m.find(2 * j.first) != m.end()) {\r\n                                m[2 * j.first] += m[j.first] / 2;\r\n                        } else {\r\n                                m[2 * j.first] = m[j.first] / 2;\r\n                        }\r\n                        if (2 * j.first > maximum) {\r\n                                maximum = 2 * j.first;\r\n                        }\r\n                }\r\n        }\r\n        return maximum;\r\n}", "45": "bool isPerfectCube(int x)\r\n{\r\n        x = abs(x);\r\n        return (int)round(pow(x, 1. / 3)) == x;\r\n}\r\nvoid checkCube(int a, int b)\r\n{\r\n        string s1 = to_string(a);\r\n        string s2 = to_string(b);\r\n        int c = stoi(s1 + s2);\r\n        if (isPerfectCube(c))\r\n                cout << \"Yes\" << endl;\r\n        else\r\n                cout << \"No\" << endl;\r\n}", "46": "int probability(int N) {\r\n        int a = 2;\r\n        int b = 3;\r\n        if (N == 1) {\r\n                return a;\r\n        } else if (N == 2) {\r\n                return b;\r\n        } else {\r\n                for (int i = 3; i <= N; i++) {\r\n                        int c = a + b;\r\n                        a = b;\r\n                        b = c;\r\n                }\r\n                return b;\r\n        }\r\n}\r\ndouble operations(int N) {\r\n        double x = probability(N);\r\n        double y = pow(2, N);\r\n        return round(x / y, 2);\r\n}\r\nint main() {\r\n        int N;\r\n        cin >> N;\r\n        cout << operations(N);\r\n        return 0;\r\n}", "47": NaN, "48": NaN, "49": NaN}}, "Python -  Javascript": {"id": {"0": 10751, "1": 10721, "2": 10719, "3": 10707, "4": 10706, "5": 10703, "6": 10694, "7": 10677, "8": 10668, "9": 10653, "10": 10573, "11": 10569, "12": 10568, "13": 10546, "14": 10540, "15": 10539, "16": 10502, "17": 10492, "18": 10475, "19": 10474, "20": 10462, "21": 10452, "22": 10445, "23": 10438, "24": 10434, "25": 10423, "26": 10408, "27": 10406, "28": 10394, "29": 10377, "30": 10367, "31": 10345, "32": 10337, "33": 10335, "34": 10330, "35": 10325, "36": 10309, "37": 10269, "38": 10267, "39": 10238, "40": 10237, "41": 10233, "42": 10228, "43": 10212, "44": 10186, "45": 10174, "46": 10155, "47": 10145, "48": 10124, "49": 10123}, "Python": {"0": "def CountWays(n) :\n        ans = (n - 1) // 2\n        return ans", "1": "def printKNumbers(N, K):\n        for i in range(K - 1):\n                print(1, end = ' ')\n        print(N - K + 1)", "2": "def findMaxPrimeDivisor(n):\n        max_possible_prime = 0\n        while (n % 2 == 0):\n                max_possible_prime += 1\n                n = n // 2\n        i = 3\n        while(i * i <= n):\n                while (n % i == 0):\n                        max_possible_prime += 1\n                        n = n // i\n                i = i + 2\n        if (n > 2):\n                max_possible_prime += 1\n        print(max_possible_prime)", "3": "def countValues(N):\n        div = []\n        i = 2\n        while ((i * i) <= N):\n                if (N % i == 0):\n                        div.append(i)\n                        if (N != i * i):\n                                div.append(N // i)\n                i += 1 \n        answer = 0\n        i = 1\n        while((i * i) <= N - 1):\n                if ((N - 1) % i == 0):\n                        if (i * i == N - 1):\n                                answer += 1\n                        else:\n                                answer += 2\n                i += 1\n        for d in div:\n                K = N\n                while (K % d == 0):\n                        K //= d\n                if ((K - 1) % d == 0):\n                        answer += 1\n        return answer", "4": "def countValues(n):\n        answer = 0\n        for i in range(2, n + 1, 1):\n                k = n\n                while (k >= i):\n                        if (k % i == 0):\n                                k //= i\n                        else:\n                                k -= i\n                if (k == 1):\n                        answer += 1\n        return answer", "5": "def sumOfDigits(n):\n        sum = 0\n        while(n > 0):\n                sum += n % 10\n                n //= 10\n        return sum\ndef smallestNum(X, Y):\n        res = -1;\n        for i in range(X, MAXN):\n                sum_of_digit = sumOfDigits(i)\n                if sum_of_digit % Y == 0:\n                        res = i\n                        break\n        return res", "6": "def calculateWays(N):\n        x = 0;\n        v = [];\n        for i in range(N):\n                v.append(0);\n        for i in range(N // 2 + 1):\n                if (N % 2 == 0 and i == N // 2):\n                        break;\n                x = N * (i + 1) - (i + 1) * i;\n                v[i] = x;\n                v[N - i - 1] = x;\n        return v;\ndef printArray(v):\n        for i in range(len(v)):\n                print(v[i], end = \" \");", "7": "def isPerfectSquare(x):\n        sr = sqrt(x)\n        return((sr - floor(sr)) == 0)\ndef checkSunnyNumber(N):\n        if (isPerfectSquare(N + 1)):\n                print(\"Yes\")\n        else:\n                print(\"No\")", "8": "def sumEvenNumbers(N, K):\n        check = N - 2 * (K - 1)\n        if (check > 0 and check % 2 == 0):\n                for i in range(K - 1):\n                        print(\"2 \", end = \"\")\n                print(check)\n        else:\n                print(\"-1\")", "9": "def checksum(n, k):\n        first_term = ((2 * n) / k + (1 - k)) / 2.0\n        if (first_term - int(first_term) == 0):\n                for i in range(int(first_term),\n                                        int(first_term) + k):\n                        print(i, end = ' ')\n        else:\n                print('-1')", "10": "def getFactorization(x):\n        count = 0\n        v = []\n        while (x % 2 == 0):\n                count += 1\n                x = x // 2\n        if (count != 0):\n                v.append(count)\n        for i in range(3, int(sqrt(x)) + 12):\n                count = 0\n                while (x % i == 0):\n                        count += 1\n                        x //= i\n                if (count != 0):\n                        v.append(count)\n        if (x > 1):\n                v.append(1)\n        return v\ndef nonPrimeDivisors(N):\n        v = getFactorization(N)\n        ret = 1\n        for i in range(len(v)):\n                ret = ret * (v[i] + 1)\n        ret = ret - len(v)\n        return ret", "11": "def nCr(n, r):\n        return fact(n) / (fact(r) * \n                                        fact(n - r))\ndef fact(n):\n        res = 1\n        for i in range(2, n + 1):\n                res = res * i \n        return res\ndef sumSubsequences(arr, n, k):\n        sum = 0\n        for i in range(0, n):\n                sum = sum + arr[i]\n        kLengthSubSequence = nCr(n, k)\n        ans = sum * ((k * kLengthSubSequence) / n);\n        return ans\n", "12": "def isPrime(n):\n        if (n <= 1):\n                return False;\n        for i in range(2, n):\n                if (n % i == 0):\n                        return False;\n        return True;\ndef countSubsequences(arr, n):\n        totalSubsequence = (int)(pow(2, n) - 1);\n        countPrime = 0;\n        countOnes = 0;\n        for i in range(n):\n                if (arr[i] == 1):\n                        countOnes += 1;\n                elif (isPrime(arr[i])):\n                        countPrime += 1;\n        compositeSubsequence = 0;\n        onesSequence = (int)(pow(2, countOnes) - 1);\n        compositeSubsequence = (totalSubsequence - countPrime - onesSequence - onesSequence * countPrime);\n        return compositeSubsequence;", "13": "def constructArray(N):\n        arr = [0] * N\n        for i in range(1, N + 1):\n                arr[i - 1] = i;\n        for i in range(N):\n                print(arr[i], end = \", \")", "14": "def power(x, y):\n        p = 1000000007\n        res = 1\n        x = x % p\n        while (y > 0):\n                if ((y & 1) != 0):\n                        res = (res * x) % p\n                y = y >> 1\n                x = (x * x) % p\n        return res\ndef productPairs(arr, n):\n        product = 1\n        for i in range(n):\n                product = (product % mod *\n                (int)(power(arr[i], (2 * n))) % mod) % mod\n        return (product % mod)", "15": "def productPairs(arr, n):\n        product = 1;\n        for i in range(n):\n                for j in range(n):\n                        product *= (arr[i] % mod * arr[j] % mod) % mod;\n                        product = product % mod;\n        return product % mod;", "16": "def checkSolution(a, b, c):\n        if (a == c):\n                print(\"Yes\");\n        else:\n                print(\"No\");", "17": "def insert_element(a, n):\n        Xor = 0\n        Sum = 0\n        for i in range(n):\n                Xor^= a[i]\n                Sum+= a[i]\n        if(Sum == 2 * Xor):\n                print(0)\n                return\n        if(Xor == 0):\n                print(1)\n                print(Sum)\n                return\n        num1 = Sum + Xor\n        num2 = Xor\n        print(2)\n        print(num1, num2)", "18": "def MegagonNum(n):\n        return (999998 * n * n - 999996 * n) // 2;\n", "19": "def EnneacontahexagonNum(n):\n        return (94 * n * n - 92 * n) // 2;", "20": "def func (arr, n):\n        ans = 0\n        maxx = 0\n        freq = [0] * 100005\n        temp = 0\n        for i in range(n):\n                temp = arr[i]\n                freq[temp] += 1\n                maxx = max(maxx, temp)\n        for i in range(1, maxx + 1):\n                freq[i] += freq[i - 1]\n        for i in range(1, maxx + 1):\n                if (freq[i]):\n                        value = 0\n                        cur = ceil(0.5 * i) - 1.0\n                        j = 1.5\n                        while (1):\n                                val = min(maxx, (ceil(i * j) - 1.0))\n                                times = (freq[i] - freq[i - 1])\n                                con = j - 0.5\n                                ans += times * con * (freq[int(val)] -\n                                                                        freq[int(cur)])\n                                cur = val\n                                if (val == maxx):\n                                        break\n                                j += 1\n        return int(ans)\n", "21": "def checkArray(n, k, arr):\n        cnt = 0\n        for i in range(n):\n                if (arr[i] & 1):\n                        cnt += 1\n        if (cnt >= k and cnt % 2 == k % 2):\n                return True\n        else:\n                return False", "22": "def printSeries(n, a, b, c):\n        if (n == 1):\n                print(a, end = \" \");\n                return;\n        if (n == 2):\n                print(a, b, end = \" \");\n                return;\n        print(a, b, c, end = \" \");\n        for i in range (4, n + 1):\n                d = a + b + c;\n                print(d, end = \" \");\n                a = b;\n                b = c;\n                c = d;", "23": "def rev(num):\n        rev_num = 0\n        while (num > 0) :\n                rev_num = rev_num * 10 + num % 10\n                num = num // 10\n        return rev_num\ndef divSum(num) :\n        result = 0\n        for i in range(2, int(num**0.5)):\ndef isAntiPerfect(n):\n        return divSum(n) == n\n", "24": "def findNthTerm(n):\n        print(n * n - n + 1)", "25": "def isDouble(num):\n        s = str(num)\n        l = len(s)\n        if(s[0] == s[1]):\n                return False\n        if(l % 2 == 1):\n                s = s + s[1]\n                l += 1\n        s1 = s[:l // 2]\n        s2 = s[l // 2:]\n        return s1 == s2\ndef isNontrivialUndulant(N):\n        return N > 100 and isDouble(N)", "26": "def linearSum(n):\n        return n*(n + 1)//2 % mod\ndef rangeSum(b, a):\n        return (linearSum(b) - (\n                linearSum(a))) % mod\ndef totalSum(n):\n        result = 0\n        i = 1\n        while True:\n                result += rangeSum(\n                        n//i, n//(i + 1)) * ( i % mod) % mod;\n                result %= mod;\n                if i == n:\n                        break\n                i = n//(n//(i + 1))\n        return result\n", "27": "def maxAdjacentDifference(N, K):\n        if (N == 1):\n                return 0;\n        if (N == 2):\n                return K;\n        return 2 * K;", "28": "def Is_possible(N):\n        C = 0\n        D = 0\n        while ( N % 10 == 0):\n                N = N / 10\n                C += 1\n        if ( math.log(N, 2)\n        - int(math.log(N, 2)) == 0):\n                D = int(math.log(N, 2))\n                if (C >= D):\n                        print(\"YES\")\n                else:\n                        print(\"NO\")\n        else:\n                print(\"NO\")\n", "29": "def Sum(N):\n        SumOfPrimeDivisors = [0] * (N + 1)\n        for i in range(2, N + 1):\n                if (SumOfPrimeDivisors[i] == 0):\n                        for j in range(i, N + 1, i):\n                                SumOfPrimeDivisors[j] += i\n        return SumOfPrimeDivisors[N]\ndef RuthAaronNumber(n):\n        if (Sum(n) == Sum(n + 1)):\n                return True\n        else:\n                return False", "30": "def isPrime(n):\n        if (n == 1):\n                return True\n        if (n <= 3):\n                return True\n        if ((n % 2 == 0) or (n % 3 == 0)):\n                return False\n        i = 5\n        while (i * i <= n):\n                if ((n % i == 0) or\n                        (n % (i + 2) == 0)):\n                        return False;\n                        i += 6\n        return true;\ndef checkExpression(n):\n        if (isPrime(n)):\n                print(\"Yes\")\n        else:\n                print(\"No\")", "31": "def isDNum(n):\n        if n < 4:\n                return False\n        for k in range(2, n):\n                numerator = pow(k, n - 2) - k\n                hcf = math.gcd(n, k)\n                if(hcf ==1 and (numerator % n) != 0):\n                        return False\n        return True", "32": "def sigma(n):\n        if (n == 1):\n                return 1\n        result = 0\ndef isSuperabundant(N):\n        for i in range(1, N):\n                x = sigma((int)(i)) / i\n                y = sigma((int)(N)) / (N * 1.0)\n                if (x > y):\n                        return False\n        return True", "33": "def isInsolite(n):\n        N = n;\n        sum = 0;\n        product = 1;\n        while (n != 0):\n                r = n % 10;\n                sum = sum + r * r;\n                product = product * r * r;\n                n = n // 10;\n        return ((N % sum == 0) and\n                        (N % product == 0));\n", "34": "def reverse(num):\n        rev_num = 0\n        while(num > 0):\n                rev_num = rev_num * 10 + num % 10\n                num = num // 10\n        return rev_num\ndef properDivSum(num):\n        result = 0\ndef isTcefrep(n):\n        return properDivSum(n) == reverse(n);", "35": "def print_product(a, b, c, d):\n        prod1 = a * c\n        prod2 = b * d\n        prod3 = (a + b) * (c + d)\n        real = prod1 - prod2\n        imag = prod3 - (prod1 + prod2)\n        print(real, \" + \", imag, \"i\")\n", "36": "def sieve():\n        v[1] = 1\n        for i in range(2, x):\n                v[i] = i\n        for i in range(4, x, 2):\n                v[i] = 2\n        i = 3\n        while (i * i < x):\n                if (v[i] == i):\n                        for j in range(i * i, x, i):\n                                if (v[j] == j):\n                                        v[j] = i\n                i += 1\ndef prime_factors(n):\n        s = set()\n        while (n != 1):\n                s.add(v[n])\n                n = n // v[n]\n        return len(s)\ndef distinctPrimes(m, k):\n        result = []\n        for i in range(14, m + k):\n                count = prime_factors(i)\n                if (count == k):\n                        result.append(i)\n        p = len(result)\n        for index in range(p - 1):\n                element = result[index]\n                count = 1\n                z = index\n                while (z < p - 1 and count <= k and result[z] + 1 == result[z + 1]):\n                        count += 1\n                        z += 1\n                if (count >= k):\n                        print(element, end = ' ')", "37": "def findMaximumGcd(n):\n        max_gcd = 1\n        i = 1\n        while (i * i <= n):\n                if n % i == 0:\n                        if (i > max_gcd):\n                                max_gcd = i\n                        if ((n / i != i) and\n                                (n / i != n) and\n                        ((n / i) > max_gcd)):\n                                max_gcd = n / i\n                i += 1\n        return (int(max_gcd))", "38": "def powerOptimised(a, n):\n        ans = 1\n        while (n > 0):\n                last_bit = (n & 1)\n                if (last_bit):\n                        ans = ans * a\n                a = a * a\n                n = n >> 1\n        return ans", "39": "def nCr(n, r):\n        res = 1\n        if(r > n - r):\n                r = n - r\n        for i in range(r):\n                res *= (n - i)\n                res //= (i + 1)\n        return res", "40": "def nCr(n, r):\n        res = 1\n        if r > n - r:\n                r = n - r\n        for i in range(r):\n                res *= (n - i)\n                res /= (i + 1)\n        return res;\ndef solve(n, m, k):\n        sum = 0;\n        for i in range(k + 1):\n                sum += nCr(n, i) * nCr(m, k - i)\n        return int(sum)", "41": "def gcd(a, b):\n        if (a == 0):\n                return b\n        return gcd(b % a, a)\ndef lcm(a, b):\n        return (a * b) // gcd(a, b)\ndef findLCM(arr):\n        global Landau\n        nth_lcm = arr[0]\n        for i in range(1, len(arr)):\n                nth_lcm = lcm(nth_lcm, arr[i])\n        Landau = max(Landau, nth_lcm)\ndef findWays(arr, i, n):\n        if (n == 0):\n                findLCM(arr)\n        for j in range(i, n + 1):\n                arr.append(j)\n                findWays(arr, j, n - j)\n                arr.pop()\ndef Landau_function(n):\n        arr = []\n        findWays(arr, 1, n)\n        print(Landau)", "42": "def prime(n):\n        if (n == 1):\n                return False\n        for i in range(2, n + 1):\n                if i * i > n:\n                        break\n                if (n % i == 0):\n                        return False\n        return True\ndef minDivisior(n):\n        if (prime(n)):\n                print(1, n - 1)\n        else:\n                for i in range(2, n + 1):\n                        if i * i > n:\n                                break\n                        if (n % i == 0):\n                                print(n // i, n // i * (i - 1))\n                                break", "43": "def functionMax(arr, n):\n        setBit = [[] for i in range(32)]\n        for i in range(n):\n                for j in range(32):\n                        if (arr[i] & (1 << j)):\n                                setBit[j].append(i)\n        i = 31\n        while(i >= 0):\n                if (len(setBit[i]) == 1):\n                        temp = arr[0]\n                        arr[0] = arr[setBit[i][0]]\n                        arr[setBit[i][0]] = temp\n                        break\n                i -= 1\n        maxAnd = arr[0]\n        for i in range(1, n, 1):\n                maxAnd = (maxAnd & (~arr[i]))\n        return maxAnd\n", "44": "def findPrimeNos(L, R, M):\n        for i in range(L, R + 1):\n                M[i] = M.get(i, 0) + 1\n        if (1 in M):\n                M.pop(1)\n        for i in range(2, int(sqrt(R)) + 1, 1):\n                multiple = 2\n                while ((i * multiple) <= R):\n                        if ((i * multiple) in M):\n                                M.pop(i * multiple)\n                        multiple += 1\ndef getPrimePairs(L, R, K):\n        M = {}\n        findPrimeNos(L, R, M)\n        for key, values in M.items():\n                if ((key + K) in M):\n                        print(\"(\", key, \",\", key + K, \")\", end = \" \")", "45": "def checkRearrangements(mat, N, M):\n        for i in range(N):\n                for j in range(1, M):\n                        if (mat[i][0] != mat[i][j]):\n                                return \"Yes\"\n        return \"No\"\ndef nonZeroXor(mat, N, M):\n        res = 0\n        for i in range(N):\n                res = res ^ mat[i][0]\n        if (res != 0):\n                return \"Yes\"\n        else:\n                return checkRearrangements(mat, N, M)\n", "46": "def findTheGreatestX(P, Q):\n        divisiors = defaultdict(int)\n        i = 2\n        while i * i <= Q:\n                while (Q % i == 0 and Q > 1):\n                        Q //= i\n                        divisiors[i] += 1\n                i += 1\n        if (Q > 1):\n                divisiors[Q] += 1\n        ans = 0\n        for i in divisiors:\n                frequency = divisiors[i]\n                temp = P\n                cur = 0\n                while (temp % i == 0):\n                        temp //= i\n                        cur += 1\n                if (cur < frequency):\n                        ans = P\n                        break\n                temp = P\n                for j in range(cur, frequency-1, -1):\n                        temp //= i\n                ans = max(temp, ans)\n        print(ans)\n", "47": "def minimumSubsetDifference(N):\n        blockOfSize8 = N // 8\n        str = \"ABBABAAB\"\n        subsetDifference = 0\n        partition = \"\"\n        while blockOfSize8 != 0:\n                partition = partition + str\n                blockOfSize8 = blockOfSize8 - 1\n        A = []\n        B = []\n        for i in range(N):\n                if partition[i] == 'A':\n                        A.append((i + 1) * (i + 1))\n                else:\n                        B.append((i + 1) * (i + 1))\n        print(subsetDifference)\n        for i in A:\n                print(i, end = \" \")\n        print()\n        for i in B:\n                print(i, end = \" \")\n", "48": "def minMoves(arr, N):\n        odd_element_cnt = 0;\n        for i in range(N):\n                if (arr[i] % 2 != 0):\n                        odd_element_cnt += 1;\n        moves = (odd_element_cnt) // 2;\n        if (odd_element_cnt % 2 != 0):\n                moves += 2;\n        print(moves);", "49": "def countSetBits(N: int) -> int:\n        count = 0\n        while (N):\n                N = N & (N - 1)\n                count += 1\n        return count"}, "Javascript": {"0": "function CountWays(n) {\r\n    var ans = (n - 1) / 2;\r\n    return ans;\r\n}", "1": "function printKNumbers(N, K) {\r\n        for (var i = 0; i < K - 1; i++) {\r\n                console.log(1, end = ' ')\r\n        }\r\n        console.log(N - K + 1)\r\n}", "2": "function findMaxPrimeDivisor(n) {\r\n        let max_possible_prime = 0;\r\n        while (n % 2 == 0) {\r\n                max_possible_prime += 1;\r\n                n = n / 2;\r\n        }\r\n        let i = 3;\r\n        while (i * i <= n) {\r\n                while (n % i == 0) {\r\n                        max_possible_prime += 1;\r\n                        n = n / i;\r\n                }\r\n                i = i + 2;\r\n        }\r\n        if (n > 2) {\r\n                max_possible_prime += 1;\r\n        }\r\n        console.log(max_possible_prime);\r\n}", "3": "function countValues(N) {\r\n        var div = [];\r\n        var i = 2;\r\n        while ((i * i) <= N) {\r\n                if (N % i == 0) {\r\n                        div.push(i);\r\n                        if (N != i * i) {\r\n                                div.push(N / i);\r\n                        }\r\n                }\r\n                i += 1;\r\n        }\r\n        var answer = 0;\r\n        var i = 1;\r\n        while ((i * i) <= N - 1) {\r\n                if ((N - 1) % i == 0) {\r\n                        if (i * i == N - 1) {\r\n                                answer += 1;\r\n                        } else {\r\n                                answer += 2;\r\n                        }\r\n                }\r\n                i += 1;\r\n        }\r\n        for (var d of div) {\r\n                var K = N;\r\n                while (K % d == 0) {\r\n                        K /= d;\r\n                }\r\n                if ((K - 1) % d == 0) {\r\n                        answer += 1;\r\n                }\r\n        }\r\n        return answer;\r\n}", "4": "function countValues(n) {\r\n        var answer = 0;\r\n        for (var i = 2; i <= n; i++) {\r\n                var k = n;\r\n                while (k >= i) {\r\n                        if (k % i === 0) {\r\n                                k /= i;\r\n                        } else {\r\n                                k -= i;\r\n                        }\r\n                }\r\n                if (k === 1) {\r\n                        answer++;\r\n                }\r\n        }\r\n        return answer;\r\n}", "5": "function sumOfDigits(n) {\n        sum = 0;\n        while(n > 0) {\n                sum += n % 10;\n                n = Math.floor(n / 10);\n        }\n        return sum;\n}\nfunction smallestNum(X, Y) {\n        res = -1;\n        for(i = X; i < MAXN; i++) {\n                sum_of_digit = sumOfDigits(i);\n                if(sum_of_digit % Y == 0) {\n                        res = i;\n                        break;\n                }\n        }\n        return res;\n}", "6": "function calculateWays(N) {\r\n        var x = 0;\r\n        var v = [];\r\n        for (var i = 0; i < N; i++) {\r\n                v[i] = 0;\r\n        }\r\n        for (var i = 0; i < N / 2 + 1; i++) {\r\n                if (N % 2 == 0 && i == N / 2) {\r\n                        break;\r\n                }\r\n                x = N * (i + 1) - (i + 1) * i;\r\n                v[i] = x;\r\n                v[N - i - 1] = x;\r\n        }\r\n        return v;\r\n}\r\nfunction printArray(v) {\r\n        for (var i = 0; i < v.length; i++) {\r\n                console.log(v[i], end = \" \");\r\n        }\r\n}", "7": "function isPerfectSquare(x) {\r\n        var sr = Math.sqrt(x);\r\n        return((sr - Math.floor(sr)) == 0);\r\n}\r\nfunction checkSunnyNumber(N) {\r\n        if (isPerfectSquare(N + 1)) {\r\n                console.log(\"Yes\");\r\n        } else {\r\n                console.log(\"No\");\r\n        }\r\n}", "8": "function sumEvenNumbers(N, K) {\r\n        var check = N - 2 * (K - 1);\r\n        if (check > 0 && check % 2 == 0) {\r\n                for (var i = 0; i < K - 1; i++) {\r\n                        console.log(\"2 \");\r\n                }\r\n                console.log(check);\r\n        } else {\r\n                console.log(\"-1\");\r\n        }\r\n}", "9": "function checksum(n, k) {\r\n        var first_term = ((2 * n) / k + (1 - k)) / 2.0;\r\n        if (first_term - Math.floor(first_term) == 0) {\r\n                for (var i = Math.floor(first_term); i < Math.floor(first_term) + k; i++) {\r\n                        console.log(i);\r\n                }\r\n        } else {\r\n                console.log('-1');\r\n        }\r\n}", "10": "function getFactorization(x) {\n        var count = 0;\n        var v = [];\n        while (x % 2 == 0) {\n                count += 1;\n                x = x / 2;\n        }\n        if (count != 0) {\n                v.push(count);\n        }\n        for (var i = 3; i <= Math.sqrt(x) + 12; i += 2) {\n                count = 0;\n                while (x % i == 0) {\n                        count += 1;\n                        x /= i;\n                }\n                if (count != 0) {\n                        v.push(count);\n                }\n        }\n        if (x > 1) {\n                v.push(1);\n        }\n        return v;\n}\nfunction nonPrimeDivisors(N) {\n        var v = getFactorization(N);\n        var ret = 1;\n        for (var i = 0; i < v.length; i++) {\n                ret = ret * (v[i] + 1);\n        }\n        ret = ret - v.length;\n        return ret;\n}", "11": "function fact(n){\n        var res = 1;\n        for(var i = 2; i <= n; i++){\n                res = res * i;\n        }\n        return res;\n}\nfunction nCr(n, r){\n        return fact(n) / (fact(r) * \n                                        fact(n - r));\n}\nfunction sumSubsequences(arr, n, k){\n        var sum = 0;\n        for(var i = 0; i < n; i++){\n                sum = sum + arr[i];\n        }\n        var kLengthSubSequence = nCr(n, k);\n        var ans = sum * ((k * kLengthSubSequence) / n);\n        return ans;\n}", "12": "function isPrime(n) {\r\n        if (n <= 1) {\r\n                return false;\r\n        }\r\n        for (var i = 2; i < n; i++) {\r\n                if (n % i == 0) {\r\n                        return false;\r\n                }\r\n        }\r\n        return true;\r\n}\r\nfunction countSubsequences(arr, n) {\r\n        var totalSubsequence = Math.pow(2, n) - 1;\r\n        var countPrime = 0;\r\n        var countOnes = 0;\r\n        for (var i = 0; i < n; i++) {\r\n                if (arr[i] == 1) {\r\n                        countOnes++;\r\n                } else if (isPrime(arr[i])) {\r\n                        countPrime++;\r\n                }\r\n        }\r\n        var compositeSubsequence = 0;\r\n        var onesSequence = Math.pow(2, countOnes) - 1;\r\n        compositeSubsequence = (totalSubsequence - countPrime - onesSequence - onesSequence * countPrime);\r\n        return compositeSubsequence;\r\n}", "13": "function constructArray(N) {\r\n        var arr = [];\r\n        for (var i = 1; i <= N; i++) {\r\n                arr[i - 1] = i;\r\n        }\r\n        for (var i = 0; i < N; i++) {\r\n                console.log(arr[i], end = \", \");\r\n        }\r\n}", "14": "def power(x, y):\r\n        p = 1000000007\r\n        res = 1\r\n        x = x % p\r\n        while (y > 0):\r\n                if ((y & 1) != 0):\r\n                        res = (res * x) % p\r\n                y = y >> 1\r\n                x = (x * x) % p\r\n        return res\r\ndef productPairs(arr, n):\r\n        product = 1\r\n        for i in range(n):\r\n                product = (product % mod *\r\n                (int)(power(arr[i], (2 * n))) % mod) % mod\r\n        return (product % mod)", "15": "def productPairs(arr, n):\r\n        product = 1;\r\n        for (let i = 0; i < n; i++) {\r\n                for (let j = 0; j < n; j++) {\r\n                        product *= ((arr[i] % mod) * (arr[j] % mod)) % mod;\r\n                        product = product % mod;\r\n                }\r\n        }\r\n        return product % mod;", "16": "function checkSolution(a, b, c) {\r\n        if (a == c) {\r\n                console.log(\"Yes\");\r\n        } else {\r\n                console.log(\"No\");\r\n        }\r\n}", "17": "function insert_element(a, n) {\r\n     let Xor = 0;\r\n     let Sum = 0;\r\n     for (let i = 0; i < n; i++) {\r\n         Xor ^= a[i];\r\n         Sum += a[i];\r\n     }\r\n     if (Sum == 2 * Xor) {\r\n         console.log(0);\r\n         return;\r\n     }\r\n     if (Xor == 0) {\r\n         console.log(1);\r\n         console.log(Sum);\r\n         return;\r\n     }\r\n     let num1 = Sum + Xor;\r\n     let num2 = Xor;\r\n     console.log(2);\r\n     console.log(num1, num2);\r\n }", "18": "function MegagonNum(n) {\r\n    return (999998 * n * n - 999996 * n) / 2;\r\n}", "19": "function EnneacontahexagonNum(n) {\n    return (94 * n * n - 92 * n) / 2;\n}", "20": "function func(arr, n) {\r\n    let ans = 0;\r\n    let maxx = 0;\r\n    let freq = Array(1000005).fill(0);\r\n    let temp = 0;\r\n    for (let i = 0; i < n; i++) {\r\n        temp = arr[i];\r\n        freq[temp]++;\r\n        maxx = Math.max(maxx, temp);\r\n    }\r\n    for (let i = 1; i <= maxx; i++) {\r\n        freq[i] += freq[i - 1];\r\n    }\r\n    for (let i = 1; i <= maxx; i++) {\r\n        if (freq[i]) {\r\n            let value = 0;\r\n            let cur = Math.ceil(0.5 * i) - 1;\r\n            let j = 1.5;\r\n            while (1) {\r\n                let val = Math.min(maxx, Math.ceil(i * j) - 1);\r\n                let times = freq[i] - freq[i - 1];\r\n                let con = j - 0.5;\r\n                ans += times * con * (freq[val] - freq[cur]);\r\n                cur = val;\r\n                if (val == maxx) {\r\n                    break;\r\n                }\r\n                j++;\r\n            }\r\n        }\r\n    }\r\n    return ans;\r\n}", "21": "function checkArray(n, k, arr) {\r\n    var cnt = 0;\r\n    for (var i = 0; i < n; i++) {\r\n        if (arr[i] & 1) {\r\n            cnt++;\r\n        }\r\n    }\r\n    if (cnt >= k && cnt % 2 == k % 2) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}", "22": "def printSeries(n, a, b, c) {\r\n        if (n == 1) {\r\n                console.log(a);\r\n                return;\r\n        }\r\n        if (n == 2) {\r\n                console.log(a, b);\r\n                return;\r\n        }\r\n        console.log(a, b, c);\r\n        for (let i = 4; i <= n; i++) {\r\n                d = a + b + c;\r\n                console.log(d);\r\n                a = b;\r\n                b = c;\r\n                c = d;\r\n        }\r\n}", "23": "function rev(num) {\r\n        var rev_num = 0;\r\n        while (num > 0) {\r\n                rev_num = rev_num * 10 + num % 10;\r\n                num = num / 10;\r\n        }\r\n        return rev_num;\r\n}\r\nfunction divSum(num) {\r\n        var result = 0;\r\n        for (var i = 2; i <= Math.sqrt(num); i++) {\r\n                if (num % i == 0) {\r\n                        if (i == (num / i))\r\n                                result += i;\r\n                        else\r\n                                result += (i + num / i);\r\n                }\r\n        }\r\n        return (result + 1);\r\n}\r\nfunction isAntiPerfect(n) {\r\n        return divSum(n) == n;\r\n}", "24": "function findNthTerm(n) {\r\n    console.log(n * n - n + 1);\r\n}", "25": "function isDouble(num) {\r\n        s = num.toString();\r\n        l = s.length;\r\n        if(s[0] == s[1]) {\r\n                return false;\r\n        }\r\n        if(l % 2 == 1) {\r\n                s = s + s[1];\r\n                l += 1;\r\n        }\r\n        s1 = s.substring(0, l/2);\r\n        s2 = s.substring(l/2);\r\n        return s1 == s2;\r\n}\r\nfunction isNontrivialUndulant(N) {\r\n        return N > 100 && isDouble(N);\r\n}", "26": "function linearSum(n) {\r\n        return n*(n + 1)//2 % mod\r\n}\r\nfunction rangeSum(b, a) {\r\n        return (linearSum(b) - (\r\n                linearSum(a))) % mod\r\n}\r\nfunction totalSum(n) {\r\n        result = 0\r\n        i = 1\r\n        while (true) {\r\n                result += rangeSum(\r\n                        n//i, n//(i + 1)) * ( i % mod) % mod;\r\n                result %= mod;\r\n                if (i == n) {\r\n                        break\r\n                }\r\n                i = n//(n//(i + 1))\r\n        }\r\n        return result\r\n}", "27": "function maxAdjacentDifference(N, K) {\r\n        if (N == 1) {\r\n                return 0;\r\n        }\r\n        if (N == 2) {\r\n                return K;\r\n        }\r\n        return 2 * K;\r\n}", "28": "function Is_possible(N) {\r\n    var C = 0;\r\n    var D = 0;\r\n    while (N % 10 == 0) {\r\n        N = N / 10;\r\n        C++;\r\n    }\r\n    if (Math.log(N) / Math.log(2) - Math.floor(Math.log(N) / Math.log(2)) == 0) {\r\n        D = Math.floor(Math.log(N) / Math.log(2));\r\n        if (C >= D) {\r\n            console.log(\"YES\");\r\n        } else {\r\n            console.log(\"NO\");\r\n        }\r\n    } else {\r\n        console.log(\"NO\");\r\n    }\r\n}", "29": "function Sum(N) {\r\n        var SumOfPrimeDivisors = [0] * (N + 1);\r\n        for (var i = 2; i <= N; i++) {\r\n                if (SumOfPrimeDivisors[i] == 0) {\r\n                        for (var j = i; j <= N; j += i) {\r\n                                SumOfPrimeDivisors[j] += i;\r\n                        }\r\n                }\r\n        }\r\n        return SumOfPrimeDivisors[N];\r\n}\r\nfunction RuthAaronNumber(n) {\r\n        if (Sum(n) == Sum(n + 1)) {\r\n                return true;\r\n        } else {\r\n                return false;\r\n        }\r\n}", "30": "function isPrime(n) {\r\n        if (n == 1) {\r\n                return true\r\n        }\r\n        if (n <= 3) {\r\n                return true\r\n        }\r\n        if ((n % 2 == 0) || (n % 3 == 0)) {\r\n                return false\r\n        }\r\n        i = 5\r\n        while (i * i <= n) {\r\n                if ((n % i == 0) ||\r\n                        (n % (i + 2) == 0)) {\r\n                        return false\r\n                        i += 6\r\n                }\r\n        }\r\n        return true\r\n}\r\nfunction checkExpression(n) {\r\n        if (isPrime(n)) {\r\n                console.log(\"Yes\")\r\n        } else {\r\n                console.log(\"No\")\r\n        }\r\n}", "31": "function isDNum(n) {\r\n        if (n < 4) {\r\n                return false;\r\n        }\r\n        for (var k = 2; k < n; k++) {\r\n                var numerator = Math.pow(k, n - 2) - k;\r\n                var hcf = Math.gcd(n, k);\r\n                if (hcf == 1 && (numerator % n) != 0) {\r\n                        return false;\r\n                }\r\n        }\r\n        return true;\r\n}", "32": "function sigma(n) {\r\n        if (n == 1) {\r\n                return 1\r\n        }\r\n        result = 0\r\n        for (i = 1; i <= n; i++) {\r\n                result += i\r\n        }\r\n        return result\r\n}\r\nfunction isSuperabundant(N) {\r\n        for (i = 1; i <= N; i++) {\r\n                x = sigma(i) / i\r\n                y = sigma(N) / (N * 1.0)\r\n                if (x > y) {\r\n                        return false\r\n                }\r\n        }\r\n        return true\r\n}", "33": "function isInsolite(n) {\r\n        var N = n;\r\n        var sum = 0;\r\n        var product = 1;\r\n        while (n != 0) {\r\n                var r = n % 10;\r\n                sum = sum + r * r;\r\n                product = product * r * r;\r\n                n = n / 10;\r\n        }\r\n        return ((N % sum == 0) &&\r\n                        (N % product == 0));\r\n}", "34": "function reverse(num){\r\n        var rev_num = 0;\r\n        while(num > 0){\r\n                rev_num = rev_num * 10 + num % 10;\r\n                num = num / 10;\r\n        }\r\n        return rev_num;\r\n}\r\nfunction properDivSum(num){\r\n        var result = 0;\r\n        for(var i = 1; i <= num; i++){\r\n                if(num % i == 0){\r\n                        result += i;\r\n                }\r\n        }\r\n        return result;\r\n}\r\nfunction isTcefrep(n){\r\n        return properDivSum(n) == reverse(n);\r\n}", "35": "function print_product(a, b, c, d) {\r\n    var prod1 = a * c;\r\n    var prod2 = b * d;\r\n    var prod3 = (a + b) * (c + d);\r\n    var real = prod1 - prod2;\r\n    var imag = prod3 - (prod1 + prod2);\r\n    console.log(real, \" + \", imag, \"i\");\r\n}", "36": "function sieve() {\r\n        v[1] = 1;\r\n        for (i = 2; i < x; i++) {\r\n                v[i] = i;\r\n        }\r\n        for (i = 4; i < x; i += 2) {\r\n                v[i] = 2;\r\n        }\r\n        i = 3;\r\n        while (i * i < x) {\r\n                if (v[i] == i) {\r\n                        for (j = i * i; j < x; j += i) {\r\n                                if (v[j] == j) {\r\n                                        v[j] = i;\r\n                        }\r\n                }\r\n        }\r\n        i += 1;\r\n}\r\nfunction primeFactors(n) {\r\n        s = new Set();\r\n        while (n != 1) {\r\n                s.add(v[n]);\r\n                n = n / v[n];\r\n        }\r\n        return s.size;\r\n}\r\nfunction distinctPrimes(m, k) {\r\n        result = [];\r\n        for (i = 14; i < m + k; i++) {\r\n                count = primeFactors(i);\r\n                if (count == k) {\r\n                        result.push(i);\r\n                }\r\n        }\r\n        p = result.length;\r\n        for (index = 0; index < p - 1; index++) {\r\n                element = result[index];\r\n                count = 1;\r\n                z = index;\r\n                while (z < p - 1 && count <= k && result[z] + 1 == result[z + 1]) {\r\n                        count++;\r\n                        z++;\r\n                }\r\n                if (count >= k) {\r\n                        console.log(element, \" \");\r\n                }\r\n        }\r\n}", "37": "function findMaximumGcd(n) {\r\n        var max_gcd = 1;\r\n        var i = 1;\r\n        while (i * i <= n) {\r\n                if (n % i == 0) {\r\n                        if (i > max_gcd) {\r\n                                max_gcd = i;\r\n                        }\r\n                        if ((n / i != i) &&\r\n                                (n / i != n) &&\r\n                        ((n / i) > max_gcd)) {\r\n                                max_gcd = n / i;\r\n                        }\r\n                }\r\n                i += 1;\r\n        }\r\n        return (max_gcd);\r\n}", "38": "function powerOptimised(a, n) {\r\n        var ans = 1;\r\n        while (n > 0) {\r\n                var last_bit = (n & 1);\r\n                if (last_bit) {\r\n                        ans = ans * a;\r\n                }\r\n                a = a * a;\r\n                n = n >> 1;\r\n        }\r\n        return ans;\r\n}", "39": "function nCr(n, r) {\r\n        var res = 1;\r\n        if (r > n - r) {\r\n                r = n - r;\r\n        }\r\n        for (var i = 0; i < r; i++) {\r\n                res *= (n - i);\r\n                res /= (i + 1);\r\n        }\r\n        return res;\r\n}", "40": "function nCr(n, r) {\r\n        var res = 1;\r\n        if (r > n - r) {\r\n                r = n - r;\r\n        }\r\n        for (var i = 0; i < r; i++) {\r\n                res *= (n - i);\r\n                res /= (i + 1);\r\n        }\r\n        return res;\r\n}\r\nfunction solve(n, m, k) {\r\n        var sum = 0;\r\n        for (var i = 0; i <= k; i++) {\r\n                sum += nCr(n, i) * nCr(m, k - i);\r\n        }\r\n        return sum;\r\n}", "41": "function gcd(a, b) {\r\n    if (a == 0) {\r\n        return b;\r\n    }\r\n    return gcd(b % a, a);\r\n}\r\nfunction lcm(a, b) {\r\n    return (a * b) / gcd(a, b);\r\n}\r\nfunction findLCM(arr) {\r\n    var nth_lcm = arr[0];\r\n    for (var i = 1; i < arr.length; i++) {\r\n        nth_lcm = lcm(nth_lcm, arr[i]);\r\n    }\r\n    return nth_lcm;\r\n}\r\nfunction findWays(arr, i, n) {\r\n    if (n == 0) {\r\n        return findLCM(arr);\r\n    }\r\n    for (var j = i; j <= n; j++) {\r\n        arr.push(j);\r\n        var result = findWays(arr, j, n - j);\r\n        arr.pop();\r\n        if (result != -1) {\r\n            return result;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nfunction Landau_function(n) {\r\n    var arr = [];\r\n    var result = findWays(arr, 1, n);\r\n    console.log(result);\r\n}", "42": "function prime(n) {\r\n        if (n == 1) {\r\n                return false\r\n        }\r\n        for (i = 2; i <= n; i++) {\r\n                if (i * i > n) {\r\n                        break\r\n                }\r\n                if (n % i == 0) {\r\n                        return false\r\n                }\r\n        }\r\n        return true\r\n}\r\nfunction minDivisior(n) {\r\n        if (prime(n)) {\r\n                console.log(1, n - 1)\r\n        } else {\r\n                for (i = 2; i <= n; i++) {\r\n                        if (i * i > n) {\r\n                                break\r\n                        }\r\n                        if (n % i == 0) {\r\n                                console.log(n / i, n / i * (i - 1))\r\n                                break\r\n                        }\r\n                }\r\n        }\r\n}", "43": "function max(arr, n) {\r\n        var setBit = [[] for i in range(32)];\r\n        for (i in range(n)) {\r\n                for (j in range(32)) {\r\n                        if (arr[i] & (1 << j)) {\r\n                                setBit[j].push(i);\r\n                        }\r\n                }\r\n        }\r\n        i = 31;\r\n        while (i >= 0) {\r\n                if (setBit[i].length == 1) {\r\n                        var temp = arr[0];\r\n                        arr[0] = arr[setBit[i][0]];\r\n                        arr[setBit[i][0]] = temp;\r\n                        break;\r\n                }\r\n                i--;\r\n        }\r\n        var maxAnd = arr[0];\r\n        for (i in range(1, n, 1)) {\r\n                maxAnd = (maxAnd & (~arr[i]));\r\n        }\r\n        return maxAnd;\r\n}", "44": "function findPrimeNos(L, R, M) {\r\n        for (let i = L; i <= R; i++) {\r\n                M[i] = M[i] + 1 || 1;\r\n        }\r\n        if (M[1]) {\r\n                delete M[1];\r\n        }\r\n        for (let i = 2; i <= Math.sqrt(R); i++) {\r\n                let multiple = 2;\r\n                while ((i * multiple) <= R) {\r\n                        if (M[i * multiple]) {\r\n                                delete M[i * multiple];\r\n                        }\r\n                        multiple++;\r\n                }\r\n        }\r\n}\r\nfunction getPrimePairs(L, R, K) {\r\n        let M = {};\r\n        findPrimeNos(L, R, M);\r\n        for (let key in M) {\r\n                if (M[key + K]) {\r\n                        console.log(\"(\" + key + \",\" + (key + K) + \")\", end = \" \");\r\n                }\r\n        }\r\n}", "45": "function checkRearrangements(mat, N, M) {\r\n        for (var i = 0; i < N; i++) {\r\n                for (var j = 1; j < M; j++) {\r\n                        if (mat[i][0] != mat[i][j]) {\r\n                                return \"Yes\";\r\n                        }\r\n                }\r\n        }\r\n        return \"No\";\r\n}\r\nfunction nonZeroXor(mat, N, M) {\r\n        var res = 0;\r\n        for (var i = 0; i < N; i++) {\r\n                res = res ^ mat[i][0];\r\n        }\r\n        if (res != 0) {\r\n                return \"Yes\";\r\n        } else {\r\n                return checkRearrangements(mat, N, M);\r\n        }\r\n}", "46": "function findTheGreatestX(P, Q) {\r\n        var divisiors = {};\r\n        var i = 2;\r\n        while (i * i <= Q) {\r\n                while (Q % i == 0 && Q > 1) {\r\n                        Q /= i;\r\n                        divisiors[i] = (divisiors[i] || 0) + 1;\r\n                }\r\n                i++;\r\n        }\r\n        if (Q > 1) {\r\n                divisiors[Q] = (divisiors[Q] || 0) + 1;\r\n        }\r\n        var ans = 0;\r\n        for (var i in divisiors) {\r\n                var frequency = divisiors[i];\r\n                var temp = P;\r\n                var cur = 0;\r\n                while (temp % i == 0) {\r\n                        temp /= i;\r\n                        cur++;\r\n                }\r\n                if (cur < frequency) {\r\n                        ans = P;\r\n                        break;\r\n                }\r\n                temp = P;\r\n                for (var j = cur; j < frequency - 1; j--) {\r\n                        temp /= i;\r\n                }\r\n                ans = Math.max(temp, ans);\r\n        }\r\n        console.log(ans);\r\n}", "47": "function minimumSubsetDifference(N) {\r\n        var blockOfSize8 = N / 8;\r\n        var str = \"ABBABAAB\";\r\n        var subsetDifference = 0;\r\n        var partition = \"\";\r\n        while (blockOfSize8 != 0) {\r\n                partition = partition + str;\r\n                blockOfSize8 = blockOfSize8 - 1;\r\n        }\r\n        var A = [];\r\n        var B = [];\r\n        for (var i = 0; i < N; i++) {\r\n                if (partition[i] == 'A') {\r\n                        A.push((i + 1) * (i + 1));\r\n                } else {\r\n                        B.push((i + 1) * (i + 1));\r\n                }\r\n        }\r\n        console.log(subsetDifference);\r\n        for (var i = 0; i < A.length; i++) {\r\n                console.log(A[i], end = \" \");\r\n        }\r\n        console.log();\r\n        for (var i = 0; i < B.length; i++) {\r\n                console.log(B[i], end = \" \");\r\n        }\r\n}", "48": "function minMoves(arr, N) {\r\n        let odd_element_cnt = 0;\r\n        for (let i = 0; i < N; i++) {\r\n                if (arr[i] % 2 != 0) {\r\n                        odd_element_cnt++;\r\n                }\r\n        }\r\n        let moves = odd_element_cnt / 2;\r\n        if (odd_element_cnt % 2 != 0) {\r\n                moves += 2;\r\n        }\r\n        console.log(moves);\r\n}", "49": "function countSetBits(N: int) -> int:\r\n        count = 0\r\n        while (N):\r\n                N = N & (N - 1)\r\n                count += 1\r\n        return count"}}, "Javascript - Python": {"id": {"0": 10064, "1": 10063, "2": 10062, "3": 10058, "4": 10057, "5": 10054, "6": 10049, "7": 10041, "8": 10030, "9": 9989, "10": 9979, "11": 9971, "12": 9963, "13": 9958, "14": 9948, "15": 9935, "16": 9915, "17": 9905, "18": 9889, "19": 9877, "20": 9849, "21": 9829, "22": 9824, "23": 9818, "24": 9805, "25": 9804, "26": 9787, "27": 9777, "28": 9759, "29": 9738, "30": 9736, "31": 9735, "32": 9727, "33": 9726, "34": 9707, "35": 9704, "36": 9702, "37": 9686, "38": 9685, "39": 9673, "40": 9639, "41": 9638, "42": 9608, "43": 9574, "44": 9567, "45": 9528, "46": 9507, "47": 9505, "48": 9496, "49": 9478}, "Javascript": {"0": "function maxAdjacent(arr,N)\n{\n        let res = [];\n        let arr_max = Number.MIN_VALUE;\n        for (let i = 1; i < N; i++)\n        {\n        arr_max = Math.max(arr_max,\n                                                Math.abs(arr[i - 1] - arr[i]));\n        }\n        for (let i = 1; i < N - 1; i++)\n        {\n        let curr_max = Math.abs(arr[i - 1] - arr[i + 1]);\n        let ans = Math.max(curr_max, arr_max);\n        res.push(ans);\n        }\n        document.write(res.join(\" \"));\n}", "1": "function maxAdjacent(arr, N)\n{\n        var res = [];\n        for (var i = 1; i < N - 1; i++) {\n                var prev = arr[0];\n                var maxi = Number.MIN_VALUE;\n                for (var j = 1; j < N; j++) {\n                        if (i == j)\n                                continue;\n                        maxi = Math.max(maxi, Math.abs(arr[j] - prev));\n                        prev = arr[j];\n                }\n                res.push(maxi);\n        }\n        for (var j = 0; j < res.length; j++)\n                document.write(res[j] + \" \");\n        document.write(\"<br>\");\n}", "2": "function minSum(A, N)\n{\n        let mp = new Map();\n        let sum = 0;\n        for(let i = 0; i < N; i++)\n        {\n                sum += A[i];\n                mp[A[i]]++;\n                if (mp.has(A[i]))\n                {\n                        mp.set(A[i], mp.get(A[i]) + 1)\n                }\n                else\n                {\n                        mp.set(A[i], 1)\n                }\n        }\n        let minSum = Number.MAX_SAFE_INTEGER;\n        for(let it of mp)\n        {\n                minSum = Math.min(minSum,\n                                                sum - (it[0] * it[1]));\n        }\n        return minSum;\n}", "3": "function countElements(N)\n{\n        var Cur_Ele = 1;\n        var Count = 0;\n        while (Cur_Ele <= N)\n        {\n                Count++;\n                Cur_Ele = Cur_Ele * 2;\n        }\n        document.write(N - Count);\n}\n", "4": "function isPossible(N) {\n                return (((N & (N - 1)) & N));\n        }\nfunction countElements(N) {\n                var count = 0;\n                for (i = 1; i <= N; i++) {\n                        if (isPossible(i) != 0)\n                                count++;\n                }\n                document.write(count);\n        }", "5": "function singleDigitSubarrayCount(arr, N)\n{\n        let res = 0;\n        let count = 0;\n        for(let i = 0; i < N; i++)\n        {\n                if (arr[i] <= 9)\n                {\n                        count++;\n                        res += count;\n                }\n                else\n                {\n                        count = 0;\n                }\n        }\n        document.write(res);\n}", "6": "function productExceptSelf(arr, N)\n{\n        let product = 1;\n        let z = 0;\n        for (let i = 0; i < N; i++) {\n                if (arr[i] != 0)\n                        product *= arr[i];\n                if (arr[i] == 0)\n                        z += 1;\n        }\n        let a = Math.abs(product);\n        for (let i = 0; i < N; i++) {\n                if (z == 1) {\n                        if (arr[i] != 0)\n                                arr[i] = 0;\n                        else\n                                arr[i] = product;\n                        continue;\n                }\n                else if (z > 1) {\n                        arr[i] = 0;\n                        continue;\n                }\n                let b = Math.abs(arr[i]);\n                let curr = Math.round(Math.exp(Math.log(a) - Math.log(b)));\n                if (arr[i] < 0 && product < 0)\n                        arr[i] = curr;\n                else if (arr[i] > 0 && product > 0)\n                        arr[i] = curr;\n                else\n                        arr[i] = -1 * curr;\n        }\n        for (let i = 0; i < N; i++) {\n                document.write(arr[i] + \" \");\n        }\n}", "7": "function convertToASCII(N)\n{\n        let num = N.toString();\n        for (let ch = 0; ch < num.length; ch++)\n        {\n                document.write(num[ch] + \" (\"\n                        + num[ch].charCodeAt(0) + \")<br>\");\n        }\n}", "8": "function isPossible(target)\n{\n        var max = 0;\n        var index = 0;\n        for (i = 0; i < target.length; i++) {\n                if (max < target[i]) {\n                        max = target[i];\n                        index = i;\n                }\n        }\n        if (max == 1)\n                return true;\n        for (i = 0; i < target.length; i++) {\n                if (i != index) {\n                        max -= target[i];\n                        if (max <= 0)\n                                return false;\n                }\n        }\n        target[index] = max;\n        return isPossible(target);\n}\n", "9": "function printSpiral(size)\n{\n        let row = 0, col = 0;\n        let boundary = size - 1;\n        let sizeLeft = size - 1;\n        let flag = 1;\n        let move = 'r';\n        let matrix = new Array(size);\n        for(let i = 0; i < size; i++)\n        {\n                matrix[i] = new Array(size).fill(0);\n        }\n        for(let i = 1; i < size * size + 1; i++)\n        {\n                matrix[row][col] = i;\n                switch (move)\n                {\n                        case 'r':\n                                col += 1;\n                                break;\n                        case 'l':\n                                col -= 1;\n                                break;\n                        case 'u':\n                                row -= 1;\n                                break;\n                        case 'd':\n                                row += 1;\n                                break;\n                }\n                if (i == boundary)\n                {\n                        boundary += sizeLeft;\n                        if (flag != 2)\n                        {\n                                flag = 2;\n                        }\n                        else\n                        {\n                                flag = 1;\n                                sizeLeft -= 1;\n                        }\n                        switch (move)\n                        {\n                                case 'r':\n                                        move = 'd';\n                                        break;\n                                case 'd':\n                                        move = 'l';\n                                        break;\n                                case 'l':\n                                        move = 'u';\n                                        break;\n                                case 'u':\n                                        move = 'r';\n                                        break;\n                        }\n                }\n        }\n        for(row = 0; row < size; row++)\n        {\n                for(col = 0; col < size; col++)\n                {\n                        let n = matrix[row][col];\n                        if (n < 10)\n                                document.write(n + \" \");\n                        else\n                                document.write(n + \" \");\n                }\n                document.write(\"<br>\");\n        }\n}", "10": "function gcd(a, b)\n{\n        while (b > 0) {\n                let rem = a % b;\n                a = b;\n                b = rem;\n        }\n        return a;\n}\nfunction countNumberOfWays(n)\n{\n        if (n == 1)\n                return -1;\n        let g = 0;\n        let power = 0;\n        while (n % 2 == 0) {\n                power++;\n                n /= 2;\n        }\n        g = gcd(g, power);\n        for (let i = 3; i <= Math.sqrt(n); i += 2) {\n                power = 0;\n                while (n % i == 0) {\n                        power++;\n                        n /= i;\n                }\n                g = gcd(g, power);\n        }\n        if (n > 2)\n                g = gcd(g, 1);\n        let ways = 1;\n        power = 0;\n        while (g % 2 == 0) {\n                g /= 2;\n                power++;\n        }\n        ways *= (power + 1);\n        for (let i = 3; i <= Math.sqrt(g); i += 2) {\n                power = 0;\n                while (g % i == 0) {\n                        power++;\n                        g /= i;\n                }\n                ways *= (power + 1);\n        }\n        if (g > 2)\n                ways *= 2;\n        return ways;\n}", "11": "function countPrimeFactors(n)\n{\n        var count = 0;\n        while (n % 2 == 0)\n        {\n                n = parseInt(n / 2);\n                count++;\n        }\n        for(i = 3;\n                i <= parseInt(Math.sqrt(n)); i = i + 2)\n        {\n                while (n % i == 0)\n                {\n                        n = parseInt(n / i);\n                        count++;\n                }\n        }\n        if (n > 2)\n                count++;\n        return (count);\n}\nfunction findSum(n)\n{\n        var sum = 0;\n        for(i = 1, num = 2; i <= n; num++)\n        {\n                if (countPrimeFactors(num) == 2)\n                {\n                        sum += num;\n                        i++;\n                }\n        }\n        return sum;\n}\nfunction check(n, k)\n{\n        var s = findSum(k - 1);\n        if (s >= n)\n                document.write(\"No\");\n        else\n                document.write(\"Yes\");\n}", "12": "function partitionArray(a , n)\n        {\n                var min = Array(n).fill(0);\n                var mini = Number.MAX_VALUE;\n                for (i = n - 1; i >= 0; i--) {\n                        mini = Math.min(mini, a[i]);\n                        min[i] = mini;\n                }\n                var maxi = Number.MIN_VALUE;\n                var ind = -1;\n                for (i = 0; i < n - 1; i++) {\n                        maxi = Math.max(maxi, a[i]);\n                        if (maxi < min[i + 1]) {\n                                ind = i;\n                                break;\n                        }\n                }\n                if (ind != -1) {\n                        for (i = 0; i <= ind; i++)\n                                document.write(a[i] + \" \");\n                        document.write(\"<br/>\");\n                        for (i = ind + 1; i < n; i++)\n                                document.write(a[i] + \" \");\n                }\n                else\n                        document.write(\"Impossible\");\n        }\n", "13": "function perfectSquare(num)\n{\n        let sr = Math.floor(Math.sqrt(num));\n        let a = sr * sr;\n        let b = (sr + 1) * (sr + 1);\n        if ((num - a) < (b - num))\n        {\n                return a;\n        }\n        else\n        {\n                return b;\n        }\n}\nfunction powerOfTwo(num)\n{\n        let lg = Math.floor(Math.log2(num));\n        let p = Math.pow(2, lg);\n        return p;\n}\nfunction uniqueElement(arr, N)\n{\n        let ans = true;\n        arr.reverse();\n        let freq = new Map();\n        for(let i = 0; i < N; i++)\n        {\n                freq[arr[i]]++;\n                if (freq.has(arr[i]))\n                {\n                        freq.set(arr[i],\n                        freq.get(arr[i]) + 1)\n                }\n                else[\n                        freq.set(arr[i], 1) ]\n        }\n        for(let el of freq)\n        {\n                if (el[1] == 1)\n                {\n                        ans = false;\n                        let ps = perfectSquare(el[0]);\n                        document.write(powerOfTwo(ps) + ' ');\n                }\n        }\n        if (ans)\n                document.write(\"-1\");\n}", "14": "function multiplyByMersenne(N, M)\n{\n        let x = (Math.log(M + 1) / Math.log(2));\n        return ((N << x) - N);\n}", "15": "function checkCommonDivisor(arr , N , X) {\n                var G = 0;\n                for (i = 0; i < N; i++) {\n                        G = gcd(G, arr[i]);\n                }\n                var copy_G = G;\n                for (divisor = 2; divisor <= X; divisor++) {\n                        while (G % divisor == 0) {\n                                G = G / divisor;\n                        }\n                }\n                if (G <= X) {\n                        document.write(\"Yes<br/>\");\n                        for (i = 0; i < N; i++)\n                                document.write((arr[i] / copy_G) + \" \");\n                        document.write();\n                }\n                else\n                        document.write(\"No\");\n        }\nfunction gcd(a , b) {\n                if (b == 0)\n                        return a;\n                return gcd(b, a % b);\n        }", "16": "function check(Adj,Src,N,visited)\n{\n        let color = new Array(N);\n        visited[Src] = true;\n        let q = [];\n        q.push(Src);\n        while (q.length!=0)\n        {\n                let u = q.shift();\n                let Col = color[u];\n                for(let x=0;x< Adj[u].length;x++)\n                {\n                        if (visited[Adj[u][x]] == true && color[Adj[u][x]] == Col)\n                        {\n                                return false;\n                        }\n                        else if (visited[Adj[u][x]] == false)\n                        {\n                                visited[Adj[u][x]] = true;\n                                q.push(Adj[u][x]);\n                                color[Adj[u][x]] = 1 - Col;\n                        }\n                }\n        }\n        return true;\n}\nfunction addEdge(Adj,u,v)\n{\n        Adj[u].push(v);\n        Adj[v].push(u);\n}\nfunction isPossible(Arr,N)\n{\n        let Adj = new Array(N);\n        for(let i = 0; i < N; i++)\n                Adj[i] = [];\n        for(let i = 0; i < N - 1; i++)\n        {\n                for(let j = i + 1; j < N; j++)\n                {\n                        if (Arr[i].R < Arr[j].L Arr[i].L > Arr[j].R)\n                        {\n                                continue;\n                        }\n                        else\n                        {\n                                if (Arr[i].V == Arr[j].V)\n                                {\n                                        addEdge(Adj, i, j);\n                                }\n                        }\n                }\n        }\n        let visited = new Array(N);\n        for(let i=0;i<N;i++)\n                visited[i]=false;\n        for(let i = 0; i < N; i++)\n        {\n                if (visited[i] == false && Adj[i].length > 0)\n                {\n                        if (check(Adj, i, N, visited) == false)\n                        {\n                                document.write(\"No<bR>\");\n                                return;\n                        }\n                }\n        }\n        document.write(\"Yes<br>\");\n}\n", "17": "function minimumSteps(x, y)\n{\n        var cnt = 0;\n        while (x != 0 && y != 0) {\n                if (x > y) {\n                        cnt += x / y;\n                        x %= y;\n                }\n                else {\n                        cnt += y / x;\n                        y %= x;\n                }\n        }\n        cnt--;\n        if (x > 1 y > 1)\n                cnt = -1;\n        document.write( cnt);\n}", "18": "function vectorMagnitude(x, y, z)\n{\n        var sum = x * x + y * y + z * z;\n        return Math.sqrt(sum);\n}\n", "19": "function findMedian(Mean, Mode)\n{\n        var Median = (2 * Mean + Mode) / 3.0;\n        document.write(Median);\n}", "20": "function sieveOfEratosthenes(N, s)\n{\n        let prime = Array.from({length: N+1}, (_, i) => 0);\n        for(let i = 2; i <= N; i += 2)\n                s[i] = 2;\n        for(let i = 3; i <= N; i += 2)\n        {\n                if (prime[i] == false)\n                {\n                        s[i] = i;\n                        for(let j = i; j * i <= N; j += 2)\n                        {\n                                if (!prime[i * j])\n                                {\n                                        prime[i * j] = true;\n                                        s[i * j] = i;\n                                }\n                        }\n                }\n        }\n}\nfunction findDifference(N)\n{\n        let s = Array.from({length: N+1}, (_, i) => 0);\n        sieveOfEratosthenes(N, s);\n        let total = 1, odd = 1, even = 0;\n        let curr = s[N];\n        let cnt = 1;\n        while (N > 1)\n        {\n                N /= s[N];\n                if (curr == s[N])\n                {\n                        cnt++;\n                        continue;\n                }\n                if (curr == 2)\n                {\n                        total = total * (cnt + 1);\n                }\n                else\n                {\n                        total = total * (cnt + 1);\n                        odd = odd * (cnt + 1);\n                }\n                curr = s[N];\n                cnt = 1;\n        }\n        even = total - odd;\n document.write(Math.abs(even - odd));\n}", "21": "function findPermutation(arr)\n{\n        let N = arr.length;\n        let i = N - 2;\n        while (i >= 0 && arr[i] <= arr[i + 1])\n                i--;\n        if (i == -1)\n        {\n                document.write(\"-1\");\n                return;\n        }\n        let j = N - 1;\n        while (j > i && arr[j] >= arr[i])\n                j--;\n        while (j > i && arr[j] == arr[j - 1])\n        {\n                j--;\n        }\n        let temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n        for(let it in arr)\n        {\n                document.write(arr[it] + \" \");\n        }\n}", "22": "function evenOddBitwiseXOR(N)\n{\n        document.write(\"Even: \" + 0 + \" \");\n        for(let i = 4; i <= N; i = i + 4)\n        {\n                document.write(i + \" \");\n        }\n        document.write(\"<br/>\");\n        document.write(\"Odd: \" + 1 + \" \");\n        for(let i = 4; i <= N; i = i + 4)\n        {\n        document.write(i - 1 + \" \");\n        }\n        if (N % 4 == 2)\n                document.write(N + 1);\n        else if (N % 4 == 3)\n                document.write(N);\n}", "23": "function check(n)\n{\n        let sumOfDigit = 0;\n        let prodOfDigit = 1;\n        while (n > 0)\n        {\n                let rem;\n                rem = n % 10;\n                sumOfDigit += rem;\n                prodOfDigit *= rem;\n                n = Math.floor(n / 10);\n        }\n        if (sumOfDigit > prodOfDigit)\n                document.write(\"Yes\");\n        else\n                document.write(\"No\");\n}", "24": "function findbitwiseOR(a, n)\n{\n        var res = 0;\n        var i;\n        for (i = 0; i < n; i++)\n                res = res | a[i];\n        document.write(res);\n}", "25": "function findbitwiseOR(a, n)\n        {\n                let res = 0;\n                for (let i = 0; i < n; i++) {\n                        let curr_sub_array = a[i];\n                        res = res | curr_sub_array;\n                        for (let j = i; j < n; j++) {\n                                curr_sub_array = curr_sub_array & a[j];\n                                res = res | curr_sub_array;\n                        }\n                }\n                document.write(res);\n        }", "26": "function KthSmallest(A, B, N, K)\n        {\n                let M = 0;\n                for (let i = 0; i < N; i++) {\n                        M = Math.max(A[i], M);\n                }\n                let freq = Array.from({length: M + 1}, (_, i) => 0);\n                for (let i = 0; i < N; i++) {\n                        freq[A[i]] += B[i];\n                }\n                let sum = 0;\n                for (let i = 0; i <= M; i++) {\n                        sum += freq[i];\n                        if (sum >= K) {\n                                return i;\n                        }\n                }\n                return -1;\n        }", "27": "function isDivisibleByDivisor(S, D)\n        {\n                S %= D;\n                var hashMap = [];\n                hashMap.push(S);\n                for (var i = 0; i <= D; i++)\n                {\n                S += S % D;\n                S %= D;\n                if (hashMap.includes(S)) {\n                        if (S == 0) {\n                        return \"Yes\";\n                        }\n                        return \"No\";\n                }\n                else hashMap.push(S);\n                }\n                return \"Yes\";\n        }", "28": "function gcd(a, b){\n        if(b == 0){\n                return a;\n        }\n        return gcd(b, a % b);\n        }\nfunction PrimeFactor(N)\n        {\n                let primef = new Map();\n                while (N % 2 == 0)\n                {\n                        if (primef.has(2))\n                        {\n                                primef.set(2, primef.get(2) + 1);\n                        }\n                        else\n                        {\n                                primef.set(2, 1);\n                        }\n                        N = parseInt(N / 2, 10);\n                }\n                for(let i = 3; i <= Math.sqrt(N); i++)\n                {\n                        while (N % i == 0)\n                        {\n                                if (primef.has(i))\n                                {\n                                        primef.set(i, primef.get(i) + 1);\n                                }\n                                else\n                                {\n                                        primef.set(i, 1);\n                                }\n                                N = parseInt(N / 2, 10);\n                        }\n                }\n                if (N > 2)\n                {\n                        primef[N] = 1;\n                }\n                return primef;\n        }\nfunction CountToMakeEqual(X, Y)\n        {\n                let gcdofXY = gcd(X, Y);\n                let newX = parseInt(Y / gcdofXY, 10);\n                let newY = parseInt(X / gcdofXY, 10);\n                let primeX = PrimeFactor(newX);\n                let primeY = PrimeFactor(newY);\n                let ans = 0;\n                primeX.forEach((values,keys)=>\n                {\n                        if (X % keys != 0)\n                        {\n                                return -1;\n                        }\n                        ans += primeX.get(keys); })\n                ans+=1;\n                primeY.forEach((values,keys)=>\n                {\n                        if (Y % keys != 0)\n                        {\n                                return -1;\n                        }\n                        ans += primeY.get(keys); })\n                return ans;\n        }", "29": "function isPrime(X) {\n        for (let i = 2; i * i <= X; i++)\n                        return false;\n        return true;\n}\nfunction printPrimes(A, N)\n{\n        for (let i = 0; i < N; i++)\n        {\n                for (let j = A[i] - 1; ; j--)\n                {\n                        if (isPrime(j)) {\n                                document.write(j + \" \");\n                                break;\n                        }\n                }\n                for (let j = A[i] + 1; ; j++)\n                {\n                        if (isPrime(j)) {\n                                document.write(j + \" \");\n                                break;\n                        }\n                }\n                document.write(\"<br>\");\n        }\n}", "30": "function countSubarray(arr, n)\n{\n        var count = 0, L = 0, R = 0;\n        var mx = Math.max.apply(null, arr);\n        var i;\n        for (i = 0; i < n; i++) {\n                if (arr[i] * 2 > mx) {\n                        L = i;\n                        break;\n                }\n        }\n        for (i = n - 1; i >= 0; i--) {\n                if (arr[i] * 2 > mx) {\n                        R = i;\n                        break;\n                }\n        }\n        document.write((L + 1) * (n - R));\n}", "31": "function countSubarray(arr, n)\n{\n        let count = 0;\n        for(let i = 0; i < n; i++)\n        {\n                for(let j = i; j < n; j++)\n                {\n                        let mxSubarray = 0;\n                        let mxOther = 0;\n                        for(let k = i; k <= j; k++)\n                        {\n                                mxSubarray = Math.max(mxSubarray, arr[k]);\n                        }\n                        for(let k = 0; k < i; k++)\n                        {\n                                mxOther = Math.max(mxOther, arr[k]);\n                        }\n                        for(let k = j + 1; k < n; k++)\n                        {\n                                mxOther = Math.max( mxOther, arr[k]);\n                        }\n                        if (mxSubarray > (2 * mxOther))\n                                count++;\n                }\n        }\n        document.write(count);\n}\n", "32": "function preCalculate(phi, ans) {\n phi[0] = 0;\n phi[1] = 1;\n for (let i = 2; i <= MAX; i++) phi[i] = i;\n for (let i = 2; i <= MAX; i++) {\n        if (phi[i] == i) {\n        for (let j = i; j <= MAX; j += i)\n                phi[j] -= Math.floor(phi[j] / i);\n        }\n }\n for (let i = 1; i <= MAX; i++)\n ans[i] = ans[i - 1] + (i - phi[i]);\n}\nfunction countPairs(arr, N) {\n let phi = new Array(1e5).fill(0);\n let ans = new Array(1e5).fill(0);\n preCalculate(phi, ans);\n for (let i = 0; i < N; ++i) {\n        document.write(ans[arr[i]] + \" \");\n }\n}\n", "33": "function gcd(a, b)\n{\n        if (b == 0)\n                return a;\n        return gcd(b, a % b);\n}\nfunction countPairs(arr, N)\n{\n        for(var i = 0; i < N; i++)\n        {\n                var count = 0;\n                for(var x = 1; x <= arr[i]; x++)\n                {\n                        for(var y = x; y <= arr[i]; y++)\n                        {\n                                if (gcd(x, y) > 1)\n                                        count++;\n                        }\n                }\n                document.write(count + \" \");\n        }\n}", "34": "function factorial(n)\n{\n        if (n == 0)\n                return 1;\n        return n * factorial(n - 1);\n}\nfunction numOfNecklace(N)\n{\n        var ans = factorial(N)\n                                        / (factorial(N / 2) * factorial(N / 2));\n        ans = ans * factorial(N / 2 - 1);\n        ans = ans * factorial(N / 2 - 1);\n        ans /= 2;\n        return ans;\n}", "35": "function maxSubArraySumRepeated(arr, N, K) {\n        let sum = 0;\n        for (let i = 0; i < N; i++)\n                sum += arr[i];\n        let curr = arr[0];\n        let ans = arr[0];\n        if (K == 1) {\n                for (let i = 1; i < N; i++) {\n                        curr = Math.max(arr[i], curr + arr[i]);\n                        ans = Math.max(ans, curr);\n                }\n                return ans;\n        }\n        let V = [];\n        for (let i = 0; i < 2 * N; i++) {\n                V.push(arr[i % N]);\n        }\n        let maxSuf = V[0];\n        let maxPref = V[2 * N - 1];\n        curr = V[0];\n        for (let i = 1; i < 2 * N; i++) {\n                curr += V[i];\n                maxPref = Math.max(maxPref, curr);\n        }\n        curr = V[2 * N - 1];\n        for (let i = 2 * N - 2; i >= 0; i--) {\n                curr += V[i];\n                maxSuf = Math.max(maxSuf, curr);\n        }\n        curr = V[0];\n        for (let i = 1; i < 2 * N; i++) {\n                curr = Math.max(V[i], curr + V[i]);\n                ans = Math.max(ans, curr);\n        }\n        if (sum > 0) {\n                let temp = sum * (K - 2);\n                ans = Math.max(ans, Math.max(temp + maxPref, temp + maxSuf));\n        }\n        return ans;\n}", "36": "function ExpoFactorial(N) {\n        let res = 1;\n        let mod = 1000000007;\n        for (let i = 2; i < N + 1; i++)\n                res = Math.pow(i, res) % mod;\n        return res;\n}\n", "37": "function rangeSum(arr, N, L, R) {\n let prefix = new Array(N + 1);\n prefix[0] = 0;\n for (let i = 1; i <= N; i++) {\n        prefix[i] = prefix[i - 1] + arr[i - 1];\n }\n let leftsum = ((L - 1) / N) * prefix[N] + prefix[(L - 1) % N];\n let rightsum = (R / N) * prefix[N] + prefix[R % N];\n document.write(rightsum - leftsum);\n}", "38": "function rangeSum(arr, N, L, R)\n{\n        let sum = 0;\n        for(let i = L - 1; i < R; i++)\n        {\n                sum += arr[i % N];\n        }\n        document.write(sum);\n}", "39": "function check(N)\n{\n        var twos = 0, fives = 0;\n        while (N % 2 == 0)\n        {\n                N /= 2;\n                twos++;\n        }\n        while (N % 5 == 0)\n        {\n                N /= 5;\n                fives++;\n        }\n        if (N == 1 && twos <= fives)\n        {\n                document.write(2 * fives - twos);\n        }\n        else\n        {\n                document.write(-1);\n        }\n}", "40": "function getPairsCount(arr, n)\n{\n        let count = 0;\n        for(let i = 0; i < n; i++)\n        {\n                for(let j = arr[i] - (i % arr[i]); j < n; j += arr[i])\n                {\n                        if (i < j && Math.abs(arr[i] - arr[j]) >=\n                                                Math.min(arr[i], arr[j]))\n                        {\n                                count++;\n                        }\n                }\n        }\n        return count;\n}", "41": "function smallest(k, d) {\n                        let cnt = 1;\n                        let m = d % k;\n                        let v = new Array(k).fill(0);\n                        v[m] = 1;\n                        while (1) {\n                                if (m == 0)\n                                        return cnt;\n                                m = (((m * (10 % k)) % k) + (d % k)) % k;\n                                if (v[m] == 1)\n                                        return -1;\n                                v[m] = 1;\n                                cnt++;\n                        }\n                        return -1;\n                }", "42": "function performQuery(arr, Q)\n                {\n                        for (let i = 0; i < Q.length; i++) {\n                                let or = 0;\n                                let x = Q[i][0];\n                                arr[x - 1] = Q[i][1];\n                                for (let j = 0; j < arr.length; j++) {\n                                        or = or | arr[j];\n                                }\n                                document.write(or + \" \");\n                        }\n                }", "43": "function countSubsequences(arr)\n{\n        let odd = 0;\n        for (let x = 0; x < arr.length; x++) {\n                if (arr[x] & 1)\n                        odd++;\n        }\n        return (1 << odd) - 1;\n}\n", "44": NaN, "45": "function polygonArea(X, Y, n)\n{\n        let area = 0.0;\n        let j = n - 1;\n        for (let i = 0; i < n; i++)\n        {\n                area += (X[j] + X[i]) * (Y[j] - Y[i]);\n        }\n        return Math.abs(area / 2.0);\n}", "46": "function numberOfSquares(base)\n        {\n                base = (base - 2);\n                base = Math.floor(base / 2);\n                return base * (base + 1) / 2;\n        }", "47": "function findRightAngle(A,H)\n{\n        let D = Math.pow(H, 4) - 16 * A * A;\n        if (D >= 0)\n        {\n                let root1 = (H * H + Math.sqrt(D)) / 2;\n                let root2 = (H * H - Math.sqrt(D)) / 2;\n                let a = Math.sqrt(root1);\n                let b = Math.sqrt(root2);\n                if (b >= a)\n        document.write(a + \" \" + b + \" \" + H+\"<br/>\");\n                else\n        document.write(b + \" \" + a + \" \" + H+\"<br/>\");\n        }\n        else\n                document.write(\"-1\");\n}", "48": "function numberOfDiagonals(n)\n{\n        return n * (n - 3) / 2;\n}", "49": "function checkCollision(a, b, c, x, y, radius)\n        {\n                let dist = (Math.abs(a * x + b * y + c)) /\n                                                Math.sqrt(a * a + b * b);\n                if (radius == dist)\n                        document.write ( \"Touch\" );\n                else if (radius > dist)\n                        document.write( \"Intersect\") ;\n                else\n                        document.write( \"Outside\") ;\n        }"}, "Python": {"0": "def maxAdjacent(arr,N):\r\n    res = []\r\n    arr_max = min(arr)\r\n    for i in range(1,N-1):\r\n        arr_max = max(arr_max,abs(arr[i-1]-arr[i+1]))\r\n    for i in range(1,N-1):\r\n        curr_max = abs(arr[i-1]-arr[i+1])\r\n        ans = max(curr_max,arr_max)\r\n        res.append(ans)\r\n    print(*res)", "1": "def maxAdjacent(arr, N):\r\n    res = []\r\n    for i in range(1, N-1):\r\n        prev = arr[0]\r\n        maxi = float('-inf')\r\n        for j in range(1, N):\r\n            if i == j:\r\n                continue\r\n            maxi = max(maxi, abs(arr[j] - prev))\r\n            prev = arr[j]\r\n        res.append(maxi)\r\n    for j in range(0, len(res)):\r\n        print(res[j], end=' ')\r\n    print()", "2": "def minSum(A, N):\r\n    mp = {}\r\n    sum = 0\r\n    for i in range(N):\r\n        sum += A[i]\r\n        if A[i] in mp:\r\n            mp[A[i]] += 1\r\n        else:\r\n            mp[A[i]] = 1\r\n    minSum = float('inf')\r\n    for it in mp:\r\n        minSum = min(minSum, sum - (it * mp[it]))\r\n    return minSum", "3": "def countElements(N):\r\n    Cur_Ele = 1\r\n    Count = 0\r\n    while Cur_Ele <= N:\r\n        Count += 1\r\n        Cur_Ele = Cur_Ele * 2\r\n    print(N - Count)", "4": "def isPossible(N):\r\n    return (((N & (N - 1)) & N))\r\ndef countElements(N):\r\n    count = 0\r\n    for i in range(1, N + 1):\r\n        if isPossible(i) != 0:\r\n            count += 1\r\n    print(count)", "5": "def singleDigitSubarrayCount(arr, N):\r\n    res = 0\r\n    count = 0\r\n    for i in range(N):\r\n        if arr[i] <= 9:\r\n            count += 1\r\n            res += count\r\n        else:\r\n            count = 0\r\n    print(res)", "6": "def productExceptSelf(arr, N):\r\n    product = 1\r\n    z = 0\r\n    for i in range(N):\r\n        if arr[i] != 0:\r\n            product *= arr[i]\r\n        if arr[i] == 0:\r\n            z += 1\r\n    a = abs(product)\r\n    for i in range(N):\r\n        if z == 1:\r\n            if arr[i] != 0:\r\n                arr[i] = 0\r\n            else:\r\n                arr[i] = product\r\n            continue\r\n        elif z > 1:\r\n            arr[i] = 0\r\n            continue\r\n        b = abs(arr[i])\r\n        curr = round(math.exp(math.log(a) - math.log(b)))\r\n        if arr[i] < 0 and product < 0:\r\n            arr[i] = curr\r\n        elif arr[i] > 0 and product > 0:\r\n            arr[i] = curr\r\n        else:\r\n            arr[i] = -1 * curr\r\n    for i in range(N):\r\n        print(arr[i], end = \" \")", "7": "def convertToASCII(N):\r\n    num = str(N)\r\n    for ch in num:\r\n        print(ch + \" (\" + str(ord(ch)) + \")\")", "8": "def isPossible(target):\r\n    max = 0\r\n    index = 0\r\n    for i in range(len(target)):\r\n        if max < target[i]:\r\n            max = target[i]\r\n            index = i\r\n    if max == 1:\r\n        return True\r\n    for i in range(len(target)):\r\n        if i != index:\r\n            max -= target[i]\r\n            if max <= 0:\r\n                return False\r\n    target[index] = max\r\n    return isPossible(target)", "9": "def printSpiral(size):\r\n    row = 0\r\n    col = 0\r\n    boundary = size - 1\r\n    sizeLeft = size - 1\r\n    flag = 1\r\n    move = 'r'\r\n    matrix = [[0 for i in range(size)] for j in range(size)]\r\n    for i in range(1, size * size + 1):\r\n        matrix[row][col] = i\r\n        if move == 'r':\r\n            col += 1\r\n        elif move == 'l':\r\n            col -= 1\r\n        elif move == 'u':\r\n            row -= 1\r\n        elif move == 'd':\r\n            row += 1\r\n        if i == boundary:\r\n            boundary += sizeLeft\r\n            if flag != 2:\r\n                flag = 2\r\n            else:\r\n                flag = 1\r\n                sizeLeft -= 1\r\n            if move == 'r':\r\n                move = 'd'\r\n            elif move == 'd':\r\n                move = 'l'\r\n            elif move == 'l':\r\n                move = 'u'\r\n            elif move == 'u':\r\n                move = 'r'\r\n    for row in range(size):\r\n        for col in range(size):\r\n            n = matrix[row][col]\r\n            if n < 10:\r\n                print(n, end=' ')\r\n            else:\r\n                print(n, end=' ')\r\n        print()", "10": "def gcd(a, b):\r\n    while b > 0:\r\n        rem = a % b\r\n        a = b\r\n        b = rem\r\n    return a\r\n\r\ndef countNumberOfWays(n):\r\n    if n == 1:\r\n        return -1\r\n    g = 0\r\n    power = 0\r\n    while n % 2 == 0:\r\n        power += 1\r\n        n /= 2\r\n    g = gcd(g, power)\r\n    for i in range(3, int(n ** 0.5) + 1, 2):\r\n        power = 0\r\n        while n % i == 0:\r\n            power += 1\r\n            n /= i\r\n        g = gcd(g, power)\r\n    if n > 2:\r\n        g = gcd(g, 1)\r\n    ways = 1\r\n    power = 0\r\n    while g % 2 == 0:\r\n        g /= 2\r\n        power += 1\r\n    ways *= (power + 1)\r\n    for i in range(3, int(g ** 0.5) + 1, 2):\r\n        power = 0\r\n        while g % i == 0:\r\n            power += 1\r\n            g /= i\r\n        ways *= (power + 1)\r\n    if g > 2:\r\n        ways *= 2\r\n    return ways", "11": "def countPrimeFactors(n):\r\n    count = 0\r\n    while n % 2 == 0:\r\n        n = n / 2\r\n        count += 1\r\n    for i in range(3, int(n ** 0.5) + 1, 2):\r\n        while n % i == 0:\r\n            n = n / i\r\n            count += 1\r\n    if n > 2:\r\n        count += 1\r\n    return count\r\n\r\ndef findSum(n):\r\n    sum = 0\r\n    for i in range(1, n):\r\n        if countPrimeFactors(i) == 2:\r\n            sum += i\r\n    return sum\r\n\r\ndef check(n, k):\r\n    s = findSum(k - 1)\r\n    if s >= n:\r\n        print(\"No\")\r\n    else:\r\n        print(\"Yes\")", "12": "def partitionArray(a, n):\r\n    min = [0] * n\r\n    mini = float('inf')\r\n    for i in range(n-1, -1, -1):\r\n        mini = min(mini, a[i])\r\n        min[i] = mini\r\n    maxi = float('-inf')\r\n    ind = -1\r\n    for i in range(n-1):\r\n        maxi = max(maxi, a[i])\r\n        if maxi < min[i+1]:\r\n            ind = i\r\n            break\r\n    if ind != -1:\r\n        for i in range(ind+1):\r\n            print(a[i], end=' ')\r\n        print()\r\n        for i in range(ind+1, n):\r\n            print(a[i], end=' ')\r\n    else:\r\n        print(\"Impossible\")", "13": "def perfectSquare(num):\r\n    sr = math.floor(math.sqrt(num))\r\n    a = sr * sr\r\n    b = (sr + 1) * (sr + 1)\r\n    if ((num - a) < (b - num)):\r\n        return a\r\n    else:\r\n        return b\r\ndef powerOfTwo(num):\r\n    lg = math.floor(math.log2(num))\r\n    p = math.pow(2, lg)\r\n    return p\r\ndef uniqueElement(arr, N):\r\n    ans = True\r\n    arr.reverse()\r\n    freq = {}\r\n    for i in range(N):\r\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\r\n        if (freq.get(arr[i])):\r\n            freq[arr[i]] = freq.get(arr[i]) + 1\r\n        else:\r\n            freq[arr[i]] = 1\r\n    for el in freq:\r\n        if (freq.get(el) == 1):\r\n            ans = False\r\n            ps = perfectSquare(el)\r\n            print(powerOfTwo(ps), end = ' ')\r\n    if (ans):\r\n        print(-1)", "14": "def multiplyByMersenne(N, M):\r\n    x = math.log(M + 1) / math.log(2)\r\n    return ((N << x) - N)", "15": "def checkCommonDivisor(arr , N , X):\r\n    G = 0\r\n    for i in range(N):\r\n        G = gcd(G , arr[i])\r\n    copy_G = G\r\n    for divisor in range(2 , X + 1):\r\n        while G % divisor == 0:\r\n            G = G / divisor\r\n    if G <= X:\r\n        print(\"Yes\")\r\n        for i in range(N):\r\n            print(arr[i] / copy_G , end = \" \")\r\n        print()\r\n    else:\r\n        print(\"No\")\r\ndef gcd(a , b):\r\n    if b == 0:\r\n        return a\r\n    return gcd(b , a % b)", "16": "def check(Adj,Src,N,visited):\r\n        color = [0]*N\r\n        visited[Src] = True\r\n        q = []\r\n        q.append(Src)\r\n        while q:\r\n                u = q.pop(0)\r\n                Col = color[u]\r\n                for x in Adj[u]:\r\n                        if visited[x] == True and color[x] == Col:\r\n                                return False\r\n                        elif visited[x] == False:\r\n                                visited[x] = True\r\n                                q.append(x)\r\n                                color[x] = 1 - Col\r\n        return True\r\ndef addEdge(Adj,u,v):\r\n        Adj[u].append(v)\r\n        Adj[v].append(u)\r\ndef isPossible(Arr,N):\r\n        Adj = [[] for i in range(N)]\r\n        for i in range(N-1):\r\n                for j in range(i+1,N):\r\n                        if (Arr[i].R < Arr[j].L and Arr[i].L > Arr[j].R):\r\n                                continue\r\n                        else:\r\n                                if (Arr[i].V == Arr[j].V):\r\n                                        addEdge(Adj,i,j)\r\n        visited = [False]*N\r\n        for i in range(N):\r\n                if visited[i] == False and Adj[i]:\r\n                        if check(Adj,i,N,visited) == False:\r\n                                print(\"No\")\r\n                                return\r\n        print(\"Yes\")", "17": "def minimumSteps(x, y):\r\n    cnt = 0\r\n    while x != 0 and y != 0:\r\n        if x > y:\r\n            cnt += x / y\r\n            x %= y\r\n        else:\r\n            cnt += y / x\r\n            y %= x\r\n    cnt -= 1\r\n    if x > 1 and y > 1:\r\n        cnt = -1\r\n    print cnt", "18": "def vectorMagnitude(x, y, z):\r\n    sum = x * x + y * y + z * z\r\n    return math.sqrt(sum)", "19": "def findMedian(Mean, Mode):\r\n    Median = (2 * Mean + Mode) / 3.0\r\n    print(Median)", "20": "def sieveOfEratosthenes(N, s):\r\n        prime = [False] * (N+1)\r\n        for i in range(2, N+1):\r\n                s[i] = i\r\n        for i in range(3, N+1, 2):\r\n                if prime[i] == False:\r\n                        s[i] = 2\r\n                        for j in range(i, N+1, i):\r\n                                if prime[j] == False:\r\n                                        prime[j] = True\r\n                                        s[j] = i\r\n\r\ndef findDifference(N):\r\n        s = [0] * (N+1)\r\n        sieveOfEratosthenes(N, s)\r\n        total = 1\r\n        odd = 1\r\n        even = 0\r\n        curr = s[N]\r\n        cnt = 1\r\n        while N > 1:\r\n                N //= s[N]\r\n                if curr == s[N]:\r\n                        cnt += 1\r\n                        continue\r\n                if curr == 2:\r\n                        total = total * (cnt + 1)\r\n                else:\r\n                        total = total * (cnt + 1)\r\n                        odd = odd * (cnt + 1)\r\n                curr = s[N]\r\n                cnt = 1\r\n        even = total - odd\r\n        print(abs(even - odd))", "21": "def findPermutation(arr):\r\n    N = len(arr)\r\n    i = N - 2\r\n    while i >= 0 and arr[i] <= arr[i + 1]:\r\n        i -= 1\r\n    if i == -1:\r\n        print(\"-1\")\r\n        return\r\n    j = N - 1\r\n    while j > i and arr[j] >= arr[i]:\r\n        j -= 1\r\n    while j > i and arr[j] == arr[j - 1]:\r\n        j -= 1\r\n    temp = arr[i]\r\n    arr[i] = arr[j]\r\n    arr[j] = temp\r\n    for it in arr:\r\n        print(it, end = \" \")", "22": "def evenOddBitwiseXOR(N):\r\n    print(\"Even: 0 \", end = \"\")\r\n    for i in range(4, N+1, 4):\r\n        print(i, end = \" \")\r\n    print(\"\\nOdd: 1 \", end = \"\")\r\n    for i in range(4, N+1, 4):\r\n        print(i-1, end = \" \")\r\n    if N % 4 == 2:\r\n        print(N+1)\r\n    elif N % 4 == 3:\r\n        print(N)", "23": "def check(n):\r\n    sumOfDigit = 0\r\n    prodOfDigit = 1\r\n    while n > 0:\r\n        rem = n % 10\r\n        sumOfDigit += rem\r\n        prodOfDigit *= rem\r\n        n = n // 10\r\n    if sumOfDigit > prodOfDigit:\r\n        print(\"Yes\")\r\n    else:\r\n        print(\"No\")", "24": "def findbitwiseOR(a, n):\r\n    res = 0\r\n    for i in range(n):\r\n        res = res | a[i]\r\n    print(res)", "25": "def findbitwiseOR(a, n):\r\n    res = 0\r\n    for i in range(n):\r\n        curr_sub_array = a[i]\r\n        res = res | curr_sub_array\r\n        for j in range(i, n):\r\n            curr_sub_array = curr_sub_array & a[j]\r\n            res = res | curr_sub_array\r\n    print(res)", "26": "def KthSmallest(A, B, N, K):\r\n    M = 0\r\n    for i in range(N):\r\n        M = max(A[i], M)\r\n    freq = [0] * (M + 1)\r\n    for i in range(N):\r\n        freq[A[i]] += B[i]\r\n    sum = 0\r\n    for i in range(M + 1):\r\n        sum += freq[i]\r\n        if sum >= K:\r\n            return i\r\n    return -1", "27": "def isDivisibleByDivisor(S, D):\r\n        S %= D;\r\n        hashMap = [];\r\n        hashMap.append(S);\r\n        for i in range(0, D):\r\n                S += S % D;\r\n                S %= D;\r\n                if S in hashMap:\r\n                        if S == 0:\r\n                                return \"Yes\";\r\n                        return \"No\";\r\n                else:\r\n                        hashMap.append(S);\r\n        return \"Yes\";", "28": "def gcd(a, b):\r\n    if b == 0:\r\n        return a\r\n    return gcd(b, a % b)\r\ndef PrimeFactor(N):\r\n    primef = {}\r\n    while N % 2 == 0:\r\n        if 2 in primef:\r\n            primef[2] += 1\r\n        else:\r\n            primef[2] = 1\r\n        N = N // 2\r\n    for i in range(3, int(N ** 0.5) + 1, 2):\r\n        while N % i == 0:\r\n            if i in primef:\r\n                primef[i] += 1\r\n            else:\r\n                primef[i] = 1\r\n            N = N // i\r\n    if N > 2:\r\n        primef[N] = 1\r\n    return primef\r\ndef CountToMakeEqual(X, Y):\r\n    gcdofXY = gcd(X, Y)\r\n    newX = Y // gcdofXY\r\n    newY = X // gcdofXY\r\n    primeX = PrimeFactor(newX)\r\n    primeY = PrimeFactor(newY)\r\n    ans = 0\r\n    for key in primeX:\r\n        if X % key != 0:\r\n            return -1\r\n        ans += primeX[key]\r\n    ans += 1\r\n    for key in primeY:\r\n        if Y % key != 0:\r\n            return -1\r\n        ans += primeY[key]\r\n    return ans", "29": "def isPrime(X):\r\n        for i in range(2, int(X**0.5)+1):\r\n                if X % i == 0:\r\n                        return False\r\n        return True\r\ndef printPrimes(A, N):\r\n        for i in range(N):\r\n                for j in range(A[i]-1, 0, -1):\r\n                        if isPrime(j):\r\n                                print(j, end=\" \")\r\n                                break\r\n                for j in range(A[i]+1, 0, 1):\r\n                        if isPrime(j):\r\n                                print(j, end=\" \")\r\n                                break\r\n                print(\"<br>\")", "30": "def countSubarray(arr, n):\r\n    mx = max(arr)\r\n    L = 0\r\n    R = 0\r\n    for i in range(n):\r\n        if arr[i] * 2 > mx:\r\n            L = i\r\n            break\r\n    for i in range(n-1, -1, -1):\r\n        if arr[i] * 2 > mx:\r\n            R = i\r\n            break\r\n    print((L+1)*(n-R))", "31": "def countSubarray(arr, n):\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i, n):\r\n            mxSubarray = 0\r\n            mxOther = 0\r\n            for k in range(i, j+1):\r\n                mxSubarray = max(mxSubarray, arr[k])\r\n            for k in range(0, i):\r\n                mxOther = max(mxOther, arr[k])\r\n            for k in range(j+1, n):\r\n                mxOther = max(mxOther, arr[k])\r\n            if mxSubarray > (2 * mxOther):\r\n                count += 1\r\n    print(count)", "32": "def preCalculate(phi, ans):\r\n    phi[0] = 0\r\n    phi[1] = 1\r\n    for i in range(2, MAX):\r\n        phi[i] = i\r\n    for i in range(2, MAX):\r\n        if phi[i] == i:\r\n            for j in range(i, MAX, i):\r\n                phi[j] -= int(phi[j] / i)\r\n    for i in range(1, MAX):\r\n        ans[i] = ans[i - 1] + (i - phi[i])\r\n\r\ndef countPairs(arr, N):\r\n    phi = [0] * MAX\r\n    ans = [0] * MAX\r\n    preCalculate(phi, ans)\r\n    for i in range(N):\r\n        print(ans[arr[i]], end=' ')", "33": "def gcd(a, b):\r\n    if b == 0:\r\n        return a\r\n    return gcd(b, a % b)\r\ndef countPairs(arr, N):\r\n    for i in range(N):\r\n        count = 0\r\n        for x in range(1, arr[i] + 1):\r\n            for y in range(x, arr[i] + 1):\r\n                if gcd(x, y) > 1:\r\n                    count += 1\r\n        print(count, end = \" \")", "34": "def factorial(n):\r\n    if n == 0:\r\n        return 1\r\n    return n * factorial(n - 1)\r\n\r\ndef numOfNecklace(N):\r\n    ans = factorial(N) / (factorial(N / 2) * factorial(N / 2))\r\n    ans = ans * factorial(N / 2 - 1)\r\n    ans = ans * factorial(N / 2 - 1)\r\n    ans /= 2\r\n    return ans", "35": "def maxSubArraySumRepeated(arr, N, K):\r\n    sum = 0\r\n    for i in range(N):\r\n        sum += arr[i]\r\n    curr = arr[0]\r\n    ans = arr[0]\r\n    if K == 1:\r\n        for i in range(1, N):\r\n            curr = max(arr[i], curr + arr[i])\r\n            ans = max(ans, curr)\r\n        return ans\r\n    V = []\r\n    for i in range(2 * N):\r\n        V.append(arr[i % N])\r\n    maxSuf = V[0]\r\n    maxPref = V[2 * N - 1]\r\n    curr = V[0]\r\n    for i in range(1, 2 * N):\r\n        curr += V[i]\r\n        maxPref = max(maxPref, curr)\r\n    curr = V[2 * N - 1]\r\n    for i in range(2 * N - 2, -1, -1):\r\n        curr += V[i]\r\n        maxSuf = max(maxSuf, curr)\r\n    curr = V[0]\r\n    for i in range(1, 2 * N):\r\n        curr = max(V[i], curr + V[i])\r\n        ans = max(ans, curr)\r\n    if sum > 0:\r\n        temp = sum * (K - 2)\r\n        ans = max(ans, max(temp + maxPref, temp + maxSuf))\r\n    return ans", "36": "def ExpoFactorial(N):\r\n    res = 1\r\n    mod = 1000000007\r\n    for i in range(2, N + 1):\r\n        res = pow(i, res, mod)\r\n    return res", "37": "def rangeSum(arr, N, L, R):\r\n    prefix = [0] * (N + 1)\r\n    prefix[0] = 0\r\n    for i in range(1, N + 1):\r\n        prefix[i] = prefix[i - 1] + arr[i - 1]\r\n    leftsum = ((L - 1) // N) * prefix[N] + prefix[(L - 1) % N]\r\n    rightsum = (R // N) * prefix[N] + prefix[R % N]\r\n    print(rightsum - leftsum)", "38": "def rangeSum(arr, N, L, R):\r\n    sum = 0\r\n    for i in range(L-1, R):\r\n        sum += arr[i % N]\r\n    print(sum)", "39": "def check(N):\r\n    twos = 0\r\n    fives = 0\r\n    while N % 2 == 0:\r\n        N /= 2\r\n        twos += 1\r\n    while N % 5 == 0:\r\n        N /= 5\r\n        fives += 1\r\n    if N == 1 and twos <= fives:\r\n        print(2 * fives - twos)\r\n    else:\r\n        print(-1)", "40": "def getPairsCount(arr, n):\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(arr[i] - (i % arr[i]), n, arr[i]):\r\n            if i < j and abs(arr[i] - arr[j]) >= min(arr[i], arr[j]):\r\n                count += 1\r\n    return count", "41": "def smallest(k, d):\r\n    cnt = 1\r\n    m = d % k\r\n    v = [0] * k\r\n    v[m] = 1\r\n    while True:\r\n        if m == 0:\r\n            return cnt\r\n        m = (((m * (10 % k)) % k) + (d % k)) % k\r\n        if v[m] == 1:\r\n            return -1\r\n        v[m] = 1\r\n        cnt += 1\r\n    return -1", "42": "def performQuery(arr, Q):\r\n    for i in range(len(Q)):\r\n        or = 0\r\n        x = Q[i][0]\r\n        arr[x - 1] = Q[i][1]\r\n        for j in range(len(arr)):\r\n            or = or | arr[j]\r\n        print(or, end=\" \")", "43": "def countSubsequences(arr):\r\n    odd = 0\r\n    for x in range(len(arr)):\r\n        if arr[x] & 1:\r\n            odd += 1\r\n    return (1 << odd) - 1", "44": NaN, "45": "def polygonArea(X, Y, n):\r\n    area = 0.0\r\n    j = n - 1\r\n    for i in range(0, n):\r\n        area += (X[j] + X[i]) * (Y[j] - Y[i])\r\n        j = i\r\n    return abs(area / 2.0)", "46": "def numberOfSquares(base):\r\n    base = (base - 2)\r\n    base = math.floor(base / 2)\r\n    return base * (base + 1) / 2", "47": "def findRightAngle(A,H):\r\n    D = H**4 - 16 * A * A\r\n    if D >= 0:\r\n        root1 = (H**2 + math.sqrt(D)) / 2\r\n        root2 = (H**2 - math.sqrt(D)) / 2\r\n        a = math.sqrt(root1)\r\n        b = math.sqrt(root2)\r\n        if b >= a:\r\n            print(a,b,H)\r\n        else:\r\n            print(b,a,H)\r\n    else:\r\n        print(-1)", "48": "def numberOfDiagonals(n):\r\n    return n * (n - 3) / 2", "49": "def checkCollision(a, b, c, x, y, radius):\r\n        dist = (abs(a * x + b * y + c)) / math.sqrt(a * a + b * b)\r\n        if radius == dist:\r\n                print(\"Touch\")\r\n        elif radius > dist:\r\n                print(\"Intersect\")\r\n        else:\r\n                print(\"Outside\")"}}, "Python - C": {"id": {"0": 9496, "1": 9493, "2": 9478, "3": 9476, "4": 9468, "5": 9467, "6": 9458, "7": 9457, "8": 9452, "9": 9446, "10": 9445, "11": 9432, "12": 9430, "13": 9423, "14": 9405, "15": 9369, "16": 9362, "17": 9359, "18": 9358, "19": 9348, "20": 9346, "21": 9329, "22": 9318, "23": 9305, "24": 9302, "25": 9291, "26": 9290, "27": 9258, "28": 9257, "29": 9250, "30": 9247, "31": 9241, "32": 9240, "33": 9238, "34": 9232, "35": 9201, "36": 9200, "37": 9197, "38": 9196, "39": 9195, "40": 9187, "41": 9181, "42": 9177, "43": 9169, "44": 9147, "45": 9142, "46": 9137, "47": 9130, "48": 9129, "49": 9119}, "Python": {"0": "def numberOfDiagonals(n):\n        return n * (n - 3) / 2", "1": "def lineFromPoints(P, Q, a, b, c):\n        a = Q[1] - P[1]\n        b = P[0] - Q[0]\n        c = a * (P[0]) + b * (P[1])\n        return a, b, c\ndef perpendicularBisectorFromLine(P, Q, a, b, c):\n        mid_point = [(P[0] + Q[0])//2, (P[1] + Q[1])//2]\n        c = -b * (mid_point[0]) + a * (mid_point[1])\n        temp = a\n        a = -b\n        b = temp\n        return a, b, c\ndef lineLineIntersection(a1, b1, c1, a2, b2, c2):\n        determinant = a1 * b2 - a2 * b1\n        if (determinant == 0):\n                return [(10.0)**19, (10.0)**19]\n        else:\n                x = (b2 * c1 - b1 * c2)//determinant\n                y = (a1 * c2 - a2 * c1)//determinant\n                return [x, y]\ndef findCircumCenter(P, Q, R):\n        a, b, c = 0.0, 0.0, 0.0\n        a, b, c = lineFromPoints(P, Q, a, b, c)\n        e, f, g = 0.0, 0.0, 0.0\n        e, f, g = lineFromPoints(Q, R, e, f, g)\n        a, b, c = perpendicularBisectorFromLine(P, Q, a, b, c)\n        e, f, g = perpendicularBisectorFromLine(Q, R, e, f, g)\n        circumcenter = lineLineIntersection(a, b, c, e, f, g)\n        if (circumcenter[0] == (10.0)**19 and circumcenter[1] == (10.0)**19):\n                print(\"The two perpendicular bisectors found come parallel\")\n                print(\"Thus, the given points do not form a triangle and are collinear\")\n        else:\n                print(\"The circumcenter of the triangle PQR is: \", end=\"\")\n                print(\"(\", circumcenter[0], \",\", circumcenter[1], \")\")", "2": "def checkCollision(a, b, c, x, y, radius):\n        dist = ((abs(a * x + b * y + c)) /\n                        math.sqrt(a * a + b * b))\n        if (radius == dist):\n                print(\"Touch\")\n        elif (radius > dist):\n                print(\"Intersect\")\n        else:\n                print(\"Outside\")", "3": "def maxSquare(b, m):\n        return (b / m - 1) * (b / m) / 2", "4": "def SectorArea(radius, angle):\n        pi = 22 / 7\n        if angle >= 360:\n                print(\"Angle not possible\")\n                return\n        else:\n                sector = (pi * radius ** 2) * (angle / 360)\n                print(sector)\n                return", "5": "def arcLength(diameter, angle ):\n        if angle >= 360:\n                print(\"Angle cannot be formed\")\n                return 0\n        else:\n                arc = (3.142857142857143 * diameter) * (angle / 360.0)\n                return arc", "6": "def hexagonArea(s):\n        return ((3 * math.sqrt(3) *\n                        (s * s)) / 2);", "7": "def Area(b1, b2, h):\n        return ((b1 + b2) / 2) * h", "8": "def volumeTriangular(a, b, h):\n        return (0.1666) * a * b * h\ndef volumeSquare(b, h):\n        return (0.33) * b * b * h\ndef volumePentagonal(a, b, h):\n        return (0.83) * a * b * h\ndef volumeHexagonal(a, b, h):\n        return a * b * h", "9": "def maxvolume( s ):\n        length = int(s / 3)\n        s -= length\n        breadth = s / 2\n        height = s - breadth\n        return int(length * breadth * height)", "10": "def maxvolume (s):\n        maxvalue = 0\n        i = 1\n        for i in range(s - 1):\n                j = 1\n                for j in range(s):\n                        k = s - i - j\n                        maxvalue = max(maxvalue, i * j * k)\n        return maxvalue\n", "11": "def midpoint(x1, x2, y1, y2):\n        print((x1 + x2) // 2, \" , \",\n                                (y1 + y2) // 2)", "12": "def area_of_segment(radius, angle):\n        area_of_sector = pi *\n                                        (radius * radius)\n                                        * (angle / 360)\n        area_of_triangle = 1 / 2 *\n                                        (radius * radius) *\n                                        math.sin((angle * pi) / 180)\n        return area_of_sector - area_of_triangle;", "13": "def isRectangle(a, b, c, d):\n        if (a==b and d==c) or (a==c and b==d) or (a==d and b==c):\n                return True\n        else:        \n                return False", "14": "def findPCSlope(m):\n        return -1.0 / m", "15": "def findVolume(l, b, h) :\n        return ((l * b * h) / 2)", "16": "def shortest_distance(x1, y1, z1, a, b, c, d):\n        d = abs((a * x1 + b * y1 + c * z1 + d))\n        e = (math.sqrt(a * a + b * b + c * c))\n        print(\"Perpendicular distance is\", d/e)", "17": "def distance(a1, b1, c1, d1, a2, b2, c2, d2):\n        if (a1 / a2 == b1 / b2 and b1 / b2 == c1 / c2):\n                x1 = y1 = 0\n                z1 =-d1 / c1\n                d = abs(( c2 * z1 + d2)) / (math.sqrt(a2 * a2 + b2 * b2 + c2 * c2))\n                print(\"Perpendicular distance is\"), d\n        else:\n                print(\"Planes are not parallel\")", "18": "def FindPoint(x1, y1, x2, y2, x, y) :\n        if (x > x1 and x < x2 and y > y1 and y < y2) :\n                return True\n        else :\n                return False\n", "19": "def LiesInsieRectangle(a, b, x, y) :\n        if(x - y - b <= 0 and x - y + b >= 0 and x + y - 2 * a + b <= 0 and x + y - b >= 0) :\n                return True\n        return False", "20": "def is_partition_possible(n, x, y, w):\n        weight_at_x = defaultdict(int)\n        max_x = -2e3\n        min_x = 2e3\n        for i in range(n):\n                new_x = x[i] - y[i]\n                max_x = max(max_x, new_x)\n                min_x = min(min_x, new_x)\n                weight_at_x[new_x] += w[i]\n        sum_till = []\n        sum_till.append(0)\n        for x in range(min_x, max_x + 1):\n                sum_till.append(sum_till[-1] + weight_at_x[x])\n        total_sum = sum_till[-1]\n        partition_possible = False\n        for i in range(1, len(sum_till)):\n                if (sum_till[i] == total_sum - sum_till[i]):\n                        partition_possible = True\n                if (sum_till[i - 1] == total_sum - sum_till[i]):\n                        partition_possible = True\n        if partition_possible:\n                print(\"YES\")\n        else:\n                print(\"NO\")", "21": "def longestRodInCuboid(length, breadth, height) :\n        temp = length * length + breadth * breadth + height * height\n        result = sqrt(temp)\n        return result", "22": "def area(a):\n        if a < 0 :\n                return -1\n        area = sqrt(a) / 6\n        return area\n", "23": "def rhombusarea(l,b):\n        if (l < 0 or b < 0):\n                return -1\n        return (l * b) / 2", "24": NaN, "25": "def area(r):\n        return (0.5)*(3.14)*(r * r)\ndef perimeter(r):\n        return (3.14)*(r)", "26": "def Perimeter(s, n):\n        perimeter = 1\n        perimeter = n * s\n        return perimeter\n", "27": "def findVolume(a) :\n        if (a < 0) :\n                return -1\n        r = a / 2\n        h = a\n        V = 3.14 * pow(r, 2) * h\n        return V", "28": "def cyl(r, R, h) :\n        if (h < 0 and r < 0 and R < 0) :\n                return -1\n        r1 = r\n        h1 = h\n        V = 3.14 * pow(r1, 2) * h1\n        return round(V,2)", "29": "def calculateSide(n, r):\n        theta = 360 / n\n        theta_in_radians = theta * 3.14 / 180\n        return 2 * r * sin(theta_in_radians / 2)", "30": "def hexDiagonal(a):\n        if (a < 0):\n                return -1;\n        d = 1.73 * a;\n        return d;", "31": "def polyarea(n, a):\n        if (a < 0 and n < 0):\n                return -1\n        A = (a * a * n) / (4 * tan((180 / n) * 3.14159 / 180))\n        return A", "32": "def polyarea(n, r) :\n        if (r < 0 and n < 0) :\n                return -1\n        A = (((r * r * n) * sin((360 / n) * 3.14159 / 180)) / 2);\n        return round(A, 3)\n", "33": "def polyapothem(n, a):\n        if (a < 0 and n < 0):\n                return -1\n        return a / (2 * tan((180 / n) * 3.14159 / 180))", "34": "def square( a ):\n        if (a < 0):\n                return -1\n        x = 0.464 * a\n        return x", "35": "def length_of_chord(r, x):\n        print(\"The length of the chord\"\n                ,\" of the circle is \"\n                ,2 * r * mt.sin(x * (3.14 / 180)))", "36": "def lengtang(r1, r2, d):\n        print(\"The length of the direct common tangent is\",\n                (((d ** 2) - ((r1 - r2) ** 2)) ** (1 / 2)));", "37": "def shortdis(r, d):\n        print(\"The shortest distance \",end=\"\");\n        print(\"from the chord to centre \",end=\"\");\n        print(((r * r) - ((d * d) / 4))**(1/2));", "38": "def rad(d, h):\n        print(\"The radius of the circle is\",\n                ((d * d) / (8 * h) + h / 2))", "39": "def lengtang(r1, r2, d):\n        print(\"The length of the direct common tangent is \"\n                ,((d** 2) - ((r1 - r2)** 2))**(1/2));", "40": "def circle(x1, y1, x2,y2, r1, r2):\n        distSq = (((x1 - x2)* (x1 - x2))+ ((y1 - y2)* (y1 - y2)))**(.5)\n        if (distSq + r2 == r1):\n                print(\"The smaller circle lies completely\" \" inside the bigger circle with \" \"touching each other \" \"at a point of circumference. \")\n        elif (distSq + r2 < r1):\n                print(\"The smaller circle lies completely\" \" inside the bigger circle without\" \" touching each other \" \"at a point of circumference. \")\n        else:\n                print(\"The smaller does not lies inside\" \" the bigger circle completely.\")", "41": "def anglequichord(z):\n        print (\"The angle is \" , z , \" degrees\")", "42": "def areaOfTriangle(d) :\n        c = 1.618 * d\n        s = (d + c + c) / 2\n        area = math.sqrt(s * (s - c) *\n                                                (s - c) * (s - d))\n        return 5 * area\ndef areaOfRegPentagon(d) :\n        global PI\n        cal = 4 * math.tan(PI / 5)\n        area = (5 * d * d) / cal\n        return area\ndef areaOfPentagram(d) :\n        return areaOfRegPentagon(d) + areaOfTriangle(d)", "43": "def newvol(x):\n        print(\"percentage increase in the\"\n                \" volume of the sphere is \"\n                ,pow(x, 3) / 10000 + 3 * x\n                                + (3 * pow(x, 2)) / 100 ,\"%\")", "44": "def countIntersections(n):\n        return n * (n - 1) // 2", "45": "def find_Centroid(v):\n        ans = [0, 0]\n        n = len(v)\n        signedArea = 0\n        for i in range(len(v)):\n                x0 = v[i][0]\n                y0 = v[i][1]\n                x1 = v[(i + 1) % n][0]\n                y1 =v[(i + 1) % n][1]\n                A = (x0 * y1) - (x1 * y0)\n                signedArea += A\n                ans[0] += (x0 + x1) * A\n                ans[1] += (y0 + y1) * A\n        signedArea *= 0.5\n        ans[0] = (ans[0]) / (6 * signedArea)\n        ans[1] = (ans[1]) / (6 * signedArea)\n        return ans", "46": "def countPairs(P, Q, N, M):\n        A = [0] * 2\n        B = [0] * 2\n        for i in range(N):\n                A[P[i] % 2] += 1\n        for i in range(M):\n                B[Q[i] % 2] += 1\n        return (A[0] * B[0] + A[1] * B[1])", "47": "def circlearea(R) :\n        if (R < 0) :\n                return -1;\n        a = (3.14 * R * R) / 4;\n        return a;", "48": "def area(R):\n        base = 1.732 * R\n        height = ( 3 / 2 ) * R\n        area = (( 1 / 2 ) * base * height )\n        return area\n", "49": "def area_of_circle(m, n):\n        square_of_radius = ( m * n ) / 4\n        area = ( 3.141 * square_of_radius )\n        return area"}, "C": {"0": "int numberOfDiagonals(int n) {\r\n    return n * (n - 3) / 2;\r\n}", "1": NaN, "2": "int main()\r\n{\r\n        double dist;\r\n        dist = ((abs(a * x + b * y + c)) /\r\n                        sqrt(a * a + b * b));\r\n        if (radius == dist)\r\n                printf(\"Touch\\n\");\r\n        else if (radius > dist)\r\n                printf(\"Intersect\\n\");\r\n        else\r\n                printf(\"Outside\\n\");\r\n        return 0;\r\n}", "3": "int maxSquare(int b, int m) {\r\n    return (b / m - 1) * (b / m) / 2;\r\n}", "4": "#define PI 3.14\r\nvoid main()\r\n{\r\n        float radius, angle, sector;\r\n        printf(\"Enter the radius of the circle: \");\r\n        scanf(\"%f\", &radius);\r\n        printf(\"Enter the angle of the sector: \");\r\n        scanf(\"%f\", &angle);\r\n        if (angle >= 360)\r\n        {\r\n                printf(\"Angle not possible\");\r\n        }\r\n        else\r\n        {\r\n                sector = (PI * radius * radius) * (angle / 360);\r\n                printf(\"Sector area is: %f\", sector);\r\n        }\r\n}", "5": "float arcLength(float diameter, float angle)\r\n{\r\n\tif (angle >= 360)\r\n\t{\r\n\t\tprintf(\"Angle cannot be formed\");\r\n\t\treturn 0;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfloat arc = (3.142857142857143 * diameter) * (angle / 360.0);\r\n\t\treturn arc;\r\n\t}\r\n}", "6": "double hexagonArea(double s)\r\n{\r\n    return ((3 * sqrt(3) *\r\n                (s * s)) / 2);\r\n}", "7": "float Area(float b1, float b2, float h)\r\n{\r\n    return ((b1 + b2) / 2) * h;\r\n}", "8": "#define volumeTriangular(a, b, h) (0.1666) * a * b * h\r\n#define volumeSquare(b, h) (0.33) * b * b * h\r\n#define volumePentagonal(a, b, h) (0.83) * a * b * h\r\n#define volumeHexagonal(a, b, h) a * b * h\r\n#end\r\n#translate this code from Python to C\r\n#Python version\r\ndef volumeTriangular(a, b, h):\r\n        return (0.1666) * a * b * h\r\ndef volumeSquare(b, h):\r\n        return (0.33) * b * b * h\r\ndef volumePentagonal(a, b, h):\r\n        return (0.83) * a * b * h\r\ndef volumeHexagonal(a, b, h):\r\n        return a * b * h", "9": "int maxvolume( int s )\r\n{\r\n    int length = s / 3;\r\n    s -= length;\r\n    int breadth = s / 2;\r\n    int height = s - breadth;\r\n    return length * breadth * height;\r\n}", "10": "int maxvolume (int s)\r\n{\r\n    int maxvalue = 0;\r\n    int i;\r\n    for (i = 1; i < s; i++)\r\n    {\r\n        int j;\r\n        for (j = 1; j < s; j++)\r\n        {\r\n            int k = s - i - j;\r\n            maxvalue = max(maxvalue, i * j * k);\r\n        }\r\n    }\r\n    return maxvalue;\r\n}", "11": "int main()\r\n{\r\n    int x1, x2, y1, y2;\r\n    printf(\"Enter x1, x2, y1, y2: \");\r\n    scanf(\"%d %d %d %d\", &x1, &x2, &y1, &y2);\r\n    printf(\"The midpoint is at (%d, %d)\\n\",\r\n                                (x1 + x2) // 2,\r\n                                (y1 + y2) // 2);\r\n    return 0;\r\n}", "12": "int area_of_segment(int radius, int angle)\r\n{\r\n    int area_of_sector = pi * (radius * radius) * (angle / 360);\r\n    int area_of_triangle = 1 / 2 * (radius * radius) *\r\n                                            sin((angle * pi) / 180);\r\n    return area_of_sector - area_of_triangle;\r\n}", "13": "int isRectangle(int a, int b, int c, int d)\r\n{\r\n        if (a==b && d==c) || (a==c && b==d) || (a==d && b==c)\r\n                return 1;\r\n        else\r\n                return 0;\r\n}", "14": "double findPCSlope(double m) {\r\n    return -1.0 / m;\r\n}", "15": "double findVolume(double l, double b, double h) {\r\n        return ((l * b * h) / 2);\r\n}", "16": "#define abs(x) ((x) < 0 ? -(x) : (x))\r\n#define sqrt(x) ((x) < 0 ? -sqrt(-x) : sqrt(x))\r\nint main()\r\n{\r\n    float x1, y1, z1, a, b, c, d, d1, e1;\r\n    printf(\"Enter the value of x1, y1, z1, a, b, c, d: \");\r\n    scanf(\"%f%f%f%f%f%f%f\", &x1, &y1, &z1, &a, &b, &c, &d);\r\n    d1 = abs((a * x1 + b * y1 + c * z1 + d));\r\n    e1 = sqrt(a * a + b * b + c * c);\r\n    printf(\"Perpendicular distance is %f\", d1/e1);\r\n    return 0;\r\n}", "17": "float distance(float a1, float b1, float c1, float d1, float a2, float b2, float c2, float d2)\r\n{\r\n        if (a1 / a2 == b1 / b2 && b1 / b2 == c1 / c2)\r\n        {\r\n                float x1 = 0, y1 = 0, z1 = 0;\r\n                z1 = -d1 / c1;\r\n                float d = fabs((c2 * z1 + d2)) / (sqrt(a2 * a2 + b2 * b2 + c2 * c2));\r\n                printf(\"Perpendicular distance is %f\", d);\r\n        }\r\n        else\r\n                printf(\"Planes are not parallel\");\r\n}", "18": "int FindPoint(int x1, int y1, int x2, int y2, int x, int y)\r\n{\r\n    if (x > x1 && x < x2 && y > y1 && y < y2)\r\n        return 1;\r\n    else\r\n        return 0;\r\n}", "19": "bool LiesInsieRectangle(int a, int b, int x, int y) {\r\n        if(x - y - b <= 0 && x - y + b >= 0 && x + y - 2 * a + b <= 0 && x + y - b >= 0) {\r\n                return true;\r\n        }\r\n        return false;\r\n}", "20": NaN, "21": "int main() {\r\n        int length, breadth, height;\r\n        double result;\r\n        printf(\"Enter the length, breadth and height of the cuboid : \");\r\n        scanf(\"%d %d %d\", &length, &breadth, &height);\r\n        result = sqrt(length * length + breadth * breadth + height * height);\r\n        printf(\"The longest rod in the cuboid is %lf\", result);\r\n        return 0;\r\n}", "22": "float area(float a)\r\n{\r\n        if (a < 0)\r\n                return -1;\r\n        float area = sqrt(a) / 6;\r\n        return area;\r\n}", "23": "int rhombusarea(int l, int b)\r\n{\r\n        if (l < 0 || b < 0)\r\n                return -1;\r\n        return (l * b) / 2;\r\n}", "24": NaN, "25": "int main()\r\n{\r\n        float r;\r\n        printf(\"Enter the radius of the circle: \");\r\n        scanf(\"%f\", &r);\r\n        printf(\"Area of the circle is: %f\", area(r));\r\n        printf(\"Perimeter of the circle is: %f\", perimeter(r));\r\n        return 0;\r\n}", "26": "int Perimeter(int s, int n)\r\n{\r\n    int perimeter = 1;\r\n    perimeter = n * s;\r\n    return perimeter;\r\n}", "27": "int findVolume(int a)\r\n{\r\n        if (a < 0)\r\n                return -1;\r\n        int r = a / 2;\r\n        int h = a;\r\n        int V = 3.14 * pow(r, 2) * h;\r\n        return V;\r\n}", "28": "float cyl(float r, float R, float h)\r\n{\r\n        if (h < 0 && r < 0 && R < 0)\r\n                return -1;\r\n        float r1 = r;\r\n        float h1 = h;\r\n        float V = 3.14 * pow(r1, 2) * h1;\r\n        return round(V, 2);\r\n}", "29": "int calculateSide(int n, double r)\r\n{\r\n    double theta = 360.0 / n;\r\n    double theta_in_radians = theta * 3.14 / 180;\r\n    return 2 * r * sin(theta_in_radians / 2);\r\n}", "30": "int hexDiagonal(int a)\r\n{\r\n        if (a < 0)\r\n                return -1;\r\n        double d = 1.73 * a;\r\n        return d;\r\n}", "31": "float polyarea(int n, float a)\r\n{\r\n        if (a < 0 && n < 0)\r\n                return -1;\r\n        float A = (a * a * n) / (4 * tan((180 / n) * 3.14159 / 180));\r\n        return A;\r\n}", "32": "float polyarea(int n, float r)\r\n{\r\n    if (r < 0 && n < 0)\r\n        return -1;\r\n    float A = (((r * r * n) * sin((360 / n) * 3.14159 / 180)) / 2);\r\n    return round(A, 3);\r\n}", "33": "float polyapothem(int n, float a)\r\n{\r\n        if (a < 0 && n < 0)\r\n                return -1;\r\n        return a / (2 * tan((180 / n) * 3.14159 / 180));\r\n}", "34": "#define square( a ) ( (a < 0) ? -1 : 0.464 * a )", "35": "#define PI 3.14\nint main()\n{\n    float r, x;\n    printf(\"Enter the radius and angle of the chord: \");\n    scanf(\"%f %f\", &r, &x);\n    printf(\"The length of the chord\"\n            ,\" of the circle is \"\n            ,2 * r * sin(x * (PI / 180)));\n    return 0;\n}", "36": "#define PI 3.14159265358979323846264338327950288419716939937510\r\n\r\nint main(void)\r\n{\r\n        double r1, r2, d;\r\n        printf(\"Enter the radii of the circles: \");\r\n        scanf(\"%lf %lf\", &r1, &r2);\r\n        printf(\"Enter the distance between the centers: \");\r\n        scanf(\"%lf\", &d);\r\n        printf(\"The length of the direct common tangent is %.2lf\\n\",\r\n                (((d ** 2) - ((r1 - r2) ** 2)) ** (1 / 2)));\r\n        return 0;\r\n}", "37": NaN, "38": "#define PI 3.14159265\n\nint main(void)\n{\n        double d, h;\n        printf(\"Enter the diameter and height of the cylinder: \");\n        scanf(\"%lf %lf\", &d, &h);\n        printf(\"The radius of the circle is %lf\\n\",\n                ((d * d) / (8 * h) + h / 2));\n        return 0;\n}", "39": "int main()\r\n{\r\n        printf(\"The length of the direct common tangent is %f\\n\",\r\n                sqrt((pow(d, 2) - pow(r1 - r2, 2))));\r\n        return 0;\r\n}", "40": "int main()\n{\n    float x1, y1, x2, y2, r1, r2, distSq, dist;\n    printf(\"Enter the coordinates of the center of the first circle: \");\n    scanf(\"%f %f\", &x1, &y1);\n    printf(\"Enter the coordinates of the center of the second circle: \");\n    scanf(\"%f %f\", &x2, &y2);\n    printf(\"Enter the radius of the first circle: \");\n    scanf(\"%f\", &r1);\n    printf(\"Enter the radius of the second circle: \");\n    scanf(\"%f\", &r2);\n    distSq = (((x1 - x2)* (x1 - x2))+ ((y1 - y2)* (y1 - y2)))**(.5);\n    dist = distSq + r2;\n    if (distSq + r2 == r1)\n    {\n        printf(\"The smaller circle lies completely inside the bigger circle with touching each other at a point of circumference. \");\n    }\n    else if (distSq + r2 < r1)\n    {\n        printf(\"The smaller circle lies completely inside the bigger circle without touching each other at a point of circumference. \");\n    }\n    else\n    {\n        printf(\"The smaller does not lies inside the bigger circle completely. \");\n    }\n    return 0;\n}", "41": NaN, "42": NaN, "43": NaN, "44": "int countIntersections(int n) {\r\n    return n * (n - 1) / 2;\r\n}", "45": "float find_Centroid(float v[][2])\r\n{\r\n    float ans[2];\r\n    int n = sizeof(v)/sizeof(v[0]);\r\n    float signedArea = 0;\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        float x0 = v[i][0];\r\n        float y0 = v[i][1];\r\n        float x1 = v[(i + 1) % n][0];\r\n        float y1 =v[(i + 1) % n][1];\r\n        float A = (x0 * y1) - (x1 * y0);\r\n        signedArea += A;\r\n        ans[0] += (x0 + x1) * A;\r\n        ans[1] += (y0 + y1) * A;\r\n    }\r\n    signedArea *= 0.5;\r\n    ans[0] = (ans[0]) / (6 * signedArea);\r\n    ans[1] = (ans[1]) / (6 * signedArea);\r\n    return ans;\r\n}", "46": NaN, "47": "float circlearea(float R)\r\n{\r\n        if (R < 0)\r\n                return -1;\r\n        float a = (3.14 * R * R) / 4;\r\n        return a;\r\n}", "48": "float area(float R)\r\n{\r\n    float base = 1.732 * R;\r\n    float height = (3 / 2) * R;\r\n    float area = ((1 / 2) * base * height);\r\n    return area;\r\n}", "49": "float area_of_circle(float m, float n)\r\n{\r\n    float square_of_radius = ( m * n ) / 4;\r\n    float area = ( 3.141 * square_of_radius );\r\n    return area;\r\n}"}}, "Java - C#": {"id": {"0": 9129, "1": 9119, "2": 9114, "3": 9113, "4": 9079, "5": 9070, "6": 9035, "7": 9021, "8": 9015, "9": 9012, "10": 9009, "11": 9007, "12": 8939, "13": 8907, "14": 8858, "15": 8855, "16": 8840, "17": 8823, "18": 8795, "19": 8788, "20": 8787, "21": 8705, "22": 8702, "23": 8636, "24": 8615, "25": 8577, "26": 8539, "27": 8538, "28": 8528, "29": 8527, "30": 8506, "31": 8501, "32": 8490, "33": 8460, "34": 8439, "35": 8396, "36": 8374, "37": 8367, "38": 8366, "39": 8317, "40": 8316, "41": 8315, "42": 8310, "43": 8304, "44": 8301, "45": 8296, "46": 8281, "47": 8241, "48": 8213, "49": 8184}, "Java": {"0": "static double area(int R) {\n                double base = 1.732 * R;\n                double height = (1.5) * R;\n                double area = 0.5 * base * height;\n                return area;\n        }", "1": "static double area_of_circle(int m, int n) \n        { \n                int square_of_radius = ( m * n ) / 4; \n                double area = ( 3.141 * square_of_radius ); \n                return area; \n        }", "2": "static int Icosihenagonal_num(int n)\n{\n        return (19 * n * n - 17 * n) / 2;\n}", "3": "static int Icositetragonal_num(int n)\n{\n        return (22 * n * n - 20 * n) / 2;\n}", "4": "static int maxPointOfIntersection(int x, int y)\n{\n        int k = y * (y - 1) / 2;\n        k = k + x * (2 * y + x - 1);\n        return k;\n}\n", "5": "static int areaOfSquare(int S)\n{\n        int area = S * S;\n        return area;\n}", "6": "static void findHeight(float p1, float p2, float b, float c)\n{\n        float a = Math.max(p1, p2) - Math.min(p1, p2);\n        float s = (a + b + c) / 2;\n        float area = (int)Math.sqrt(s * (s - a)\n                                        * (s - b) * (s - c));\n        float height = (area * 2) / a;\n        System.out.print(\"Height is: \" + height);\n}", "7": "static float distance(int m, int n, int p, int q)\n{\n        return (float)Math.sqrt(Math.pow(n - m, 2) +\n                                                        Math.pow(q - p, 2) * 1.0);\n}\nstatic void Excenters(int x1, int y1, int x2, int y2, int x3, int y3)\n{\n        float a = distance(x2, x3, y2, y3);\n        float b = distance(x3, x1, y3, y1);\n        float c = distance(x1, x2, y1, y2);\n        pair[] excenter = new pair[4];\n        excenter[1] = new pair((-(a * x1) + (b * x2) +\n                                                        (c * x3)) / (-a + b + c),\n                                                (-(a * y1) + (b * y2) +\n                                                        (c * y3)) / (-a + b + c));\n        excenter[2] = new pair(((a * x1) - (b * x2) +\n                                                        (c * x3)) / (a - b + c),\n                                                ((a * y1) - (b * y2) +\n                                                        (c * y3)) / (a - b + c));\n        excenter[3] = new pair(((a * x1) + (b * x2) -\n                                                        (c * x3)) / (a + b - c),\n                                                ((a * y1) + (b * y2) -\n                                                        (c * y3)) / (a + b - c));\n        for(int i = 1; i <= 3; i++)\n        {\n                System.out.println((int)excenter[i].first + \" \" +\n                                                (int)excenter[i].second);\n        }\n}", "8": "static void triangleArea(int a, int b)\n{\n        double ratio = (double)b / a;\n        System.out.println(ratio);\n}", "9": "static float calculateArea(float A, float B, float C, float D)\n{\n        float S = (A + B + C + D) / 2;\n        float area = (float)Math.sqrt((S - A) * (S - B) *\n                                                                (S - C) * (S - D));\n        return area;\n}", "10": "static double eccHyperbola(double A, double B)\n{\n        double r = (double)B * B / A * A;\n        r += 1;\n        return Math.sqrt(r);\n}\n", "11": "static boolean check(circle C[])\n{\n        double C1C2 = Math.sqrt(\n                (C[1].x - C[0].x) * (C[1].x - C[0].x) +\n                (C[1].y - C[0].y) * (C[1].y - C[0].y));\n        boolean flag = false;\n        if (C1C2 < (C[0].r + C[1].r))\n        {\n                if ((C[0].x + C[1].x) == 2 * C[2].x &&\n                        (C[0].y + C[1].y) == 2 * C[2].y)\n                {\n                        flag = true;\n                }\n        }\n        return flag;\n}\nstatic boolean IsFairTriplet(circle c[])\n{\n        boolean f = false;\n        f |= check(c);\n        for(int i = 0; i < 2; i++)\n        {\n                swap(c[0], c[2]);\n                f |= check(c);\n        }\n        return f;\n}\nstatic void swap(circle circle1, circle circle2)\n{\n        circle temp = circle1;\n        circle1 = circle2;\n        circle2 = temp;\n}", "12": "static int power(int x, int y, int p)\n        {\n                int res = 1;\n                x = x % p;\n                while (y > 0)\n                {\n                        if (y % 2 == 1)\n                                res = (res * x) % p;\n                        y = y >> 1;\n                        x = (x * x) % p;\n                }\n                return res;\n        }\nstatic int findModuloByM(int X, int N, int M)\n        {\n                if (N < 6)\n                {\n                        String temp=\"\";\n                        for(int i = 0; i< N ; i++)\n                                temp = temp + (char)(X + 48);\n                        int res = Integer.parseInt(temp) % M;\n                        return res;\n                }\n                if (N % 2 == 0)\n                {\n                        int half = findModuloByM(X, N / 2, M) % M;\n                        int res = (half * power(10, N / 2, M) + half)\n                                        % M;\n                        return res;\n                }\n                else\n                {\n                        int half = findModuloByM(X, N / 2, M) % M;\n                        int res = (half * power(10, N / 2 + 1, M) + half * 10 + X)\n                                        % M;\n                        return res;\n                }\n        }", "13": "static int numPairs(int a[], int n)\n{\n        int ans, i, index;\n        ans = 0;\n        for (i = 0; i < n; i++)\n                a[i] = Math.abs(a[i]);\n        Arrays.sort(a);\n        for (i = 0; i < n; i++)\n        {\n                index = 2;\n                ans += index - i - 1;\n        }\n        return ans;\n}", "14": "static void dfs(int i, int j, int[][] grid, boolean[][] vis, int z, int z_count)\n {\n        int n = grid.length, m = grid[0].length;\n        vis[i][j] = true;\n        if (grid[i][j] == 0)\n        z++;\n        if (grid[i][j] == 2)\n        {\n        if (z == z_count)\n                ans++;\n        vis[i][j] = false;\n        return;\n        }\n        if (i >= 1 && !vis[i - 1][j] && grid[i - 1][j] != -1)\n        dfs(i - 1, j, grid, vis, z, z_count);\n        if (i < n - 1 && !vis[i + 1][j] && grid[i + 1][j] != -1)\n        dfs(i + 1, j, grid, vis, z, z_count);\n        if (j >= 1 && !vis[i][j - 1] && grid[i][j - 1] != -1)\n        dfs(i, j - 1, grid, vis, z, z_count);\n        if (j < m - 1 && !vis[i][j + 1] && grid[i][j + 1] != -1)\n        dfs(i, j + 1, grid, vis, z, z_count);\n        vis[i][j] = false;\n }\nstatic int uniquePaths(int[][] grid)\n {\n        int n = grid.length, m = grid[0].length;\n        boolean[][] vis = new boolean[n][m];\n        for (int i = 0; i < n; i++)\n        {\n        Arrays.fill(vis[i], false);\n        }\n        int x = 0, y = 0;\n        for (int i = 0; i < n; ++i)\n        {\n        for (int j = 0; j < m; ++j)\n        {\n                if (grid[i][j] == 0)\n                z_count++;\n                else if (grid[i][j] == 1)\n                {\n                x = i;\n                y = j;\n                }\n        }\n        }\n        dfs(x, y, grid, vis, 0, z_count);\n        return ans;\n }", "15": "static void dfs(int u, int count)\n{\n        visited[u] = true;\n        int temp = 0;\n        for (int i = 0; i < adjacent.get(u).size(); i++)\n        {\n                if (!visited[adjacent.get(u).get(i)])\n                {\n                        temp++;\n                        dfs(adjacent.get(u).get(i), count + 1);\n                }\n        }\n        if (temp == 0)\n        {\n                if (maxi < count)\n                {\n                        maxi = count;\n                        startnode = u;\n                }\n        }\n}\nstatic void dfs1(int u, int count)\n{\n        visited[u] = true;\n        int temp = 0;\n        for (int i = 0; i < adjacent.get(u).size(); i++)\n        {\n                if (!visited[adjacent.get(u).get(i)])\n                {\n                        temp++;\n                        parent[adjacent.get(u).get(i)] = u;\n                        dfs1(adjacent.get(u).get(i), count + 1);\n                }\n        }\n        if (temp == 0)\n        {\n                if (maxi < count)\n                {\n                        maxi = count;\n                        endnode = u;\n                }\n        }\n}\nstatic void dfs2(int u, int count)\n{\n        visited[u] = true;\n        int temp = 0;\n        for (int i = 0; i < adjacent.get(u).size(); i++)\n        {\n                if (!visited[adjacent.get(u).get(i)] &&\n                        !vis[adjacent.get(u).get(i)])\n                {\n                        temp++;\n                        dfs2(adjacent.get(u).get(i), count + 1);\n                }\n        }\n        if (temp == 0)\n        {\n                if (maxi < count)\n                {\n                        maxi = count;\n                        thirdnode = u;\n                }\n        }\n}\nstatic void findNodes()\n{\n        dfs(1, 0);\n        for (int i = 0; i <= N; i++)\n                visited[i] = false;\n        maxi = -1;\n        dfs1(startnode, 0);\n        for (int i = 0; i <= N; i++)\n                visited[i] = false;\n        int x = endnode;\n        vis[startnode] = true;\n        while (x != startnode)\n        {\n                vis[x] = true;\n                x = parent[x];\n        }\n        maxi = -1;\n        for (int i = 1; i <= N; i++)\n        {\n                if (vis[i])\n                        dfs2(i, 0);\n        }\n}\n", "16": "static void parity(List<Integer> even, List<Integer> odd, List<Integer> v, int i) \n        { \n                if (i == v.size() || even.size() == 0 && \n                        odd.size() == 0) \n                {\n                        int count = 0; \n                        for(int j = 0; j < v.size() - 1; j++)\n                        {\n                                if (v.get(j) % 2 != v.get(j + 1) % 2) \n                                        count++; \n                        } \n                        if (count < min) \n                                min = count; \n                        return; \n                } \n                if (v.get(i) != -1) \n                        parity(even, odd, v, i + 1); \n                else\n                {\n                        if (even.size() != 0)\n                        { \n                                int x = even.get(even.size() - 1); \n                                even.remove(even.size() - 1); \n                                v.set(i,x); \n                                parity(even, odd, v, i + 1); \n                                even.add(x); \n                        } \n                        if (odd.size() != 0)\n                        { \n                                int x = odd.get(odd.size() - 1); \n                                odd.remove(odd.size() - 1); \n                                v.set(i, x); \n                                parity(even, odd, v, i + 1); \n                                odd.add(x); \n                        } \n                } \n        }\nstatic void minDiffParity(List<Integer> v, int n) \n        { \n                List<Integer> even = new ArrayList<Integer>(); \n                List<Integer> odd = new ArrayList<Integer>(); \n                HashMap<Integer, Integer> m = new HashMap<>(); \n                for(int i = 1; i <= n; i++)\n                {\n                        if (m.containsKey(i))\n                        {\n                                m.replace(i, 1);\n                        }\n                        else\n                        {\n                                m.put(i, 1);\n                        }\n                }\n                for(int i = 0; i < v.size(); i++)\n                { \n                        if (v.get(i) != -1) \n                                m.remove(v.get(i)); \n                } \n                for (Map.Entry<Integer, Integer> i : m.entrySet()) \n                {\n                        if (i.getKey() % 2 == 0) \n                        {\n                                even.add(i.getKey()); \n                        }\n                        else\n                        {\n                                odd.add(i.getKey());\n                        }\n                }\n                min = 1000;\n                parity(even, odd, v, 0); \n                System.out.println(min); \n        }\n", "17": "public static double getProbability(int[] balls)\n        {\n                factorial(10);\n                box2 = balls.length;\n                int K = 0;\n                for (int i = 0; i < balls.length; i++)\n                        K += balls[i];\n                if (K % 2 == 1)\n                        return 0;\n                long all = comb(K, K / 2);\n                long validPermutations = validPermutations(K / 2, balls, 0, 0);\n                return (double)validPermutations / all;\n        }\nstatic long validPermutations(int n, int[] balls, int usedBalls, int i)\n        {\n                if (usedBalls == n) {\n                        return box1 == box2 ? 1 : 0;\n                }\n                if (i >= balls.length)\n                        return 0;\n                long res = validPermutations(n, balls, usedBalls, i + 1);\n                box1++;\n                for (int j = 1; j <= balls[i]; j++) {\n                        if (j == balls[i])\n                                box2--;\n                        long combinations = comb(balls[i], j);\n                        res += combinations * validPermutations(n, balls, usedBalls + j, i + 1);\n                }\n                box1--;\n                box2++;\n                return res;\n        }\nstatic void factorial(int N)\n        {\n                fact[0] = 1;\n                for (int i = 1; i <= N; i++)\n                        fact[i] = fact[i - 1] * i;\n        }\nstatic long comb(int n, int r)\n        {\n                long res = fact[n] / fact[r];\n                res /= fact[n - r];\n                return res;\n        }", "18": "void reverse(String str)\n        {\n                if ((str==null)||(str.length() <= 1))\n                System.out.println(str);\n                else\n                {\n                        System.out.print(str.charAt(str.length()-1));\n                        reverse(str.substring(0,str.length()-1));\n                }\n        }", "19": "public static String[] RevString(String[] s, int l)\n{\n        if (l % 2 == 0)\n        {\n                int j = l / 2;\n                while (j <= l - 1)\n                {\n                        String temp;\n                        temp = s[l - j - 1];\n                        s[l - j - 1] = s[j];\n                        s[j] = temp;\n                        j += 1;\n                }\n        }\n        else\n        {\n                int j = (l / 2) + 1;\n                while (j <= l - 1)\n                {\n                        String temp;\n                        temp = s[l - j - 1];\n                        s[l - j - 1] = s[j];\n                        s[j] = temp;\n                        j += 1;\n                }\n        }\n        return s;\n}", "20": NaN, "21": "static boolean isPalindrome(String str)\n{\n        int l = 0;\n        int h = str.length() - 1;\n        while (h > l)\n                if (str.charAt(l++) != str.charAt(h--))\n                        return false;\n        return true;\n}\nstatic int minRemovals(String str)\n{\n        if (str.charAt(0) == '')\n                return 0;\n        if (isPalindrome(str))\n                return 1;\n        return 2;\n}", "22": "static int countTriplets(int []A)\n{\n        int cnt = 0;\n        HashMap<Integer,Integer> tuples = new HashMap<Integer,Integer>();\n        for (int a : A)\n                for (int b : A)\n                {\n                        if(tuples.containsKey(a & b))\n                                tuples.put(a & b, tuples.get(a & b) + 1);\n                        else\n                                tuples.put(a & b, 1);\n                }\n        for (int a : A)\n                for (Map.Entry<Integer, Integer> t : tuples.entrySet())\n                        if ((t.getKey() & a) == 0)\n                                cnt += t.getValue();\n        return cnt;\n}", "23": "public static String toString(char[] a) {\n                String string = new String(a);\n                return string;\n        }\nstatic void generate(int k, char[] ch, int n) {\n                if (n == k) {\n                        System.out.print(toString(ch)+\" \");\n                        return;\n                }\n                if (ch[n - 1] == '0') {\n                        ch[n] = '0';\n                        generate(k, ch, n + 1);\n                        ch[n] = '1';\n                        generate(k, ch, n + 1);\n                }\n                if (ch[n - 1] == '1') {\n                        ch[n] = '0';\n                        generate(k, ch, n + 1);\n                }\n        }\nstatic void fun(int k) {\n                if (k <= 0) {\n                        return;\n                }\n                char[] ch = new char[k];\n                ch[0] = '0';\n                generate(k, ch, 1);\n                ch[0] = '1';\n                generate(k, ch, 1);\n        }", "24": "static String maximumPalinUsingKChanges(String str, int k)\n {\n        char palin[] = str.toCharArray();\n        String ans = \"\";\n        int l = 0;\n        int r = str.length() - 1;\n        while (l < r) {\n        if (str.charAt(l) != str.charAt(r)) {\n                palin[l] = palin[r] = (char)Math.max(\n                str.charAt(l), str.charAt(r));\n                k--;\n        }\n        l++;\n        r--;\n        }\n        if (k < 0) {\n        return \"Not possible\";\n        }\n        l = 0;\n        r = str.length() - 1;\n        while (l <= r) {\n        if (l == r) {\n                if (k > 0) {\n                palin[l] = '9';\n                }\n        }\n        if (palin[l] < '9') {\n                if (k >= 2 && palin[l] == str.charAt(l)\n                        && palin[r] == str.charAt(r)) {\n                k -= 2;\n                palin[l] = palin[r] = '9';\n                }\n                else if (k >= 1\n                                && (palin[l] != str.charAt(l)\n                                        || palin[r]\n                                        != str.charAt(r))) {\n                k--;\n                palin[l] = palin[r] = '9';\n                }\n        }\n        l++;\n        r--;\n        }\n        for (int i = 0; i < palin.length; i++)\n        ans += palin[i];\n        return ans;\n }", "25": "static char largest_alphabet(String a, int n)\n        {\n                char max = 'A';\n                for (int i=0; i<n; i++) \n                        if (a.charAt(i) > max)\n                                max = a.charAt(i); \n                return max;\n        }\nstatic char smallest_alphabet(String a, int n)\n        {\n                char min = 'z';\n                for (int i=0; i<n-1; i++) \n                        if (a.charAt(i) < min)\n                                min = a.charAt(i); \n                return min;\n        }", "26": "public static String processWords(String input)\n {\n                String s[] = input.split(\"(\\\\s)+\");\n                for(String values : s)\n                {\n                        charBuffer.append(values.charAt(0));\n                }\n        return charBuffer.toString();\n }", "27": "static String firstLetterWord(String str)\n        {\n                String result = \"\";\n                boolean v = true;\n                for (int i = 0; i < str.length(); i++)\n                {\n                        if (str.charAt(i) == ' ')\n                        {\n                                v = true;\n                        }\n                        else if (str.charAt(i) != ' ' && v == true)\n                        {\n                                result += (str.charAt(i));\n                                v = false;\n                        }\n                }\n                return result;\n        }", "28": "static boolean isVowel(char c) {\n                return (c == 'a' c == 'A' c == 'e' c == 'E' c == 'i' c == 'I' c == 'o' c == 'O' c == 'u' c == 'U');\n        }\nstatic String reverseVowel(String str) {\n        int i = 0;\n        int j = str.length()-1;\n        char[] str1 = str.toCharArray();\n        while (i < j)\n        {\n                if (!isVowel(str1[i]))\n                {\n                        i++;\n                        continue;\n                }\n                if (!isVowel(str1[j]))\n                {\n                        j--;\n                        continue;\n                }\n                char t = str1[i];\n                str1[i]= str1[j];\n                str1[j]= t;\n                i++;\n                j--;\n        }\n        String str2 = String.copyValueOf(str1);\n        return str2;\n}", "29": "static boolean isVowel(char c) {\n                return (c == 'a' c == 'A' c == 'e' c == 'E' c == 'i' c == 'I' c == 'o' c == 'O' c == 'u' c == 'U');\n        }\nstatic String reverseVowel(String str1) {\n                int j = 0;\n                char[] str = str1.toCharArray();\n                String vowel = \"\";\n                for (int i = 0; i < str.length; i++) {\n                        if (isVowel(str[i])) {\n                                j++;\n                                vowel += str[i];\n                        }\n                }\n                for (int i = 0; i < str.length; i++) {\n                        if (isVowel(str[i])) {\n                                str[i] = vowel.charAt(--j);\n                        }\n                }\n                return String.valueOf(str);\n        }\n", "30": "static void printString(String str, char ch, int count)\n        {\n                int occ = 0, i;\n                if (count == 0) {\n                        System.out.println(str);\n                        return;\n                }\n                for (i = 0; i < str.length(); i++) {\n                        if (str.charAt(i) == ch)\n                                occ++;\n                        if (occ == count)\n                                break;\n                }\n                if (i < str.length() - 1)\n                        System.out.println(str.substring(i + 1));\n                else\n                        System.out.println(\"Empty string\");\n        }", "31": "static boolean isNumber(String s)\n        {\n                for (int i = 0; i < s.length(); i++)\n                        if (Character.isDigit(s.charAt(i)) == false)\n                                return false;\n                return true;\n        }", "32": "static void permute(String input)\n        {\n                int n = input.length();\n                int max = 1 << n;\n                input = input.toLowerCase();\n                for(int i = 0;i < max; i++)\n                {\n                        char combination[] = input.toCharArray();\n                        for(int j = 0; j < n; j++)\n                        {\n                                if(((i >> j) & 1) == 1)\n                                        combination[j] = (char) (combination[j]-32);\n                        }\n                        System.out.print(combination);\n                        System.out.print(\" \");\n                }\n        }", "33": "static boolean canFormPalindrome(String str)\n        {\n                int[] count = new int[NO_OF_CHARS];\n                for (int i = 0; i < str.length(); i++)\n                        count[str.charAt(i)]++;\n                int odd = 0;\n                for (int i = 0; i < NO_OF_CHARS; i++) {\n                        if ((count[i] & 1) != 0)\n                                odd++;\n                        if (odd > 1)\n                                return false;\n                }\n                return true;\n        }\n", "34": "static void printInitials(String name)\n        {\n                if (name.length() == 0)\n                        return;\n                String words[] = name.split(\" \");\n                for(String word : words) {\n                        System.out.print(Character.toUpperCase(word.charAt(0)) + \" \");\n                }\n        }", "35": "static boolean isValidISBN(String isbn)\n        {\n                int n = isbn.length();\n                if (n != 10)\n                        return false;\n                int sum = 0;\n                for (int i = 0; i < 9; i++)\n                {\n                        int digit = isbn.charAt(i) - '0';\n                        if (0 > digit 9 < digit)\n                                return false;\n                        sum += (digit * (10 - i));\n                }\n                char last = isbn.charAt(9);\n                if (last != 'X' && (last < '0' last > '9'))\n                        return false;\n                sum += ((last == 'X') ? 10 : (last - '0'));\n                return (sum % 11 == 0);\n        }", "36": "static int countOccurrences(String str, String word)\n{\n        String a[] = str.split(\" \");\n        int count = 0;\n        for (int i = 0; i < a.length; i++)\n        {\n        if (word.equals(a[i]))\n                count++;\n        }\n        return count;\n}", "37": "static boolean isVowel(char c)\n        {\n                return (c == 'a' c == 'e' c == 'i' c == 'o' c == 'u');\n        }\nstatic String encryptString(char[] s, int n, int k)\n        {\n                int[] cv = new int[n];\n                int[] cc = new int[n];\n                if (isVowel(s[0]))\n                        cv[0] = 1;\n                else\n                        cc[0] = 1;\n                for (int i = 1; i < n; i++)\n                {\n                        cv[i] = cv[i - 1] + (isVowel(s[i]) == true ? 1 : 0);\n                        cc[i] = cc[i - 1] + (isVowel(s[i]) == true ? 0 : 1);\n                }\n                String ans = \"\";\n                int prod = 0;\n                prod = cc[k - 1] * cv[k - 1];\n                ans += String.valueOf(prod);\n                for (int i = k; i < s.length; i++)\n                {\n                        prod = (cc[i] - cc[i - k]) *\n                                (cv[i] - cv[i - k]);\n                        ans += String.valueOf(prod);\n                }\n                return ans;\n        }", "38": "static boolean isVowel(char c) {\n                return (c == 'a' c == 'e' c == 'i' c == 'o' c == 'u');\n        }\nstatic String encryptString(String s, int n, int k) {\n                int countVowels = 0;\n                int countConsonants = 0;\n                String ans = \"\";\n                for (int l = 0; l <= n - k; l++) {\n                        countVowels = 0;\n                        countConsonants = 0;\n                        for (int r = l; r <= l + k - 1; r++) {\n                                if (isVowel(s.charAt(r)) == true) {\n                                        countVowels++;\n                                } else {\n                                        countConsonants++;\n                                }\n                        }\n                        ans += String.valueOf(countVowels * countConsonants);\n                }\n                return ans;\n        }", "39": "public static String change_case(String a)\n        {\n                String temp = \"\";\n                int l = a.length();\n                for(int i = 0 ; i < l ; i++)\n                {\n                        char ch=a.charAt(i);\n                        if(ch >= 'a' &&ch <= 'z')\n                        ch = (char)(65 + (int)(ch - 'a'));\n                        else if(ch >= 'A' &&ch <= 'Z')\n                        ch = (char)(97 +\n                                (int)(ch - 'A'));\n                        temp += ch;\n                }\n                return temp;\n        }\npublic static String delete_vowels(String a)\n        {\n                String temp = \"\";\n                int l = a.length();\n                for(int i = 0 ; i < l ; i++)\n                {\n                        char ch = a.charAt(i);\n                        if(ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' && ch != 'A' && ch != 'E' && ch != 'O' && ch != 'U'&&ch != 'I')\n                                temp += ch;\n                }\n                return temp;\n        }\npublic static String insert_hash(String a)\n        {\n                String temp = \"\";\n                int l = a.length();\n                char hash = '#';\n                for(int i = 0 ; i < l ; i++)\n                {\n                        char ch=a.charAt(i);\n                        if((ch >= 'a' && ch <= 'z') ||\n                        (ch >= 'A' && ch <= 'Z'))\n                                temp = temp + hash + ch;\n                        else\n                                temp = temp + ch;\n                }\n                return temp;\n        }\npublic static void transformString(String a)\n        {\n                String b = delete_vowels(a);\n                String c = change_case(b);\n                String d = insert_hash(c);\n                System.out.println(d);\n        }\n", "40": "static String convert(String s)\n        {\n                int n = s.length();\n                String s1 = \"\";\n                s1 = s1 + Character.toLowerCase(s.charAt(0));\n                for (int i = 1; i < n; i++)\n                {\n                        if (s.charAt(i) == ' ' && i < n)\n                        {\n                                s1 = s1 + \" \" + Character.toLowerCase\n                                                                (s.charAt(i + 1));\n                                i++;\n                        }\n                        else\n                        s1= s1 + Character.toUpperCase(s.charAt(i));\n                }\n                return s1;\n        }", "41": "static String convert(String str)\n        {\n                String w = \"\", z = \"\";\n                str = str.toUpperCase() + \" \";\n                for (int i = 0; i < str.length(); i++)\n                {\n                        char ch = str.charAt(i);\n                        if (ch != ' ')\n                                w = w + ch;\n                        else {\n                                z = z + (Character.toLowerCase(w.charAt(0))) +\n                                                w.substring(1) + \" \";\n                                w = \"\";\n                        }\n                }\n                return z;\n        }", "42": "static void findDuplciates(String []a, int n, int m)\n        {\n                boolean [][]isPresent = new boolean[n] [m];\n                for (int i = 0; i < n; i++)\n                {\n                        for (int j = 0; j < m; j++)\n                        {\n                                isPresent[i][j]=false;\n                        }\n                }\n                for (int i = 0; i < n; i++)\n                {\n                        for (int j = 0; j < m; j++)\n                        {\n                                for (int k = 0; k < n; k++)\n                                {\n                                        if (a[i].charAt(j)== a[k].charAt(j) && i != k)\n                                        {\n                                                isPresent[i][j] = true;\n                                                isPresent[k][j] = true;\n                                        }\n                                }\n                                for (int k = 0; k < m; k++)\n                                {\n                                        if (a[i].charAt(j)== a[i].charAt(k) && j != k)\n                                        {\n                                                isPresent[i][j] = true;\n                                                isPresent[i][k] = true;\n                                        }\n                                }\n                        }\n                }\n                for (int i = 0; i < n; i++)\n                        for (int j = 0; j < m; j++)\n                                if (isPresent[i][j]==false)\n                                        System.out.print(a[i].charAt(j));\n        }", "43": "static void findSubsequence(String str, int k)\n        {\n                int a[] = new int[MAX_CHAR];\n                for (int i = 0; i < str.length(); i++)\n                        a[str.charAt(i) - 'a']++;\n                for (int i = 0; i < str.length(); i++)\n                        if (a[str.charAt(i) - 'a'] >= k)\n                                System.out.print(str.charAt(i));\n        }", "44": "static int findSubSequence(String s, int num)\n        {\n                int res = 0;\n                int i = 0;\n                while (num > 0) {\n                        if ((num & 1) == 1)\n                                res += s.charAt(i) - '0';\n                        i++;\n                        num = num >> 1;\n                }\n                return res;\n        }\nstatic int combinedSum(String s)\n        {\n                int n = s.length();\n                int c_sum = 0;\n                int range = (1 << n) - 1;\n                for (int i = 0; i <= range; i++)\n                        c_sum += findSubSequence(s, i);\n                return c_sum;\n        }", "45": "static boolean isPalindrome(String str)\n        {\n                int i = 0, j = str.length() - 1;\n                while (i < j)\n                {\n                        if (str.charAt(i++) != str.charAt(j--))\n                        return false;\n                }\n                return true;\n        }\nstatic String removePalinWords(String str)\n        {\n                String final_str = \"\", word = \"\";\n                str = str + \" \";\n                int n = str.length();\n                for (int i = 0; i < n; i++)\n                {\n                        if (str.charAt(i) != ' ')\n                        word = word + str.charAt(i);\n                        else\n                        {\n                                if (!(isPalindrome(word)))\n                                        final_str += word + \" \";\n                                word = \"\";\n                        }\n                }\n                return final_str;\n        }", "46": "static int productAtKthLevel(String tree, int k)\n        {\n                int level = -1;\n                int product = 1;\n                int n = tree.length();\n                for (int i = 0; i < n; i++)\n                {\n                        if (tree.charAt(i) == '(')\n                                level++;\n                        else if (tree.charAt(i) == ')')\n                                level--;\n                        else\n                        {\n                                if (level == k)\n                                        product *= (tree.charAt(i) - '0');\n                        }\n                }\n                return product;\n        }", "47": "static boolean isDivisible(String str, int k)\n        {\n                int n = str.length();\n                int c = 0;\n                for (int i = 0; i < k; i++)\n                        if (str.charAt(n - i - 1) == '0')                \n                                c++;\n                return (c == k);\n        }", "48": "static boolean check(String s, int m)\n{\n        int l = s.length();\n        int c1 = 0;\n        int c2 = 0;\n        for (int i = 0; i < l; i++)\n        {\n                if (s.charAt(i) == '0')\n                {\n                        c2 = 0;\n                        c1++;\n                }\n                else\n                {\n                        c1 = 0;\n                        c2++;\n                }\n                if (c1 == m c2 == m)\n                        return true;\n        }\n        return false;\n}", "49": "static int __builtin_popcount(int n)\n        {\n                int count = 0;\n                while (n > 0) {\n                        count += n & 1;\n                        n >>= 1;\n                }\n                return count;\n        }\nstatic void countEvenOdd(int arr[], int n, int K)\n        {\n                int even = 0, odd = 0;\n                for (int i = 0; i < n; i++) {\n                        int x = __builtin_popcount(arr[i]);\n                        if (x % 2 == 0)\n                                even++;\n                        else\n                                odd++;\n                }\n                int y;\n                y = __builtin_popcount(K);\n                if ((y & 1) != 0) {\n                        System.out.println(\"Even = \"+ odd + \", Odd = \" + even);\n                }\n                else {\n                        System.out.println(\"Even = \" + even + \", Odd = \" + odd);\n                }\n        }"}, "C#": {"0": "static double area(int R) {\n                double base = 1.732 * R;\n                double height = (1.5) * R;\n                double area = 0.5 * base * height;\n                return area;\n        }", "1": "static double area_of_circle(int m, int n) \n        { \n                int square_of_radius = ( m * n ) / 4; \n                double area = ( 3.141 * square_of_radius ); \n                return area; \n        }", "2": "static int Icosihenagonal_num(int n)\n{\n        return (19 * n * n - 17 * n) / 2;\n}", "3": "static int Icositetragonal_num(int n)\n{\n        return (22 * n * n - 20 * n) / 2;\n}", "4": "static int maxPointOfIntersection(int x, int y)\r\n{\r\n        int k = y * (y - 1) / 2;\r\n        k = k + x * (2 * y + x - 1);\r\n        return k;\r\n}", "5": "static int areaOfSquare(int S)\r\n{\r\n        int area = S * S;\r\n        return area;\r\n}", "6": "static void findHeight(float p1, float p2, float b, float c)\n{\n        float a = Math.Max(p1, p2) - Math.Min(p1, p2);\n        float s = (a + b + c) / 2;\n        float area = (int)Math.Sqrt(s * (s - a)\n                                        * (s - b) * (s - c));\n        float height = (area * 2) / a;\n        Console.WriteLine(\"Height is: \" + height);\n}", "7": "static float distance(int m, int n, int p, int q)\r\n{\r\n        return (float)Math.Sqrt(Math.Pow(n - m, 2) +\r\n                                                        Math.Pow(q - p, 2) * 1.0);\r\n}\r\nstatic void Excenters(int x1, int y1, int x2, int y2, int x3, int y3)\r\n{\r\n        float a = distance(x2, x3, y2, y3);\r\n        float b = distance(x3, x1, y3, y1);\r\n        float c = distance(x1, x2, y1, y2);\r\n        pair[] excenter = new pair[4];\r\n        excenter[1] = new pair((-(a * x1) + (b * x2) +\r\n                                                        (c * x3)) / (-a + b + c),\r\n                                                (-(a * y1) + (b * y2) +\r\n                                                        (c * y3)) / (-a + b + c));\r\n        excenter[2] = new pair(((a * x1) - (b * x2) +\r\n                                                        (c * x3)) / (a - b + c),\r\n                                                ((a * y1) - (b * y2) +\r\n                                                        (c * y3)) / (a - b + c));\r\n        excenter[3] = new pair(((a * x1) + (b * x2) -\r\n                                                        (c * x3)) / (a + b - c),\r\n                                                ((a * y1) + (b * y2) -\r\n                                                        (c * y3)) / (a + b - c));\r\n        for(int i = 1; i <= 3; i++)\r\n        {\r\n                Console.WriteLine((int)excenter[i].first + \" \" +\r\n                                                (int)excenter[i].second);\r\n        }\r\n}", "8": "static void triangleArea(int a, int b)\r\n{\r\n        double ratio = (double)b / a;\r\n        Console.WriteLine(ratio);\r\n}", "9": "static float calculateArea(float A, float B, float C, float D)\r\n{\r\n        float S = (A + B + C + D) / 2;\r\n        float area = (float)Math.Sqrt((S - A) * (S - B) *\r\n                                                                (S - C) * (S - D));\r\n        return area;\r\n}", "10": "static double eccHyperbola(double A, double B)\r\n{\r\n        double r = (double)B * B / A * A;\r\n        r += 1;\r\n        return Math.Sqrt(r);\r\n}", "11": "static bool check(circle C[])\r\n{\r\n        double C1C2 = Math.Sqrt(\r\n                (C[1].x - C[0].x) * (C[1].x - C[0].x) +\r\n                (C[1].y - C[0].y) * (C[1].y - C[0].y));\r\n        bool flag = false;\r\n        if (C1C2 < (C[0].r + C[1].r))\r\n        {\r\n                if ((C[0].x + C[1].x) == 2 * C[2].x &&\r\n                        (C[0].y + C[1].y) == 2 * C[2].y)\r\n                {\r\n                        flag = true;\r\n                }\r\n        }\r\n        return flag;\r\n}\r\nstatic bool IsFairTriplet(circle c[])\r\n{\r\n        bool f = false;\r\n        f |= check(c);\r\n        for(int i = 0; i < 2; i++)\r\n        {\r\n                swap(c[0], c[2]);\r\n                f |= check(c);\r\n        }\r\n        return f;\r\n}\r\nstatic void swap(circle circle1, circle circle2)\r\n{\r\n        circle temp = circle1;\r\n        circle1 = circle2;\r\n        circle2 = temp;\r\n}", "12": "static int power(int x, int y, int p)\r\n        {\r\n                int res = 1;\r\n                x = x % p;\r\n                while (y > 0)\r\n                {\r\n                        if (y % 2 == 1)\r\n                                res = (res * x) % p;\r\n                        y = y >> 1;\r\n                        x = (x * x) % p;\r\n                }\r\n                return res;\r\n        }\r\nstatic int findModuloByM(int X, int N, int M)\r\n        {\r\n                if (N < 6)\r\n                {\r\n                        String temp=\"\";\r\n                        for(int i = 0; i< N ; i++)\r\n                                temp = temp + (char)(X + 48);\r\n                        int res = Convert.ToInt32(temp) % M;\r\n                        return res;\r\n                }\r\n                if (N % 2 == 0)\r\n                {\r\n                        int half = findModuloByM(X, N / 2, M) % M;\r\n                        int res = (half * power(10, N / 2, M) + half)\r\n                                        % M;\r\n                        return res;\r\n                }\r\n                else\r\n                {\r\n                        int half = findModuloByM(X, N / 2, M) % M;\r\n                        int res = (half * power(10, N / 2 + 1, M) + half * 10 + X)\r\n                                        % M;\r\n                        return res;\r\n                }\r\n        }", "13": "static int numPairs(int[] a, int n)\r\n{\r\n        int ans, i, index;\r\n        ans = 0;\r\n        for (i = 0; i < n; i++)\r\n                a[i] = Math.Abs(a[i]);\r\n        Array.Sort(a);\r\n        for (i = 0; i < n; i++)\r\n        {\r\n                index = 2;\r\n                ans += index - i - 1;\r\n        }\r\n        return ans;\r\n}", "14": "public class Solution {\r\n    public int UniquePaths(int[][] grid) {\r\n        int n = grid.Length, m = grid[0].Length;\r\n        bool[,] vis = new bool[n, m];\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            Array.Fill(vis[i], false);\r\n        }\r\n        int x = 0, y = 0;\r\n        for (int i = 0; i < n; ++i)\r\n        {\r\n            for (int j = 0; j < m; ++j)\r\n            {\r\n                if (grid[i][j] == 0)\r\n                z_count++;\r\n                else if (grid[i][j] == 1)\r\n                {\r\n                    x = i;\r\n                    y = j;\r\n                }\r\n            }\r\n        }\r\n        dfs(x, y, grid, vis, 0, z_count);\r\n        return ans;\r\n    }\r\n    static int ans = 0;\r\n    static int z_count = 0;\r\n    static void dfs(int i, int j, int[][] grid, bool[,] vis, int z, int z_count)\r\n    {\r\n        int n = grid.Length, m = grid[0].Length;\r\n        vis[i, j] = true;\r\n        if (grid[i][j] == 0)\r\n        z++;\r\n        if (grid[i][j] == 2)\r\n        {\r\n        if (z == z_count)\r\n                ans++;\r\n        vis[i, j] = false;\r\n        return;\r\n        }\r\n        if (i >= 1 && !vis[i - 1, j] && grid[i - 1][j] != -1)\r\n        dfs(i - 1, j, grid, vis, z, z_count);\r\n        if (i < n - 1 && !vis[i + 1, j] && grid[i + 1][j] != -1)\r\n        dfs(i + 1, j, grid, vis, z, z_count);\r\n        if (j >= 1 && !vis[i, j - 1] && grid[i][j - 1] != -1)\r\n        dfs(i, j - 1, grid, vis, z, z_count);\r\n        if (j < m - 1 && !vis[i, j + 1] && grid[i][j + 1] != -1)\r\n        dfs(i, j + 1, grid, vis, z, z_count);\r\n        vis[i, j] = false;\r\n    }\r\n}", "15": "static void dfs(int u, int count)\r\n{\r\n        visited[u] = true;\r\n        int temp = 0;\r\n        for (int i = 0; i < adjacent.get(u).size(); i++)\r\n        {\r\n                if (!visited[adjacent.get(u).get(i)])\r\n                {\r\n                        temp++;\r\n                        dfs(adjacent.get(u).get(i), count + 1);\r\n                }\r\n        }\r\n        if (temp == 0)\r\n        {\r\n                if (maxi < count)\r\n                {\r\n                        maxi = count;\r\n                        startnode = u;\r\n                }\r\n        }\r\n}\r\nstatic void dfs1(int u, int count)\r\n{\r\n        visited[u] = true;\r\n        int temp = 0;\r\n        for (int i = 0; i < adjacent.get(u).size(); i++)\r\n        {\r\n                if (!visited[adjacent.get(u).get(i)])\r\n                {\r\n                        temp++;\r\n                        parent[adjacent.get(u).get(i)] = u;\r\n                        dfs1(adjacent.get(u).get(i), count + 1);\r\n                }\r\n        }\r\n        if (temp == 0)\r\n        {\r\n                if (maxi < count)\r\n                {\r\n                        maxi = count;\r\n                        endnode = u;\r\n                }\r\n        }\r\n}\r\nstatic void dfs2(int u, int count)\r\n{\r\n        visited[u] = true;\r\n        int temp = 0;\r\n        for (int i = 0; i < adjacent.get(u).size(); i++)\r\n        {\r\n                if (!visited[adjacent.get(u).get(i)] &&\r\n                        !vis[adjacent.get(u).get(i)])\r\n                {\r\n                        temp++;\r\n                        dfs2(adjacent.get(u).get(i), count + 1);\r\n                }\r\n        }\r\n        if (temp == 0)\r\n        {\r\n                if (maxi < count)\r\n                {\r\n                        maxi = count;\r\n                        thirdnode = u;\r\n                }\r\n        }\r\n}\r\nstatic void findNodes()\r\n{\r\n        dfs(1, 0);\r\n        for (int i = 0; i <= N; i++)\r\n                visited[i] = false;\r\n        maxi = -1;\r\n        dfs1(startnode, 0);\r\n        for (int i = 0; i <= N; i++)\r\n                visited[i] = false;\r\n        int x = endnode;\r\n        vis[startnode] = true;\r\n        while (x != startnode)\r\n        {\r\n                vis[x] = true;\r\n                x = parent[x];\r\n        }\r\n        maxi = -1;\r\n        for (int i = 1; i <= N; i++)\r\n        {\r\n                if (vis[i])\r\n                        dfs2(i, 0);\r\n        }\r\n}", "16": "static void minDiffParity(List<int> v, int n)\r\n{\r\n    HashMap<int, int> m = new HashMap<int, int>();\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        if (m.ContainsKey(i))\r\n        {\r\n            m[i] = 1;\r\n        }\r\n        else\r\n        {\r\n            m.Add(i, 1);\r\n        }\r\n    }\r\n    for (int i = 0; i < v.Count; i++)\r\n    {\r\n        if (v[i] != -1)\r\n        {\r\n            m.Remove(v[i]);\r\n        }\r\n    }\r\n    List<int> even = new List<int>();\r\n    List<int> odd = new List<int>();\r\n    foreach (var i in m)\r\n    {\r\n        if (i.Key % 2 == 0)\r\n        {\r\n            even.Add(i.Key);\r\n        }\r\n        else\r\n        {\r\n            odd.Add(i.Key);\r\n        }\r\n    }\r\n    int min = 1000;\r\n    parity(even, odd, v, 0);\r\n    Console.WriteLine(min);\r\n}\r\nstatic void parity(List<int> even, List<int> odd, List<int> v, int i)\r\n{\r\n    if (i == v.Count || even.Count == 0 && odd.Count == 0)\r\n    {\r\n        int count = 0;\r\n        for (int j = 0; j < v.Count - 1; j++)\r\n        {\r\n            if (v[j] % 2 != v[j + 1] % 2)\r\n            {\r\n                count++;\r\n            }\r\n        }\r\n        if (count < min)\r\n        {\r\n            min = count;\r\n        }\r\n        return;\r\n    }\r\n    if (v[i] != -1)\r\n    {\r\n        parity(even, odd, v, i + 1);\r\n    }\r\n    else\r\n    {\r\n        if (even.Count != 0)\r\n        {\r\n            int x = even[even.Count - 1];\r\n            even.RemoveAt(even.Count - 1);\r\n            v[i] = x;\r\n            parity(even, odd, v, i + 1);\r\n            even.Add(x);\r\n        }\r\n        if (odd.Count != 0)\r\n        {\r\n            int x = odd[odd.Count - 1];\r\n            odd.RemoveAt(odd.Count - 1);\r\n            v[i] = x;\r\n            parity(even, odd, v, i + 1);\r\n            odd.Add(x);\r\n        }\r\n    }\r\n}", "17": "public static double getProbability(int[] balls)\r\n        {\r\n                factorial(10);\r\n                int K = 0;\r\n                for (int i = 0; i < balls.Length; i++)\r\n                        K += balls[i];\r\n                if (K % 2 == 1)\r\n                        return 0;\r\n                long all = comb(K, K / 2);\r\n                long validPermutations = validPermutations(K / 2, balls, 0, 0);\r\n                return (double)validPermutations / all;\r\n        }\r\nstatic long validPermutations(int n, int[] balls, int usedBalls, int i)\r\n        {\r\n                if (usedBalls == n) {\r\n                        return box1 == box2 ? 1 : 0;\r\n                }\r\n                if (i >= balls.Length)\r\n                        return 0;\r\n                long res = validPermutations(n, balls, usedBalls, i + 1);\r\n                box1++;\r\n                for (int j = 1; j <= balls[i]; j++) {\r\n                        if (j == balls[i])\r\n                                box2--;\r\n                        long combinations = comb(balls[i], j);\r\n                        res += combinations * validPermutations(n, balls, usedBalls + j, i + 1);\r\n                }\r\n                box1--;\r\n                box2++;\r\n                return res;\r\n        }\r\nstatic void factorial(int N)\r\n        {\r\n                fact[0] = 1;\r\n                for (int i = 1; i <= N; i++)\r\n                        fact[i] = fact[i - 1] * i;\r\n        }\r\nstatic long comb(int n, int r)\r\n        {\r\n                long res = fact[n] / fact[r];\r\n                res /= fact[n - r];\r\n                return res;\r\n        }", "18": "void reverse(string str)\r\n{\r\n    if ((str==null)||(str.Length <= 1))\r\n    {\r\n        Console.WriteLine(str);\r\n    }\r\n    else\r\n    {\r\n        Console.Write(str[str.Length-1]);\r\n        reverse(str.Substring(0,str.Length-1));\r\n    }\r\n}", "19": "public static string[] RevString(string[] s, int l)\r\n{\r\n        if (l % 2 == 0)\r\n        {\r\n                int j = l / 2;\r\n                while (j <= l - 1)\r\n                {\r\n                        string temp;\r\n                        temp = s[l - j - 1];\r\n                        s[l - j - 1] = s[j];\r\n                        s[j] = temp;\r\n                        j += 1;\r\n                }\r\n        }\r\n        else\r\n        {\r\n                int j = (l / 2) + 1;\r\n                while (j <= l - 1)\r\n                {\r\n                        string temp;\r\n                        temp = s[l - j - 1];\r\n                        s[l - j - 1] = s[j];\r\n                        s[j] = temp;\r\n                        j += 1;\r\n                }\r\n        }\r\n        return s;\r\n}", "20": NaN, "21": "static bool isPalindrome(string str)\r\n{\r\n        int l = 0;\r\n        int h = str.Length - 1;\r\n        while (h > l)\r\n                if (str[l++] != str[h--])\r\n                        return false;\r\n        return true;\r\n}\r\nstatic int minRemovals(string str)\r\n{\r\n        if (str[0] == '\\0')\r\n                return 0;\r\n        if (isPalindrome(str))\r\n                return 1;\r\n        return 2;\r\n}", "22": "static int countTriplets(int[] A)\r\n{\r\n        int cnt = 0;\r\n        Dictionary<int, int> tuples = new Dictionary<int, int>();\r\n        for (int a : A)\r\n                for (int b : A)\r\n                {\r\n                        if (tuples.ContainsKey(a & b))\r\n                                tuples[a & b] += 1;\r\n                        else\r\n                                tuples[a & b] = 1;\r\n                }\r\n        for (int a : A)\r\n                for (KeyValuePair<int, int> t in tuples)\r\n                        if ((t.Key & a) == 0)\r\n                                cnt += t.Value;\r\n        return cnt;\r\n}", "23": "static void generate(int k, char[] ch, int n) {\r\n                if (n == k) {\r\n                        Console.Write(toString(ch)+\" \");\r\n                        return;\r\n                }\r\n                if (ch[n - 1] == '0') {\r\n                        ch[n] = '0';\r\n                        generate(k, ch, n + 1);\r\n                        ch[n] = '1';\r\n                        generate(k, ch, n + 1);\r\n                }\r\n                if (ch[n - 1] == '1') {\r\n                        ch[n] = '0';\r\n                        generate(k, ch, n + 1);\r\n                }\r\n        }\r\nstatic void fun(int k) {\r\n                if (k <= 0) {\r\n                        return;\r\n                }\r\n                char[] ch = new char[k];\r\n                ch[0] = '0';\r\n                generate(k, ch, 1);\r\n                ch[0] = '1';\r\n                generate(k, ch, 1);\r\n        }", "24": "static string maximumPalinUsingKChanges(string str, int k)\r\n{\r\n    char[] palin = str.ToCharArray();\r\n    string ans = \"\";\r\n    int l = 0;\r\n    int r = str.Length - 1;\r\n    while (l < r)\r\n    {\r\n        if (str[l] != str[r])\r\n        {\r\n            palin[l] = palin[r] = (char)Math.Max(str[l], str[r]);\r\n            k--;\r\n        }\r\n        l++;\r\n        r--;\r\n    }\r\n    if (k < 0)\r\n    {\r\n        return \"Not possible\";\r\n    }\r\n    l = 0;\r\n    r = str.Length - 1;\r\n    while (l <= r)\r\n    {\r\n        if (l == r)\r\n        {\r\n            if (k > 0)\r\n            {\r\n                palin[l] = '9';\r\n            }\r\n        }\r\n        if (palin[l] < '9')\r\n        {\r\n            if (k >= 2 && palin[l] == str[l] && palin[r] == str[r])\r\n            {\r\n                k -= 2;\r\n                palin[l] = palin[r] = '9';\r\n            }\r\n            else if (k >= 1 && (palin[l] != str[l] || palin[r] != str[r]))\r\n            {\r\n                k--;\r\n                palin[l] = palin[r] = '9';\r\n            }\r\n        }\r\n        l++;\r\n        r--;\r\n    }\r\n    for (int i = 0; i < palin.Length; i++)\r\n    {\r\n        ans += palin[i];\r\n    }\r\n    return ans;\r\n}", "25": "static char largest_alphabet(string a, int n)\r\n        {\r\n                char max = 'A';\r\n                for (int i=0; i<n; i++) \r\n                        if (a[i] > max)\r\n                                max = a[i]; \r\n                return max;\r\n        }\r\nstatic char smallest_alphabet(string a, int n)\r\n        {\r\n                char min = 'z';\r\n                for (int i=0; i<n-1; i++) \r\n                        if (a[i] < min)\r\n                                min = a[i]; \r\n                return min;\r\n        }", "26": "public static string processWords(string input)\r\n{\r\n    string[] s = input.Split(' ');\r\n    for(string values in s)\r\n    {\r\n        charBuffer.Append(values.Substring(0,1));\r\n    }\r\n    return charBuffer.ToString();\r\n}", "27": "static string firstLetterWord(string str)\r\n        {\r\n                string result = \"\";\r\n                bool v = true;\r\n                for (int i = 0; i < str.Length; i++)\r\n                {\r\n                        if (str[i] == ' ')\r\n                        {\r\n                                v = true;\r\n                        }\r\n                        else if (str[i] != ' ' && v == true)\r\n                        {\r\n                                result += (str[i]);\r\n                                v = false;\r\n                        }\r\n                }\r\n                return result;\r\n        }", "28": "static bool isVowel(char c)\r\n{\r\n        return (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U');\r\n}\r\nstatic string reverseVowel(string str)\r\n{\r\n        int i = 0;\r\n        int j = str.Length-1;\r\n        char[] str1 = str.ToCharArray();\r\n        while (i < j)\r\n        {\r\n                if (!isVowel(str1[i]))\r\n                {\r\n                        i++;\r\n                        continue;\r\n                }\r\n                if (!isVowel(str1[j]))\r\n                {\r\n                        j--;\r\n                        continue;\r\n                }\r\n                char t = str1[i];\r\n                str1[i]= str1[j];\r\n                str1[j]= t;\r\n                i++;\r\n                j--;\r\n        }\r\n        string str2 = new string(str1);\r\n        return str2;\r\n}", "29": "static bool isVowel(char c) {\r\n                return (c == 'a' || c == 'A' || c == 'e' || c == 'E' || c == 'i' || c == 'I' || c == 'o' || c == 'O' || c == 'u' || c == 'U');\r\n        }\r\nstatic string reverseVowel(string str1) {\r\n                int j = 0;\r\n                char[] str = str1.ToCharArray();\r\n                string vowel = \"\";\r\n                for (int i = 0; i < str.Length; i++) {\r\n                        if (isVowel(str[i])) {\r\n                                j++;\r\n                                vowel += str[i];\r\n                        }\r\n                }\r\n                for (int i = 0; i < str.Length; i++) {\r\n                        if (isVowel(str[i])) {\r\n                                str[i] = vowel[--j];\r\n                        }\r\n                }\r\n                return new string(str);\r\n        }", "30": "static void printString(string str, char ch, int count)\r\n        {\r\n                int occ = 0, i;\r\n                if (count == 0)\r\n                {\r\n                        Console.WriteLine(str);\r\n                        return;\r\n                }\r\n                for (i = 0; i < str.Length; i++)\r\n                {\r\n                        if (str[i] == ch)\r\n                                occ++;\r\n                        if (occ == count)\r\n                                break;\r\n                }\r\n                if (i < str.Length - 1)\r\n                        Console.WriteLine(str.Substring(i + 1));\r\n                else\r\n                        Console.WriteLine(\"Empty string\");\r\n        }", "31": "static bool isNumber(string s)\r\n        {\r\n                for (int i = 0; i < s.Length; i++)\r\n                        if (Char.IsDigit(s[i]) == false)\r\n                                return false;\r\n                return true;\r\n        }", "32": "static void permute(string input)\r\n        {\r\n                int n = input.Length;\r\n                int max = 1 << n;\r\n                input = input.ToLower();\r\n                for(int i = 0;i < max; i++)\r\n                {\r\n                        char[] combination = input.ToCharArray();\r\n                        for(int j = 0; j < n; j++)\r\n                        {\r\n                                if(((i >> j) & 1) == 1)\r\n                                        combination[j] = (char) (combination[j]-32);\r\n                        }\r\n                        Console.Write(combination);\r\n                        Console.Write(\" \");\r\n                }\r\n        }", "33": "static bool canFormPalindrome(string str)\r\n        {\r\n                int[] count = new int[NO_OF_CHARS];\r\n                for (int i = 0; i < str.Length; i++)\r\n                        count[str[i]]++;\r\n                int odd = 0;\r\n                for (int i = 0; i < NO_OF_CHARS; i++)\r\n                {\r\n                        if ((count[i] & 1) != 0)\r\n                                odd++;\r\n                        if (odd > 1)\r\n                                return false;\r\n                }\r\n                return true;\r\n        }", "34": "static void printInitials(string name)\r\n        {\r\n                if (name.Length == 0)\r\n                        return;\r\n                string[] words = name.Split(' ');\r\n                foreach (string word in words)\r\n                {\r\n                        Console.Write(char.ToUpper(word[0]) + \" \");\r\n                }\r\n        }", "35": "static bool isValidISBN(string isbn)\r\n{\r\n        int n = isbn.Length;\r\n        if (n != 10)\r\n                return false;\r\n        int sum = 0;\r\n        for (int i = 0; i < 9; i++)\r\n        {\r\n                int digit = isbn[i] - '0';\r\n                if (0 > digit && digit > 9)\r\n                        return false;\r\n                sum += (digit * (10 - i));\r\n        }\r\n        char last = isbn[9];\r\n        if (last != 'X' && (last < '0' last > '9'))\r\n                return false;\r\n        sum += ((last == 'X') ? 10 : (last - '0'));\r\n        return (sum % 11 == 0);\r\n}", "36": "static int countOccurrences(string str, string word)\r\n{\r\n        string[] a = str.Split(' ');\r\n        int count = 0;\r\n        for (int i = 0; i < a.Length; i++)\r\n        {\r\n        if (word.Equals(a[i]))\r\n                count++;\r\n        }\r\n        return count;\r\n}", "37": "static string encryptString(char[] s, int n, int k)\r\n        {\r\n                int[] cv = new int[n];\r\n                int[] cc = new int[n];\r\n                if (isVowel(s[0]))\r\n                        cv[0] = 1;\r\n                else\r\n                        cc[0] = 1;\r\n                for (int i = 1; i < n; i++)\r\n                {\r\n                        cv[i] = cv[i - 1] + (isVowel(s[i]) == true ? 1 : 0);\r\n                        cc[i] = cc[i - 1] + (isVowel(s[i]) == true ? 0 : 1);\r\n                }\r\n                string ans = \"\";\r\n                int prod = 0;\r\n                prod = cc[k - 1] * cv[k - 1];\r\n                ans += prod.ToString();\r\n                for (int i = k; i < s.Length; i++)\r\n                {\r\n                        prod = (cc[i] - cc[i - k]) *\r\n                                (cv[i] - cv[i - k]);\r\n                        ans += prod.ToString();\r\n                }\r\n                return ans;\r\n        }", "38": "static string encryptString(string s, int n, int k) {\r\n                int countVowels = 0;\r\n                int countConsonants = 0;\r\n                string ans = \"\";\r\n                for (int l = 0; l <= n - k; l++) {\r\n                        countVowels = 0;\r\n                        countConsonants = 0;\r\n                        for (int r = l; r <= l + k - 1; r++) {\r\n                                if (isVowel(s[r]) == true) {\r\n                                        countVowels++;\r\n                                } else {\r\n                                        countConsonants++;\r\n                                }\r\n                        }\r\n                        ans += countVowels * countConsonants;\r\n                }\r\n                return ans;\r\n        }", "39": "public static string change_case(string a)\r\n        {\r\n                string temp = \"\";\r\n                int l = a.Length;\r\n                for(int i = 0 ; i < l ; i++)\r\n                {\r\n                        char ch=a[i];\r\n                        if(ch >= 'a' &&ch <= 'z')\r\n                        ch = (char)(65 + (int)(ch - 'a'));\r\n                        else if(ch >= 'A' &&ch <= 'Z')\r\n                        ch = (char)(97 +\r\n                                (int)(ch - 'A'));\r\n                        temp += ch;\r\n                }\r\n                return temp;\r\n        }\r\npublic static string delete_vowels(string a)\r\n        {\r\n                string temp = \"\";\r\n                int l = a.Length;\r\n                for(int i = 0 ; i < l ; i++)\r\n                {\r\n                        char ch = a[i];\r\n                        if(ch != 'a' && ch != 'e' && ch != 'i' && ch != 'o' && ch != 'u' && ch != 'A' && ch != 'E' && ch != 'O' && ch != 'U'&&ch != 'I')\r\n                                temp += ch;\r\n                }\r\n                return temp;\r\n        }\r\npublic static string insert_hash(string a)\r\n        {\r\n                string temp = \"\";\r\n                int l = a.Length;\r\n                char hash = '#';\r\n                for(int i = 0 ; i < l ; i++)\r\n                {\r\n                        char ch=a[i];\r\n                        if((ch >= 'a' && ch <= 'z') ||\r\n                        (ch >= 'A' && ch <= 'Z'))\r\n                                temp = temp + hash + ch;\r\n                        else\r\n                                temp = temp + ch;\r\n                }\r\n                return temp;\r\n        }\r\npublic static void transformString(string a)\r\n        {\r\n                string b = delete_vowels(a);\r\n                string c = change_case(b);\r\n                string d = insert_hash(c);\r\n                Console.WriteLine(d);\r\n        }", "40": "static string convert(string s)\r\n        {\r\n                int n = s.Length;\r\n                string s1 = \"\";\r\n                s1 = s1 + char.ToLower(s[0]);\r\n                for (int i = 1; i < n; i++)\r\n                {\r\n                        if (s[i] == ' ' && i < n)\r\n                        {\r\n                                s1 = s1 + \" \" + char.ToLower(s[i + 1]);\r\n                                i++;\r\n                        }\r\n                        else\r\n                        s1= s1 + char.ToUpper(s[i]);\r\n                }\r\n                return s1;\r\n        }", "41": "static string convert(string str)\r\n        {\r\n                string w = \"\", z = \"\";\r\n                str = str.ToUpper() + \" \";\r\n                for (int i = 0; i < str.Length; i++)\r\n                {\r\n                        char ch = str[i];\r\n                        if (ch != ' ')\r\n                                w = w + ch;\r\n                        else {\r\n                                z = z + (char.ToLower(w[0])) +\r\n                                                w.Substring(1) + \" \";\r\n                                w = \"\";\r\n                        }\r\n                }\r\n                return z;\r\n        }", "42": "static void findDuplicates(string[] a, int n, int m)\r\n        {\r\n                bool[][] isPresent = new bool[n] [m];\r\n                for (int i = 0; i < n; i++)\r\n                {\r\n                        for (int j = 0; j < m; j++)\r\n                        {\r\n                                isPresent[i][j]=false;\r\n                        }\r\n                }\r\n                for (int i = 0; i < n; i++)\r\n                {\r\n                        for (int j = 0; j < m; j++)\r\n                        {\r\n                                for (int k = 0; k < n; k++)\r\n                                {\r\n                                        if (a[i][j]== a[k][j] && i != k)\r\n                                        {\r\n                                                isPresent[i][j] = true;\r\n                                                isPresent[k][j] = true;\r\n                                        }\r\n                                }\r\n                                for (int k = 0; k < m; k++)\r\n                                {\r\n                                        if (a[i][j]== a[i][k] && j != k)\r\n                                        {\r\n                                                isPresent[i][j] = true;\r\n                                                isPresent[i][k] = true;\r\n                                        }\r\n                                }\r\n                        }\r\n                }\r\n                for (int i = 0; i < n; i++)\r\n                        for (int j = 0; j < m; j++)\r\n                                if (isPresent[i][j]==false)\r\n                                        Console.Write(a[i][j]);\r\n        }", "43": "static void findSubsequence(String str, int k)\r\n        {\r\n                int[] a = new int[MAX_CHAR];\r\n                for (int i = 0; i < str.Length; i++)\r\n                        a[str[i] - 'a']++;\r\n                for (int i = 0; i < str.Length; i++)\r\n                        if (a[str[i] - 'a'] >= k)\r\n                                Console.Write(str[i]);\r\n        }", "44": "static int findSubSequence(string s, int num)\r\n        {\r\n                int res = 0;\r\n                int i = 0;\r\n                while (num > 0) {\r\n                        if ((num & 1) == 1)\r\n                                res += s[i] - '0';\r\n                        i++;\r\n                        num = num >> 1;\r\n                }\r\n                return res;\r\n        }\r\nstatic int combinedSum(string s)\r\n        {\r\n                int n = s.Length;\r\n                int c_sum = 0;\r\n                int range = (1 << n) - 1;\r\n                for (int i = 0; i <= range; i++)\r\n                        c_sum += findSubSequence(s, i);\r\n                return c_sum;\r\n        }", "45": "static string removePalinWords(string str)\r\n        {\r\n                string final_str = \"\", word = \"\";\r\n                str = str + \" \";\r\n                int n = str.Length;\r\n                for (int i = 0; i < n; i++)\r\n                {\r\n                        if (str[i] != ' ')\r\n                        word = word + str[i];\r\n                        else\r\n                        {\r\n                                if (!(isPalindrome(word)))\r\n                                        final_str += word + \" \";\r\n                                word = \"\";\r\n                        }\r\n                }\r\n                return final_str;\r\n        }", "46": "static int productAtKthLevel(string tree, int k)\r\n        {\r\n                int level = -1;\r\n                int product = 1;\r\n                int n = tree.Length;\r\n                for (int i = 0; i < n; i++)\r\n                {\r\n                        if (tree[i] == '(')\r\n                                level++;\r\n                        else if (tree[i] == ')')\r\n                                level--;\r\n                        else\r\n                        {\r\n                                if (level == k)\r\n                                        product *= (tree[i] - '0');\r\n                        }\r\n                }\r\n                return product;\r\n        }", "47": "static bool isDivisible(string str, int k)\r\n        {\r\n                int n = str.Length;\r\n                int c = 0;\r\n                for (int i = 0; i < k; i++)\r\n                        if (str[n - i - 1] == '0')\r\n                                c++;\r\n                return (c == k);\r\n        }", "48": "static bool check(string s, int m)\r\n{\r\n        int l = s.Length;\r\n        int c1 = 0;\r\n        int c2 = 0;\r\n        for (int i = 0; i < l; i++)\r\n        {\r\n                if (s[i] == '0')\r\n                {\r\n                        c2 = 0;\r\n                        c1++;\r\n                }\r\n                else\r\n                {\r\n                        c1 = 0;\r\n                        c2++;\r\n                }\r\n                if (c1 == m c2 == m)\r\n                        return true;\r\n        }\r\n        return false;\r\n}", "49": "static int popcount(int n)\r\n        {\r\n                int count = 0;\r\n                while (n > 0) {\r\n                        count += n & 1;\r\n                        n >>= 1;\r\n                }\r\n                return count;\r\n        }\r\nstatic void countEvenOdd(int[] arr, int n, int K)\r\n        {\r\n                int even = 0, odd = 0;\r\n                for (int i = 0; i < n; i++) {\r\n                        int x = popcount(arr[i]);\r\n                        if (x % 2 == 0)\r\n                                even++;\r\n                        else\r\n                                odd++;\r\n                }\r\n                int y;\r\n                y = popcount(K);\r\n                if ((y & 1) != 0) {\r\n                        Console.WriteLine(\"Even = \"+ odd + \", Odd = \" + even);\r\n                }\r\n                else {\r\n                        Console.WriteLine(\"Even = \" + even + \", Odd = \" + odd);\r\n                }\r\n        }"}}, "C# - Java": {"id": {"0": 8110, "1": 8099, "2": 8085, "3": 8078, "4": 8061, "5": 8054, "6": 8015, "7": 8004, "8": 7991, "9": 7989, "10": 7979, "11": 7978, "12": 7977, "13": 7966, "14": 7940, "15": 7939, "16": 7938, "17": 7900, "18": 7899, "19": 7892, "20": 7889, "21": 7868, "22": 7864, "23": 7861, "24": 7851, "25": 7828, "26": 7820, "27": 7819, "28": 7816, "29": 7788, "30": 7758, "31": 7753, "32": 7735, "33": 7734, "34": 7694, "35": 7693, "36": 7688, "37": 7646, "38": 7622, "39": 7609, "40": 7594, "41": 7593, "42": 7587, "43": 7564, "44": 7548, "45": 7542, "46": 7507, "47": 7487, "48": 7423, "49": 7412}, "C#": {"0": "public static bool is_possible(String s)\n        {\n                int l = s.Length;\n                int one = 0, zero = 0;\n                for (int i = 0; i < l; i++)\n                {\n                        if (s[i] == '0')\n                                zero++;\n                        else\n                                one++;\n                }\n                if (l % 2 == 0)\n                        return (one == zero);\n                else\n                        return (Math.Abs(one - zero) == 1);\n        }", "1": "static bool checkIfUnequal(int n, int q)\n        {\n                string s1 = n.ToString();\n                int[] a = new int[26];\n                for (int i = 0; i < s1.Length; i++)\n                        a[s1[i] - '0']++;\n                int prod = n * q;\n                string s2 = prod.ToString();\n                for (int i = 0; i < s2.Length; i++)\n                {\n                        if (a[s2[i] - '0'])\n                                return false;\n                }\n                return true;\n        }\nstatic int countInRange(int l, int r, int q)\n        {\n                int count = 0;\n                for (int i = l; i <= r; i++)\n                {\n                        if (checkIfUnequal(i, q))\n                                count++;\n                }\n                return count;\n        }", "2": "public static Boolean multipleOrFactor(String s1, String s2)\n        {\n                Dictionary<char, int> m1 = new Dictionary<char, int>();\n                Dictionary<char, int> m2 = new Dictionary<char, int>();\n                for (int i = 0; i < s1.Length; i++)\n                {\n                        if (m1.ContainsKey(s1[i]))\n                        {\n                                var x = m1[s1[i]];\n                                m1[s1[i]]= ++x;\n                        }\n                        else\n                                m1.Add(s1[i], 1);\n                }\n                for (int i = 0; i < s2.Length; i++)\n                {\n                        if (m2.ContainsKey(s2[i]))\n                        {\n                                var x = m2[s2[i]];\n                                m2[s2[i]]= ++x;\n                        }\n                        else\n                                m2.Add(s2[i], 1);\n                }\n                foreach(KeyValuePair<char, int> entry in m1)\n                {\n                        if (!m2.ContainsKey(entry.Key))\n                                continue;\n                        if (m2[entry.Key] != 0 &&\n                        (m2[entry.Key] % entry.Value == 0 entry.Value % m2[entry.Key] == 0))\n                                continue;\n                        else\n                                return false;\n                }\n                return true;\n        }", "3": "static int countChar(string str, char x)\n{\n        int count = 0;\n        int n = 10;\n        for (int i = 0; i < str.Length; i++)\n                if (str[i] == x)\n                        count++;\n        int repetitions = n / str.Length;\n        count = count * repetitions;\n        for (int i = 0; i < n % str.Length; i++)\n        {\n                if (str[i] == x)\n                        count++;\n        }\n        return count;\n}", "4": "static void SieveOfEratosthenes(bool []prime, int p_size)\n        {\n                prime[0] = false;\n                prime[1] = false;\n                for (int p = 2; p * p <= p_size; p++)\n                {\n                        if (prime[p])\n                        {\n                                for (int i = p * 2; i < p_size; i += p)\n                                {\n                                        prime[i] = false;\n                                }\n                        }\n                }\n        }\nstatic void sumProdOfPrimeFreq(char[] s)\n        {\n                int i;\n                bool[] prime = new bool[s.Length + 1];\n                for(i=0;i<s.Length + 1;i++){\n                        prime[i]=true;\n                }\n                SieveOfEratosthenes(prime, s.Length + 1);\n                Dictionary<char, int> mp = new Dictionary<char, int>();\n                for (i = 0 ; i < s.Length; i++)\n                {\n                        if(mp.ContainsKey(s[i]))\n                        {\n                                var val = mp[s[i]];\n                                mp.Remove(s[i]);\n                                mp.Add(s[i], val + 1);\n                        }\n                        else\n                        {\n                                mp.Add(s[i], 1);\n                        }\n                }\n                int sum = 0, product = 1;\n                foreach(KeyValuePair<char, int> it in mp)\n                {\n                        if (prime[it.Value])\n                        {\n                                sum += it.Value;\n                                product *= it.Value;\n                        }\n                }\n                Console.Write(\"Sum = \" + sum);\n                Console.WriteLine(\"\\nProduct = \" + product);\n        }", "5": "static char bitToBeFlipped(String s)\n{\n        char last = s[s.Length - 1];\n        char first = s[0];\n        if (last == first) {\n                if (last == '0') {\n                        return '1';\n                }\n                else {\n                        return '0';\n                }\n        }\n        else if (last != first) {\n                return last;\n        }\n        return last;\n}\n", "6": "public static void steps(string str, int n)\n{\n        bool flag = false;\n        int x = 0;\n        for (int i = 0; i < str.Length; i++)\n        {\n                if (x == 0)\n                {\n                        flag = true;\n                }\n                if (x == n - 1)\n                {\n                        flag = false;\n                }\n                for (int j = 0; j < x; j++)\n                {\n                        Console.Write(\"*\");\n                }\n                Console.Write(str[i] + \"\\n\");\n                if (flag == true)\n                {\n                        x++;\n                }\n                else\n                {\n                        x--;\n                }\n        }\n}", "7": "static string decryptString(string str, int n)\n{\n        int i = 0, jump = 1;\n        string decryptedStr = \"\";\n        while (i < n)\n        {\n                decryptedStr += str[i];\n                i += jump;\n                jump++;\n        }\n        return decryptedStr;\n}", "8": "static String maxValue(char []a, char []b)\n{\n        Array.Sort(b);\n        int n = a.Length;\n        int m = b.Length;\n        int j = m - 1;\n        for (int i = 0; i < n; i++)\n        {\n                if (j < 0)\n                        break;\n                if (b[j] > a[i])\n                {\n                        a[i] = b[j];\n                        j--;\n                }\n        }\n        return String.Join(\"\",a);\n}", "9": "static int minOperations(string s, string t, int n)\n{\n        int ct0 = 0, ct1 = 0;\n        for (int i = 0; i < n; i++)\n        {\n                if (s[i] == t[i])\n                        continue;\n                if (s[i] == '0')\n                        ct0++;\n                else\n                        ct1++;\n        }\n        return Math.Max(ct0, ct1);\n}\n", "10": "static int prefixOccurrences(string str)\n        {\n                char c = str[0];\n                int countc = 0;\n                for (int i = 0; i < str.Length; i++)\n                {\n                        if (str[i] == c)\n                                countc++;\n                }\n                return countc;\n        }", "11": "public static string replaceConsonants(string str)\n        {\n                string res = \"\";\n                int i = 0, count = 0;\n                while (i < str.Length) {\n                        if (str[i] != 'a' && str[i] != 'e' && str[i] != 'i' && str[i] != 'o' && str[i] != 'u') {\n                                i++;\n                                count++;\n                        }\n                        else {\n                                if (count > 0) {\n                                        res += count;\n                                }\n                                res += str[i];\n                                i++;\n                                count = 0;\n                        }\n                }\n                if (count > 0) {\n                        res += count;\n                }\n                return res;\n        }", "12": "static int totalPairs(String s1, String s2)\n        {\n                int a1 = 0, b1 = 0;\n                for (int i = 0; i < s1.Length; i++)\n                {\n                        if ((int)s1[i] % 2 != 0)\n                                a1++;\n                        else\n                                b1++;\n                }\n                int a2 = 0, b2 = 0;\n                for (int i = 0; i < s2.Length; i++)\n                {\n                        if ((int)s2[i] % 2 != 0)\n                                a2++;\n                        else\n                                b2++;\n                }\n                return ((a1 * a2) + (b1 * b2));\n        }", "13": "static int countMinReversals(String expr)\n{\n        int len = expr.Length;\n        if (len % 2 != 0)\n                return -1;\n        int ans = 0;\n        int i;\n        int open = 0;\n        int close = 0;\n        for (i = 0; i < len; i++)\n        {\n                if (expr[i] == '{')\n                        open++;\n                else\n                {\n                        if (open == 0)\n                                close++;\n                        else\n                                open--;\n                }\n        }\n        ans = (close / 2) + (open / 2);\n        close %= 2;\n        open %= 2;\n        if (close != 0)\n                ans += 2;\n        return ans;\n}", "14": "static bool equalIgnoreCase(String str1, String str2)\n        {\n                str1 = str1.ToUpper();\n                str2 = str2.ToUpper();\n                int x = str1.CompareTo(str2);\n                if (x != 0)\n                {\n                        return false;\n                }\n                else\n                {\n                        return true;\n                }\n        }\nstatic void equalIgnoreCaseUtil(String str1, String str2)\n        {\n                bool res = equalIgnoreCase(str1, str2);\n                if (res == true)\n                {\n                        Console.WriteLine(\"Same\");\n                }\n                else\n                {\n                        Console.WriteLine(\"Not Same\");\n                }\n        }", "15": "static bool equalIgnoreCase(String str1, String str2)\n        {\n                str1 = str1.ToUpper();\n                str2 = str2.ToUpper();\n                int x = str1.CompareTo(str2);\n                if (x != 0)\n                {\n                        return false;\n                }\n                else\n                {\n                        return true;\n                }\n        }\nstatic void equalIgnoreCaseUtil(String str1, String str2)\n        {\n                bool res = equalIgnoreCase(str1, str2);\n                if (res == true)\n                {\n                        Console.WriteLine(\"Same\");\n                }\n                else\n                {\n                        Console.WriteLine(\"Not Same\");\n                }\n        }", "16": NaN, "17": "static bool isPalin(int i, int j, int k, int l, int p, int q, String s)\n        {\n                int start = i, end = q;\n                while (start < end)\n                {\n                        if (s[start] != s[end])\n                        {\n                                return false;\n                        }\n                        start++;\n                        if (start == j + 1)\n                        {\n                                start = k;\n                        }\n                        end--;\n                        if (end == p - 1)\n                        {\n                                end = l;\n                        }\n                }\n                return true;\n        }\nstatic int countSubStr(String s)\n        {\n                int count = 0;\n                int n = s.Length;\n                for (int i = 0; i < n - 2; i++)\n                {\n                        for (int j = i; j < n - 2; j++)\n                        {\n                                for (int k = j + 1; k < n - 1; k++)\n                                {\n                                        for (int l = k; l < n - 1; l++)\n                                        {\n                                                for (int p = l + 1; p < n; p++)\n                                                {\n                                                        for (int q = p; q < n; q++)\n                                                        {\n                                                                if (isPalin(i, j, k, l, p, q, s))\n                                                                {\n                                                                        count++;\n                                                                }\n                                                        }\n                                                }\n                                        }\n                                }\n                        }\n                }\n                return count;\n        }", "18": "static void printUncommon(string str1, string str2)\n{\n        int a1 = 0, a2 = 0;\n        for (int i = 0; i < str1.Length; i++)\n        {\n                int ch = (str1[i] - 'a');\n                a1 = a1 | (1 << ch);\n        }\n        for (int i = 0; i < str2.Length; i++)\n        {\n                int ch = (str2[i] - 'a');\n                a2 = a2 | (1 << ch);\n        }\n        int ans = a1 ^ a2;\n        int j = 0;\n        while (j < 26)\n        {\n                if (ans % 2 == 1)\n                {\n                        Console.Write((char)('a' + j));\n                }\n                ans = ans / 2;\n                j++;\n        }\n}", "19": "static Boolean isPossible(char[] str)\n        {\n                Dictionary<char, int> freq = new Dictionary<char, int>();\n                int max_freq = 0;\n                for (int j = 0; j < (str.Length); j++) {\n                        if (freq.ContainsKey(str[j])) {\n                                var v = freq[str[j]] + 1;\n                                freq.Remove(str[j]);\n                                freq.Add(str[j], v);\n                                if (freq[str[j]] > max_freq)\n                                        max_freq = freq[str[j]];\n                        }\n                        else {\n                                freq.Add(str[j], 1);\n                                if (freq[str[j]] > max_freq)\n                                        max_freq = freq[str[j]];\n                        }\n                }\n                if (max_freq <= (str.Length - max_freq + 1))\n                        return true;\n                return false;\n        }", "20": "static void getOrgString(String s)\n        {\n                Console.Write(s[0]);\n                int i = 1;\n                while (i < s.Length)\n                {\n                        if (s[i] >= 'A' && s[i] <= 'Z')\n                                Console.Write(\" \"+ char.ToLower(s[i]));\n                        else\n                                Console.Write(s[i]);\n                        i++;\n                }\n        }", "21": "public static char[] encryptStr(String str, int n, int x)\n        {\n                x = x % MAX;\n                char[] arr = str.ToCharArray();\n                int[] freq = new int[MAX];\n                for (int i = 0; i < n; i++)\n                        freq[arr[i] - 'a']++;\n                for (int i = 0; i < n; i++)\n                {\n                        if (freq[arr[i] - 'a'] % 2 == 0)\n                        {\n                                int pos = (arr[i] - 'a' + x) % MAX;\n                                arr[i] = (char)(pos + 'a');\n                        }\n                        else\n                        {\n                                int pos = (arr[i] - 'a' - x);\n                                if (pos < 0)\n                                        pos += MAX;\n                                arr[i] = (char)(pos + 'a');\n                        }\n                }\n                return arr;\n        }\n", "22": NaN, "23": "public static void findWord(String c, int n)\n{\n        int co = 0, i;\n        char []s = new char[n];\n        for (i = 0; i < n ; i++)\n        {\n                if (i < n / 2)\n                        co++;\n                else\n                        co = n - i;\n                if ((c[i] + co) <= 122)\n                        s[i] = (char)((int)c[i] + co);\n                else\n                        s[i] = (char)((int)c[i] + co - 26);\n        }\n        String str = String.Join(\"\",s);\n        Console.WriteLine(str);\n}", "24": "static int countSubStr(String s, int n)\n        {\n                int c1 = 0, c2 = 0;\n                for (int i = 0; i < n; i++)\n                {\n                        if (i < n - 5 &&\n                                \"geeks\".Equals(s.Substring(i, 5)))\n                        {\n                                c1++;\n                        }\n                        if (i < n - 3 &&\n                                \"for\".Equals(s.Substring(i, 3)))\n                        {\n                                c2 = c2 + c1;\n                        }\n                }\n                return c2;\n        }\n", "25": "static void findSubStr(String str, int cnt, int start)\n{\n        if (start == str.Length)\n        {\n                minCnt = Math.Min(cnt, minCnt);\n        }\n        for (int len = 1;\n                        len <= (str.Length - start); len++)\n        {\n                String subStr = str.Substring(start, len);\n                if (uSet.Contains(subStr))\n                {\n                        findSubStr(str, cnt + 1, start + len);\n                }\n        }\n}\nstatic void findMinSubStr(String []arr, int n, String str)\n{\n        for (int i = 0; i < n; i++)\n                uSet.Add(arr[i]);\n        findSubStr(str, 0, 0);\n}", "26": "static int cntWays(String str, int n)\n{\n        int x = n + 1;\n        int ways = x * x * (x * x - 1) / 12;\n        return ways;\n}\n", "27": "static int maxSubStr(char []str1, int len1, char []str2, int len2)\n        {\n                if (len1 > len2)\n                        return 0;\n                int []freq1 = new int[MAX];\n                for (int i = 0; i < len1; i++)\n                        freq1[i] = 0;\n                for (int i = 0; i < len1; i++)\n                        freq1[str1[i] - 'a']++;\n                int []freq2 = new int[MAX];\n                for (int i = 0; i < len2; i++)\n                        freq2[i] = 0;\n                for (int i = 0; i < len2; i++)\n                        freq2[str2[i] - 'a']++;\n                int minPoss = int.MaxValue;\n                for (int i = 0; i < MAX; i++)\n                {\n                        if (freq1[i] == 0)\n                                continue;\n                        if (freq1[i] > freq2[i])\n                                return 0;\n                        minPoss = Math.Min(minPoss, freq2[i] / freq1[i]);\n                }\n                return minPoss;\n        }", "28": "public static bool isPalindrome(float num)\n        {\n                string s = num.ToString();\n                int low = 0;\n                int high = s.Length - 1;\n                while (low < high)\n                {\n                        if (s[low] != s[high])\n                                return false;\n                        low++;\n                        high--;\n                }\n                return true;\n        }", "29": "static void sub_segments(String str, int n)\n{\n        int l = str.Length;\n        for (int x = 0; x < l; x += n)\n        {\n                String newlist = str.Substring(x, n);\n                List<char> arr = new List<char>();\n                foreach (char y in newlist.ToCharArray())\n                {\n                        if (!arr.Contains(y))\n                                arr.Add(y);\n                }\n                foreach (char y in arr)\n                        Console.Write(y);\n                Console.WriteLine();\n        }\n}", "30": "static void findMostOccurringChar(string []str)\n        {\n                int []hash = new int[26];\n                for (int i = 0; i < str.Length; i++)\n                {\n                        for (int j = 0; j < str[i].Length; j++)\n                        {\n                                hash[str[i][j]-97]++;\n                        }\n                }\n                int max = 0;\n                for (int i = 0; i < 26; i++)\n                {\n                        max = hash[i] > hash[max] ? i : max;\n                }\n                Console.Write((char)(max + 97) +\"\\n\");\n        }", "31": "static int productAtKthLevel( String tree, int k, int level){\n                if (tree[i++] == '(') {\n                        if (tree[i] == ')')\n                                return 1;\n                        int product = 1;\n                        if (level == k)\n                                product = tree[i] - '0';\n                        ++i;\n                        int leftproduct = productAtKthLevel( tree, k, level + 1);\n                        ++i;\n                        int rightproduct =\n                        productAtKthLevel(tree, k, level + 1);\n                        ++i;\n                        return product *\n                        leftproduct * rightproduct;\n                }\n                return int.MinValue;\n        }", "32": "static String removeChars(char []arr, int k)\n{\n        int []hash = new int[MAX_CHAR];\n        int n = arr.Length;\n        for (int i = 0; i < n; ++i)\n                hash[arr[i] - 'a']++;\n        String ans = \"\";\n        for (int i = 0; i < n; ++i) {\n                if (hash[arr[i] - 'a'] != k) {\n                        ans += arr[i];\n                }\n        }\n        return ans;\n}", "33": "static string removeOddFrequencyCharacters(string s)\n{\n        Dictionary<char,\n                        int> m = new Dictionary<char,\n                                                                        int>();\n        for(int i = 0; i < s.Length; i++)\n        {\n                char p = s[i];\n                if (m.ContainsKey(p))\n                {\n                        m[p]++;\n                }\n                else\n                {\n                        m[p] = 1;\n                }\n        }\n        string new_string = \"\";\n        for(int i = 0; i < s.Length; i++)\n        {\n                if ((m[s[i]] & 1) == 1)\n                        continue;\n                new_string += s[i];\n        }\n        return new_string;\n}\n", "34": "public static void distinct(string[] S, int M)\n{\n        int count = 0;\n        for(int i = 0; i < S.Length; i++)\n        {\n                HashSet<char> set = new HashSet<char>();\n                for(int j = 0; j < S[i].Length; j++)\n                {\n                        if (!set.Contains(S[i][j]))\n                                set.Add(S[i][j]);\n                }\n                int c = set.Count;\n                if (c <= M)\n                        count += 1;\n        }\n        Console.Write(count);\n}", "35": "static String flip(char []s)\n{\n        for(int i = 0; i < s.Length; i++)\n        {\n        if (s[i] == '0')\n        {\n                while (s[i] == '0')\n                {\n                        s[i] = '1';\n                        i++;\n                }\n                break;\n        }\n        }\n        return new String(s);\n}", "36": "static void findNumOfValidWords(List<String> w, List<String> p)\n{\n Dictionary<int,\n                        int> m = new Dictionary<int,\n                                                                        int>();\n List<int> res = new List<int>();\n foreach (String s in w)\n {\n        int val = 0;\n        foreach (char c in s.ToCharArray())\n        {\n        val = val | (1 << (c - 'a'));\n        }\n        if(m.ContainsKey(val))\n        m[val] = m[val] + 1;\n        else\n        m.Add(val, 1);\n }\n foreach (String s in p)\n {\n        int val = 0;\n        foreach (char c in s.ToCharArray())\n        {\n        val = val | (1 << (c - 'a'));\n        }\n        int temp = val;\n        int first = s[0] - 'a';\n        int count = 0;\n        while (temp != 0)\n        {\n        if (((temp >> first) & 1) == 1)\n        {\n                if (m.ContainsKey(temp))\n                {\n                count += m[temp];\n                }\n        }\n        temp = (temp - 1) & val;\n        }\n        res.Add(count);\n }\n foreach (int it in res)\n {\n        Console.WriteLine(it);\n }\n}", "37": "static bool can_Construct(String S, int K)\n{        \n Dictionary<char,\n                        int> m = new Dictionary<char,\n                                                                        int>();\n int p = 0;\n if (S.Length == K)\n        return true;\n for(int i = 0; i < S.Length; i++)\n        if(!m.ContainsKey(S[i]))\n        m.Add(S[i], 1);\n else\n        m[S[i]] = m[S[i]] + 1;\n if (K > S.Length)\n        return false;\n else\n {\n        foreach(int h in m.Values)\n        {\n        if (h % 2 != 0)\n                p = p + 1;\n        }\n }\n if (K < p)\n        return false;\n return true;\n}", "38": "static bool check(String s, int n)\n{\n        Stack<int> st = new Stack<int>();\n        for(int i = 0; i < n; i++)\n        {\n                if (st.Count != 0 &&\n                        st.Peek() == s[i])\n                        st.Pop();\n                else\n                        st.Push(s[i]);\n        }\n        if (st.Count == 0)\n        {\n                return true;\n        }\n        else\n        {\n                return false;\n        }\n}", "39": "static bool isValid(char a1, char a2, string str, int flag)\n{\n        char v1, v2;\n        if (flag == 0)\n        {\n                v1 = str[4];\n                v2 = str[3];\n        }\n        else\n        {\n                v1 = str[1];\n                v2 = str[0];\n        }\n        if (v1 != a1 && v1 != '?')\n        {\n                return false;\n        }\n        if (v2 != a2 && v2 != '?')\n        {\n                return false;\n        }\n        return true;\n}\nstatic bool inRange(int hh, int mm, int L, int R)\n{\n        int a = Math.Abs(hh - mm);\n        if (a < L a > R)\n        {\n                return false;\n        }\n        return true;\n}\nstatic void displayTime(int hh, int mm)\n{\n        if (hh > 10)\n        {\n                Console.Write(hh + \":\");\n        }\n        else if (hh < 10)\n        {\n                Console.Write(\"0\" + hh + \":\");\n        }\n        if (mm > 10)\n        {\n                Console.Write(mm);\n        }\n        else if (mm < 10)\n        {\n                Console.Write(\"0\" + mm);\n        }\n}\nstatic void maximumTimeWithDifferenceInRange( string str, int L, int R)\n{\n        int i = 0, j = 0;\n        int h1, h2, m1, m2;\n        for(i = 23; i >= 0; i--)\n        {\n                h1 = i % 10;\n                h2 = i / 10;\n                if (!isValid((char)h1, (char)h2, str, 1))\n                {\n                        continue;\n                }\n                for(j = 59; j >= 0; j--)\n                {\n                        m1 = j % 10;\n                        m2 = j / 10;\n                        if (!isValid((char)m1, (char)m2, str, 0))\n                        {\n                                continue;\n                        }\n                        if (inRange(i, j, L, R))\n                        {\n                                displayTime(i, j);\n                                return;\n                        }\n                }\n        }\n        if (inRange(i, j, L, R))\n        {\n                displayTime(i, j);\n        }\n        else\n        {\n                Console.WriteLine(\"-1\");\n        }\n}", "40": "static String checkString(String s, int K)\n{\n        int n = s.Length;\n        Dictionary<char,\n                        int> mp = new Dictionary<char,\n                                                                                int>();\n        for(int i = 0; i < n; i++)\n        {\n                if(mp.ContainsKey(s[i]))\n                        mp[s[i]] = i;\n                else\n                        mp.Add(s[i], i);\n        }\n        int f = 0;\n        HashSet<char> st = new HashSet<char>();\n        for(int i = 0; i < n; i++)\n        {\n                st.Add(s[i]);\n                if (st.Count > K)\n                {\n                        f = 1;\n                        break;\n                }\n                if (mp[s[i]] == i)\n                        st.Remove(s[i]);\n        }\n        return (f == 1 ? \"Yes\" : \"No\");\n}", "41": "static String removeCharRecursive(String str, char X)\n{\n        if (str.Length == 0)\n        {\n                return \"\";\n        }\n        if (str[0] == X)\n        {\n                return removeCharRecursive(\n                        str.Substring(1), X);\n        }\n        return str[0] + removeCharRecursive(\n                                        str.Substring(1), X);\n}", "42": "static int binomialCoeff(int n, int k)\n{\n        int res = 1;\n        if (k > n - k)\n                k = n - k;\n        for(int i = 0; i < k; ++i)\n        {\n                res *= (n - i);\n                res /= (i + 1);\n        }\n        return res;\n}\nstatic int countOfString(int N)\n{\n        int Stotal = (int) Math.Pow(2, N);\n        int Sequal = 0;\n        if (N % 2 == 0)\n                Sequal = binomialCoeff(N, N / 2);\n        int S1 = (Stotal - Sequal) / 2;\n        return S1;\n}", "43": "static int longComPre(String []arr, int N)\n{\n int [,]freq = new int[N, 256];\n for (int i = 0; i < N; i++)\n {\n        int M = arr[i].Length;\n        for (int j = 0; j < M; j++)\n        {\n        freq[i, arr[i][j]]++;\n        }\n }\n int maxLen = 0;\n for (int j = 0; j < 256; j++)\n {\n        int minRowVal = int.MaxValue;\n        for (int i = 0; i < N; i++)\n        {\n        minRowVal = Math.Min(minRowVal, freq[i, j]);\n        }\n        maxLen += minRowVal;\n }\n return maxLen;\n}", "44": "static int findMinimumChanges(int N, int K, char[] S)\n{\n        int ans = 0;\n        for(int i = 0; i < (K + 1) / 2; i++)\n        {\n                Dictionary<char,\n                                int> mp = new Dictionary<char,\n                                                                                        int>();\n                for(int j = i; j < N; j += K)\n                {\n                        if (mp.ContainsKey(S[j]))\n                        {\n                                mp[S[j]]++;\n                        }\n                        else\n                        {\n                                mp.Add(S[j], 1);\n                        }\n                }\n                for(int j = N - i - 1; j >= 0; j -= K)\n                {\n                        if (K % 2 == 1 && i == K / 2)\n                                break;\n                        if (mp.ContainsKey(S[j]))\n                        {\n                                mp[S[j]]++;\n                        }\n                        else\n                        {\n                                mp.Add(S[j], 1);\n                        }\n                }\n                int curr_max = int.MinValue;\n                foreach(KeyValuePair<char, int> p in mp)\n                {\n                        curr_max = Math.Max(curr_max, p.Value);\n                }\n                if ((K % 2 == 1) && i == K / 2)\n                        ans += (N / K - curr_max);\n                else\n                        ans += (N / K * 2 - curr_max);\n        }\n        return ans;\n}", "45": "static void minMaxDigits(string str, int N)\n{\n        int[] arr = new int[N];\n        for(int i = 0; i < N; i++)\n                arr[i] = (str[i] - '0') % 3;\n        int zero = 0, one = 0, two = 0;\n        for(int i = 0; i < N; i++)\n        {\n                if (arr[i] == 0)\n                        zero++;\n                if (arr[i] == 1)\n                        one++;\n                if (arr[i] == 2)\n                        two++;\n        }\n        int sum = 0;\n        for(int i = 0; i < N; i++)\n        {\n                sum = (sum + arr[i]) % 3;\n        }\n        if (sum == 0)\n        {\n                Console.Write(0 + \" \");\n        }\n        if (sum == 1)\n        {\n                if ((one != 0) && (N > 1))\n                        Console.Write(1 + \" \");\n                else if (two > 1 && N > 2)\n                        Console.Write(2 + \" \");\n                else\n                        Console.Write(-1 + \" \");\n        }\n        if (sum == 2)\n        {\n                if (two != 0 && N > 1)\n                        Console.Write(1 + \" \");\n                else if (one > 1 && N > 2)\n                        Console.Write(2 + \" \");\n                else\n                        Console.Write(-1 + \" \");\n        }\n        if (zero > 0)\n                Console.Write(N - 1 + \" \");\n        else if (one > 0 && two > 0)\n                Console.Write(N - 2 + \" \");\n        else if (one > 2 two > 2)\n                Console.Write(N - 3 + \" \");\n        else\n                Console.Write(-1 + \" \");\n}", "46": "static void DFA(string str, int N)\n {\n        if (N <= 1)\n        {\n        Console.Write(\"No\");\n        return;\n        }\n        int count = 0;\n        if (str[0] == 'C') {\n        count++;\n        for (int i = 1; i < N; i++) {\n                if (str[i] == 'A' str[i] == 'B')\n                count++;\n                else\n                break;\n        }\n        }\n        else {\n        Console.Write(\"No\");\n        return;\n        }\n        if (count == N)\n        Console.Write(\"Yes\");\n        else\n        Console.Write(\"No\");\n }", "47": "static void findWinner(string a, int n)\n {\n        List<int> v = new List<int>(); \n        int c = 0;\n        for (int i = 0; i < n; i++)\n        {\n        if (a[i] == '0')\n        {\n                c++;\n        }\n        else\n        {\n                if (c != 0)\n                v.Add(c);\n                c = 0;\n        }\n        }\n        if (c != 0)\n        v.Add(c);\n        if (v.Count == 0)\n        {\n        Console.Write(\"Player B\");\n        return;\n        }\n        if (v.Count == 1)\n        {\n        if ((v[0] & 1) != 0)\n                Console.Write(\"Player A\");\n        else\n                Console.Write(\"Player B\");\n        return;\n        }\n        int first = Int32.MinValue;\n        int second = Int32.MinValue;\n        for (int i = 0; i < v.Count; i++)\n        {\n        if (a[i] > first) {\n                second = first;\n                first = a[i];\n        }\n        else if (a[i] > second && a[i] != first)\n                second = a[i];\n        }\n        if ((first & 1) != 0\n                && (first + 1) / 2 > second)\n        Console.Write(\"Player A\");\n        else\n        Console.Write(\"Player B\");\n }", "48": "static void countOccurrences(string S, string X, string Y)\n        {\n                int count = 0;\n                int N = S.Length, A = X.Length;\n                int B = Y.Length;\n                int P = Math.Min(A, Math.Min(N, B));\n                for (int i = 0; i < N - P + 1; i++) {\n                        if (S.Substring(i, Math.Min(N, B)).Equals(Y))\n                                count++;\n                        if (S.Substring(i, Math.Min(N, A)).Equals(X))\n                                Console.Write(count + \" \");\n                }\n        }", "49": "static void generatePalindrome(string S)\n{\n        Dictionary<char,\n                        int> Hash = new Dictionary<char,\n                                                                                int>();\n        foreach (char ch in S)\n        {\n                if (Hash.ContainsKey(ch))\n                        Hash[ch]++;\n                else\n                        Hash.Add(ch, 1);\n        }\n        HashSet<string> st = new HashSet<string>();\n        for(char i = 'a'; i <= 'z'; i++)\n        {\n                if (Hash.ContainsKey(i) && Hash[i] == 2)\n                {\n                        for(char j = 'a'; j <= 'z'; j++)\n                        {\n                                string s = \"\";\n                                if (Hash.ContainsKey(j) && i != j)\n                                {\n                                        s += i;\n                                        s += j;\n                                        s += i;\n                                        st.Add(s);\n                                }\n                        }\n                }\n                if (Hash.ContainsKey(i) && Hash[i] >= 3)\n                {\n                        for(char j = 'a'; j <= 'z'; j++)\n                        {\n                                string s = \"\";\n                                if (Hash.ContainsKey(j))\n                                {\n                                        s += i;\n                                        s += j;\n                                        s += i;\n                                        st.Add(s);\n                                }\n                        }\n                }\n        }\n        foreach(string ans in st)\n        {\n                Console.WriteLine(ans);\n        }\n}"}, "Java": {"0": "public static boolean is_possible(String s)\r\n{\r\n        int l = s.length();\r\n        int one = 0, zero = 0;\r\n        for (int i = 0; i < l; i++)\r\n        {\r\n                if (s.charAt(i) == '0')\r\n                        zero++;\r\n                else\r\n                        one++;\r\n        }\r\n        if (l % 2 == 0)\r\n                return (one == zero);\r\n        else\r\n                return (Math.abs(one - zero) == 1);\r\n}", "1": "static boolean checkIfUnequal(int n, int q)\r\n        {\r\n                String s1 = n + \"\";\r\n                int[] a = new int[26];\r\n                for (int i = 0; i < s1.length(); i++)\r\n                        a[s1.charAt(i) - '0']++;\r\n                int prod = n * q;\r\n                String s2 = prod + \"\";\r\n                for (int i = 0; i < s2.length(); i++)\r\n                {\r\n                        if (a[s2.charAt(i) - '0'])\r\n                                return false;\r\n                }\r\n                return true;\r\n        }\r\nstatic int countInRange(int l, int r, int q)\r\n        {\r\n                int count = 0;\r\n                for (int i = l; i <= r; i++)\r\n                {\r\n                        if (checkIfUnequal(i, q))\r\n                                count++;\r\n                }\r\n                return count;\r\n        }", "2": "public static boolean multipleOrFactor(String s1, String s2)\r\n{\r\n        Map<Character, Integer> m1 = new HashMap<Character, Integer>();\r\n        Map<Character, Integer> m2 = new HashMap<Character, Integer>();\r\n        for (int i = 0; i < s1.length(); i++)\r\n        {\r\n                if (m1.containsKey(s1.charAt(i)))\r\n                {\r\n                        int x = m1.get(s1.charAt(i));\r\n                        m1.put(s1.charAt(i), ++x);\r\n                }\r\n                else\r\n                        m1.put(s1.charAt(i), 1);\r\n        }\r\n        for (int i = 0; i < s2.length(); i++)\r\n        {\r\n                if (m2.containsKey(s2.charAt(i)))\r\n                {\r\n                        int x = m2.get(s2.charAt(i));\r\n                        m2.put(s2.charAt(i), ++x);\r\n                }\r\n                else\r\n                        m2.put(s2.charAt(i), 1);\r\n        }\r\n        for (Map.Entry<Character, Integer> entry : m1.entrySet())\r\n        {\r\n                if (!m2.containsKey(entry.getKey()))\r\n                        continue;\r\n                if (m2.get(entry.getKey()) != 0 &&\r\n                (m2.get(entry.getKey()) % entry.getValue() == 0 entry.getValue() % m2.get(entry.getKey()) == 0))\r\n                        continue;\r\n                else\r\n                        return false;\r\n        }\r\n        return true;\r\n}", "3": "public static int countChar(String str, char x)\r\n{\r\n        int count = 0;\r\n        int n = 10;\r\n        for (int i = 0; i < str.length(); i++)\r\n                if (str.charAt(i) == x)\r\n                        count++;\r\n        int repetitions = n / str.length();\r\n        count = count * repetitions;\r\n        for (int i = 0; i < n % str.length(); i++)\r\n        {\r\n                if (str.charAt(i) == x)\r\n                        count++;\r\n        }\r\n        return count;\r\n}", "4": "public static void main(String[] args) {\r\n        char[] s = {'a', 'b', 'c', 'a', 'b', 'a'};\r\n        sumProdOfPrimeFreq(s);\r\n}\r\nstatic void sumProdOfPrimeFreq(char[] s)\r\n        {\r\n                int i;\r\n                boolean[] prime = new boolean[s.length + 1];\r\n                for(i=0;i<s.length + 1;i++){\r\n                        prime[i]=true;\r\n                }\r\n                SieveOfEratosthenes(prime, s.length + 1);\r\n                HashMap<Character, Integer> mp = new HashMap<Character, Integer>();\r\n                for (i = 0 ; i < s.length; i++)\r\n                {\r\n                        if(mp.containsKey(s[i]))\r\n                        {\r\n                                int val = mp.get(s[i]);\r\n                                mp.remove(s[i]);\r\n                                mp.put(s[i], val + 1);\r\n                        }\r\n                        else\r\n                        {\r\n                                mp.put(s[i], 1);\r\n                        }\r\n                }\r\n                int sum = 0, product = 1;\r\n                for(Map.Entry<Character, Integer> it : mp.entrySet())\r\n                {\r\n                        if (prime[it.getValue()])\r\n                        {\r\n                                sum += it.getValue();\r\n                                product *= it.getValue();\r\n                        }\r\n                }\r\n                System.out.println(\"Sum = \" + sum);\r\n                System.out.println(\"Product = \" + product);\r\n        }", "5": "static char bitToBeFlipped(String s)\r\n{\r\n        char last = s.charAt(s.length() - 1);\r\n        char first = s.charAt(0);\r\n        if (last == first) {\r\n                if (last == '0') {\r\n                        return '1';\r\n                }\r\n                else {\r\n                        return '0';\r\n                }\r\n        }\r\n        else if (last != first) {\r\n                return last;\r\n        }\r\n        return last;\r\n}", "6": "public static void steps(String str, int n)\r\n{\r\n        boolean flag = false;\r\n        int x = 0;\r\n        for (int i = 0; i < str.length(); i++)\r\n        {\r\n                if (x == 0)\r\n                {\r\n                        flag = true;\r\n                }\r\n                if (x == n - 1)\r\n                {\r\n                        flag = false;\r\n                }\r\n                for (int j = 0; j < x; j++)\r\n                {\r\n                        System.out.print(\"*\");\r\n                }\r\n                System.out.print(str.charAt(i) + \"\\n\");\r\n                if (flag == true)\r\n                {\r\n                        x++;\r\n                }\r\n                else\r\n                {\r\n                        x--;\r\n                }\r\n        }\r\n}", "7": "static String decryptString(String str, int n)\r\n{\r\n        int i = 0, jump = 1;\r\n        String decryptedStr = \"\";\r\n        while (i < n)\r\n        {\r\n                decryptedStr += str.charAt(i);\r\n                i += jump;\r\n                jump++;\r\n        }\r\n        return decryptedStr;\r\n}", "8": "public static String maxValue(char[] a, char[] b)\r\n{\r\n        Arrays.sort(b);\r\n        int n = a.length;\r\n        int m = b.length;\r\n        int j = m - 1;\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n                if (j < 0)\r\n                        break;\r\n                if (b[j] > a[i])\r\n                {\r\n                        a[i] = b[j];\r\n                        j--;\r\n                }\r\n        }\r\n        return String.join(\"\",a);\r\n}", "9": "public static int minOperations(String s, String t, int n) {\r\n        int ct0 = 0, ct1 = 0;\r\n        for (int i = 0; i < n; i++) {\r\n                if (s.charAt(i) == t.charAt(i))\r\n                        continue;\r\n                if (s.charAt(i) == '0')\r\n                        ct0++;\r\n                else\r\n                        ct1++;\r\n        }\r\n        return Math.max(ct0, ct1);\r\n}", "10": "public static int prefixOccurrences(String str)\r\n{\r\n        char c = str.charAt(0);\r\n        int countc = 0;\r\n        for (int i = 0; i < str.length(); i++)\r\n        {\r\n                if (str.charAt(i) == c)\r\n                        countc++;\r\n        }\r\n        return countc;\r\n}", "11": "public static String replaceConsonants(String str) {\r\n        String res = \"\";\r\n        int i = 0, count = 0;\r\n        while (i < str.length()) {\r\n                if (str.charAt(i) != 'a' && str.charAt(i) != 'e' && str.charAt(i) != 'i' && str.charAt(i) != 'o' && str.charAt(i) != 'u') {\r\n                        i++;\r\n                        count++;\r\n                }\r\n                else {\r\n                        if (count > 0) {\r\n                                res += count;\r\n                        }\r\n                        res += str.charAt(i);\r\n                        i++;\r\n                        count = 0;\r\n                }\r\n        }\r\n        if (count > 0) {\r\n                res += count;\r\n        }\r\n        return res;\r\n}", "12": "public static int totalPairs(String s1, String s2)\r\n{\r\n        int a1 = 0, b1 = 0;\r\n        for (int i = 0; i < s1.length(); i++)\r\n        {\r\n                if ((int)s1.charAt(i) % 2 != 0)\r\n                        a1++;\r\n                else\r\n                        b1++;\r\n        }\r\n        int a2 = 0, b2 = 0;\r\n        for (int i = 0; i < s2.length(); i++)\r\n        {\r\n                if ((int)s2.charAt(i) % 2 != 0)\r\n                        a2++;\r\n                else\r\n                        b2++;\r\n        }\r\n        return ((a1 * a2) + (b1 * b2));\r\n}", "13": "public static int countMinReversals(String expr)\r\n{\r\n        int len = expr.length();\r\n        if (len % 2 != 0)\r\n                return -1;\r\n        int ans = 0;\r\n        int i;\r\n        int open = 0;\r\n        int close = 0;\r\n        for (i = 0; i < len; i++)\r\n        {\r\n                if (expr.charAt(i) == '{')\r\n                        open++;\r\n                else\r\n                {\r\n                        if (open == 0)\r\n                                close++;\r\n                        else\r\n                                open--;\r\n                }\r\n        }\r\n        ans = (close / 2) + (open / 2);\r\n        close %= 2;\r\n        open %= 2;\r\n        if (close != 0)\r\n                ans += 2;\r\n        return ans;\r\n}", "14": "public static boolean equalIgnoreCase(String str1, String str2)\r\n{\r\n        str1 = str1.toUpperCase();\r\n        str2 = str2.toUpperCase();\r\n        int x = str1.compareTo(str2);\r\n        if (x != 0)\r\n        {\r\n                return false;\r\n        }\r\n        else\r\n        {\r\n                return true;\r\n        }\r\n}\r\npublic static void equalIgnoreCaseUtil(String str1, String str2)\r\n{\r\n        boolean res = equalIgnoreCase(str1, str2);\r\n        if (res == true)\r\n        {\r\n                System.out.println(\"Same\");\r\n        }\r\n        else\r\n        {\r\n                System.out.println(\"Not Same\");\r\n        }\r\n}", "15": "public static boolean equalIgnoreCase(String str1, String str2)\r\n{\r\n        str1 = str1.toUpperCase();\r\n        str2 = str2.toUpperCase();\r\n        int x = str1.compareTo(str2);\r\n        if (x != 0)\r\n        {\r\n                return false;\r\n        }\r\n        else\r\n        {\r\n                return true;\r\n        }\r\n}\r\npublic static void equalIgnoreCaseUtil(String str1, String str2)\r\n{\r\n        boolean res = equalIgnoreCase(str1, str2);\r\n        if (res == true)\r\n        {\r\n                System.out.println(\"Same\");\r\n        }\r\n        else\r\n        {\r\n                System.out.println(\"Not Same\");\r\n        }\r\n}", "16": NaN, "17": "public static int countSubStr(String s)\r\n        {\r\n                int count = 0;\r\n                int n = s.length();\r\n                for (int i = 0; i < n - 2; i++)\r\n                {\r\n                        for (int j = i; j < n - 2; j++)\r\n                        {\r\n                                for (int k = j + 1; k < n - 1; k++)\r\n                                {\r\n                                        for (int l = k; l < n - 1; l++)\r\n                                        {\r\n                                                for (int p = l + 1; p < n; p++)\r\n                                                {\r\n                                                        for (int q = p; q < n; q++)\r\n                                                        {\r\n                                                                if (isPalin(i, j, k, l, p, q, s))\r\n                                                                {\r\n                                                                        count++;\r\n                                                                }\r\n                                                        }\r\n                                                }\r\n                                        }\r\n                                }\r\n                        }\r\n                }\r\n                return count;\r\n        }\r\nstatic boolean isPalin(int i, int j, int k, int l, int p, int q, String s)\r\n        {\r\n                int start = i, end = q;\r\n                while (start < end)\r\n                {\r\n                        if (s.charAt(start) != s.charAt(end))\r\n                        {\r\n                                return false;\r\n                        }\r\n                        start++;\r\n                        if (start == j + 1)\r\n                        {\r\n                                start = k;\r\n                        }\r\n                        end--;\r\n                        if (end == p - 1)\r\n                        {\r\n                                end = l;\r\n                        }\r\n                }\r\n                return true;\r\n        }", "18": "public static void printUncommon(String str1, String str2)\r\n{\r\n        int a1 = 0, a2 = 0;\r\n        for (int i = 0; i < str1.length(); i++)\r\n        {\r\n                int ch = (str1.charAt(i) - 'a');\r\n                a1 = a1 | (1 << ch);\r\n        }\r\n        for (int i = 0; i < str2.length(); i++)\r\n        {\r\n                int ch = (str2.charAt(i) - 'a');\r\n                a2 = a2 | (1 << ch);\r\n        }\r\n        int ans = a1 ^ a2;\r\n        int j = 0;\r\n        while (j < 26)\r\n        {\r\n                if (ans % 2 == 1)\r\n                {\r\n                        System.out.print((char)('a' + j));\r\n                }\r\n                ans = ans / 2;\r\n                j++;\r\n        }\r\n}", "19": "static Boolean isPossible(char[] str)\r\n        {\r\n                HashMap<Character, Integer> freq = new HashMap<Character, Integer>();\r\n                int max_freq = 0;\r\n                for (int j = 0; j < (str.length); j++) {\r\n                        if (freq.containsKey(str[j])) {\r\n                                var v = freq.get(str[j]) + 1;\r\n                                freq.remove(str[j]);\r\n                                freq.put(str[j], v);\r\n                                if (freq.get(str[j]) > max_freq)\r\n                                        max_freq = freq.get(str[j]);\r\n                        }\r\n                        else {\r\n                                freq.put(str[j], 1);\r\n                                if (freq.get(str[j]) > max_freq)\r\n                                        max_freq = freq.get(str[j]);\r\n                        }\r\n                }\r\n                if (max_freq <= (str.length - max_freq + 1))\r\n                        return true;\r\n                return false;\r\n        }", "20": "static void getOrgString(String s)\r\n        {\r\n                System.out.print(s.charAt(0));\r\n                int i = 1;\r\n                while (i < s.length())\r\n                {\r\n                        if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\r\n                                System.out.print(\" \"+ (char) (s.charAt(i) + 32));\r\n                        else\r\n                                System.out.print(s.charAt(i));\r\n                        i++;\r\n                }\r\n        }", "21": "public static char[] encryptStr(String str, int n, int x)\r\n        {\r\n                x = x % MAX;\r\n                char[] arr = str.toCharArray();\r\n                int[] freq = new int[MAX];\r\n                for (int i = 0; i < n; i++)\r\n                        freq[arr[i] - 'a']++;\r\n                for (int i = 0; i < n; i++)\r\n                {\r\n                        if (freq[arr[i] - 'a'] % 2 == 0)\r\n                        {\r\n                                int pos = (arr[i] - 'a' + x) % MAX;\r\n                                arr[i] = (char)(pos + 'a');\r\n                        }\r\n                        else\r\n                        {\r\n                                int pos = (arr[i] - 'a' - x);\r\n                                if (pos < 0)\r\n                                        pos += MAX;\r\n                                arr[i] = (char)(pos + 'a');\r\n                        }\r\n                }\r\n                return arr;\r\n        }", "22": NaN, "23": "public static void findWord(String c, int n)\r\n{\r\n        int co = 0, i;\r\n        char []s = new char[n];\r\n        for (i = 0; i < n ; i++)\r\n        {\r\n                if (i < n / 2)\r\n                        co++;\r\n                else\r\n                        co = n - i;\r\n                if ((c.charAt(i) + co) <= 122)\r\n                        s[i] = (char)((int)c.charAt(i) + co);\r\n                else\r\n                        s[i] = (char)((int)c.charAt(i) + co - 26);\r\n        }\r\n        String str = String.join(\"\",s);\r\n        System.out.println(str);\r\n}", "24": "public static int countSubStr(String s, int n)\r\n{\r\n        int c1 = 0, c2 = 0;\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n                if (i < n - 5 &&\r\n                        \"geeks\".equals(s.substring(i, i + 5)))\r\n                {\r\n                        c1++;\r\n                }\r\n                if (i < n - 3 &&\r\n                        \"for\".equals(s.substring(i, i + 3)))\r\n                {\r\n                        c2 = c2 + c1;\r\n                }\r\n        }\r\n        return c2;\r\n}", "25": "static void findSubStr(String str, int cnt, int start)\r\n{\r\n        if (start == str.length())\r\n        {\r\n                minCnt = Math.min(cnt, minCnt);\r\n        }\r\n        for (int len = 1;\r\n                        len <= (str.length() - start); len++)\r\n        {\r\n                String subStr = str.substring(start, len);\r\n                if (uSet.contains(subStr))\r\n                {\r\n                        findSubStr(str, cnt + 1, start + len);\r\n                }\r\n        }\r\n}\r\nstatic void findMinSubStr(String []arr, int n, String str)\r\n{\r\n        for (int i = 0; i < n; i++)\r\n                uSet.add(arr[i]);\r\n        findSubStr(str, 0, 0);\r\n}", "26": "static int cntWays(String str, int n)\r\n{\r\n        int x = n + 1;\r\n        int ways = x * x * (x * x - 1) / 12;\r\n        return ways;\r\n}", "27": "public static int maxSubStr(char[] str1, int len1, char[] str2, int len2) {\r\n        if (len1 > len2)\r\n                return 0;\r\n        int[] freq1 = new int[MAX];\r\n        for (int i = 0; i < len1; i++)\r\n                freq1[i] = 0;\r\n        for (int i = 0; i < len1; i++)\r\n                freq1[str1[i] - 'a']++;\r\n        int[] freq2 = new int[MAX];\r\n        for (int i = 0; i < len2; i++)\r\n                freq2[i] = 0;\r\n        for (int i = 0; i < len2; i++)\r\n                freq2[str2[i] - 'a']++;\r\n        int minPoss = Integer.MAX_VALUE;\r\n        for (int i = 0; i < MAX; i++) {\r\n                if (freq1[i] == 0)\r\n                        continue;\r\n                if (freq1[i] > freq2[i])\r\n                        return 0;\r\n                minPoss = Math.min(minPoss, freq2[i] / freq1[i]);\r\n        }\r\n        return minPoss;\r\n}", "28": "public static boolean isPalindrome(float num)\r\n{\r\n        String s = num.toString();\r\n        int low = 0;\r\n        int high = s.length() - 1;\r\n        while (low < high)\r\n        {\r\n                if (s.charAt(low) != s.charAt(high))\r\n                        return false;\r\n                low++;\r\n                high--;\r\n        }\r\n        return true;\r\n}", "29": "static void sub_segments(String str, int n)\r\n{\r\n        int l = str.length();\r\n        for (int x = 0; x < l; x += n)\r\n        {\r\n                String newlist = str.substring(x, x + n);\r\n                List<Character> arr = new ArrayList<Character>();\r\n                for (char y : newlist.toCharArray())\r\n                {\r\n                        if (!arr.contains(y))\r\n                                arr.add(y);\r\n                }\r\n                for (char y : arr)\r\n                        System.out.print(y);\r\n                System.out.println();\r\n        }\r\n}", "30": "static void findMostOccurringChar(String[] str)\r\n{\r\n        int[] hash = new int[26];\r\n        for (int i = 0; i < str.length; i++)\r\n        {\r\n                for (int j = 0; j < str[i].length(); j++)\r\n                {\r\n                        hash[str[i].charAt(j)-97]++;\r\n                }\r\n        }\r\n        int max = 0;\r\n        for (int i = 0; i < 26; i++)\r\n        {\r\n                max = hash[i] > hash[max] ? i : max;\r\n        }\r\n        System.out.println((char)(max + 97));\r\n}", "31": "static int productAtKthLevel( String tree, int k, int level){\r\n                if (tree[i++] == '(') {\r\n                        if (tree[i] == ')')\r\n                                return 1;\r\n                        int product = 1;\r\n                        if (level == k)\r\n                                product = tree[i] - '0';\r\n                        ++i;\r\n                        int leftproduct = productAtKthLevel( tree, k, level + 1);\r\n                        ++i;\r\n                        int rightproduct =\r\n                        productAtKthLevel(tree, k, level + 1);\r\n                        ++i;\r\n                        return product *\r\n                        leftproduct * rightproduct;\r\n                }\r\n                return Integer.MIN_VALUE;\r\n        }", "32": "public static String removeChars(char []arr, int k)\r\n{\r\n        int []hash = new int[MAX_CHAR];\r\n        int n = arr.length;\r\n        for (int i = 0; i < n; ++i)\r\n                hash[arr[i] - 'a']++;\r\n        String ans = \"\";\r\n        for (int i = 0; i < n; ++i) {\r\n                if (hash[arr[i] - 'a'] != k) {\r\n                        ans += arr[i];\r\n                }\r\n        }\r\n        return ans;\r\n}", "33": "public static String removeOddFrequencyCharacters(String s)\r\n{\r\n        Map<Character, Integer> m = new HashMap<Character, Integer>();\r\n        for(int i = 0; i < s.length(); i++)\r\n        {\r\n                char p = s.charAt(i);\r\n                if (m.containsKey(p))\r\n                {\r\n                        m.put(p, m.get(p) + 1);\r\n                }\r\n                else\r\n                {\r\n                        m.put(p, 1);\r\n                }\r\n        }\r\n        String new_string = \"\";\r\n        for(int i = 0; i < s.length(); i++)\r\n        {\r\n                if ((m.get(s.charAt(i)) & 1) == 1)\r\n                        continue;\r\n                new_string += s.charAt(i);\r\n        }\r\n        return new_string;\r\n}", "34": "public static void distinct(String[] S, int M)\r\n{\r\n        int count = 0;\r\n        for(int i = 0; i < S.length; i++)\r\n        {\r\n                HashSet<Character> set = new HashSet<Character>();\r\n                for(int j = 0; j < S[i].length(); j++)\r\n                {\r\n                        if (!set.contains(S[i].charAt(j)))\r\n                                set.add(S[i].charAt(j));\r\n                }\r\n                int c = set.size();\r\n                if (c <= M)\r\n                        count += 1;\r\n        }\r\n        System.out.println(count);\r\n}", "35": "static String flip(char []s)\r\n{\r\n        for(int i = 0; i < s.length; i++)\r\n        {\r\n        if (s[i] == '0')\r\n        {\r\n                while (s[i] == '0')\r\n                {\r\n                        s[i] = '1';\r\n                        i++;\r\n                }\r\n                break;\r\n        }\r\n        }\r\n        return new String(s);\r\n}", "36": "public static void findNumOfValidWords(List<String> w, List<String> p)\r\n{\r\n        Map<Integer, Integer> m = new HashMap<Integer, Integer>();\r\n        List<Integer> res = new ArrayList<Integer>();\r\n        for (String s : w)\r\n        {\r\n                int val = 0;\r\n                for (char c : s.toCharArray())\r\n                {\r\n                        val = val | (1 << (c - 'a'));\r\n                }\r\n                if (m.containsKey(val))\r\n                {\r\n                        m.put(val, m.get(val) + 1);\r\n                }\r\n                else\r\n                {\r\n                        m.put(val, 1);\r\n                }\r\n        }\r\n        for (String s : p)\r\n        {\r\n                int val = 0;\r\n                for (char c : s.toCharArray())\r\n                {\r\n                        val = val | (1 << (c - 'a'));\r\n                }\r\n                int temp = val;\r\n                int first = s.charAt(0) - 'a';\r\n                int count = 0;\r\n                while (temp != 0)\r\n                {\r\n                        if (((temp >> first) & 1) == 1)\r\n                        {\r\n                                if (m.containsKey(temp))\r\n                                {\r\n                                        count += m.get(temp);\r\n                                }\r\n                        }\r\n                        temp = (temp - 1) & val;\r\n                }\r\n                res.add(count);\r\n        }\r\n        for (int it : res)\r\n        {\r\n                System.out.println(it);\r\n        }\r\n}", "37": "public static boolean canConstruct(String ransomNote, String magazine) {\r\n    int[] count = new int[26];\r\n    for (char c : magazine.toCharArray()) {\r\n        count[c - 'a']++;\r\n    }\r\n    for (char c : ransomNote.toCharArray()) {\r\n        count[c - 'a']--;\r\n        if (count[c - 'a'] < 0) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}", "38": "public static boolean check(String s, int n)\r\n{\r\n        Stack<Integer> st = new Stack<Integer>();\r\n        for(int i = 0; i < n; i++)\r\n        {\r\n                if (st.size() != 0 &&\r\n                        st.peek() == s.charAt(i))\r\n                        st.pop();\r\n                else\r\n                        st.push(s.charAt(i));\r\n        }\r\n        if (st.size() == 0)\r\n        {\r\n                return true;\r\n        }\r\n        else\r\n        {\r\n                return false;\r\n        }\r\n}", "39": "static boolean isValid(char a1, char a2, String str, int flag)\r\n{\r\n        char v1, v2;\r\n        if (flag == 0)\r\n        {\r\n                v1 = str.charAt(4);\r\n                v2 = str.charAt(3);\r\n        }\r\n        else\r\n        {\r\n                v1 = str.charAt(1);\r\n                v2 = str.charAt(0);\r\n        }\r\n        if (v1 != a1 && v1 != '?')\r\n        {\r\n                return false;\r\n        }\r\n        if (v2 != a2 && v2 != '?')\r\n        {\r\n                return false;\r\n        }\r\n        return true;\r\n}\r\nstatic boolean inRange(int hh, int mm, int L, int R)\r\n{\r\n        int a = Math.abs(hh - mm);\r\n        if (a < L && a > R)\r\n        {\r\n                return false;\r\n        }\r\n        return true;\r\n}\r\nstatic void displayTime(int hh, int mm)\r\n{\r\n        if (hh > 10)\r\n        {\r\n                System.out.print(hh + \":\");\r\n        }\r\n        else if (hh < 10)\r\n        {\r\n                System.out.print(\"0\" + hh + \":\");\r\n        }\r\n        if (mm > 10)\r\n        {\r\n                System.out.print(mm);\r\n        }\r\n        else if (mm < 10)\r\n        {\r\n                System.out.print(\"0\" + mm);\r\n        }\r\n}\r\nstatic void maximumTimeWithDifferenceInRange(String str, int L, int R)\r\n{\r\n        int i = 0, j = 0;\r\n        int h1, h2, m1, m2;\r\n        for (i = 23; i >= 0; i--)\r\n        {\r\n                h1 = i % 10;\r\n                h2 = i / 10;\r\n                if (!isValid((char)h1, (char)h2, str, 1))\r\n                {\r\n                        continue;\r\n                }\r\n                for (j = 59; j >= 0; j--)\r\n                {\r\n                        m1 = j % 10;\r\n                        m2 = j / 10;\r\n                        if (!isValid((char)m1, (char)m2, str, 0))\r\n                        {\r\n                                continue;\r\n                        }\r\n                        if (inRange(i, j, L, R))\r\n                        {\r\n                                displayTime(i, j);\r\n                                return;\r\n                        }\r\n                }\r\n        }\r\n        if (inRange(i, j, L, R))\r\n        {\r\n                displayTime(i, j);\r\n        }\r\n        else\r\n        {\r\n                System.out.println(\"-1\");\r\n        }\r\n}", "40": "public static String checkString(String s, int K)\r\n{\r\n        int n = s.length();\r\n        HashMap<Character, Integer> mp = new HashMap<Character, Integer>();\r\n        for(int i = 0; i < n; i++)\r\n        {\r\n                if(mp.containsKey(s[i]))\r\n                        mp.put(s[i], i);\r\n                else\r\n                        mp.put(s[i], i);\r\n        }\r\n        int f = 0;\r\n        HashSet<Character> st = new HashSet<Character>();\r\n        for(int i = 0; i < n; i++)\r\n        {\r\n                st.add(s[i]);\r\n                if (st.size() > K)\r\n                {\r\n                        f = 1;\r\n                        break;\r\n                }\r\n                if (mp.get(s[i]) == i)\r\n                        st.remove(s[i]);\r\n        }\r\n        return (f == 1 ? \"Yes\" : \"No\");\r\n}", "41": "public static String removeCharRecursive(String str, char X)\r\n{\r\n        if (str.length() == 0)\r\n        {\r\n                return \"\";\r\n        }\r\n        if (str.charAt(0) == X)\r\n        {\r\n                return removeCharRecursive(\r\n                        str.substring(1), X);\r\n        }\r\n        return str.charAt(0) + removeCharRecursive(\r\n                                        str.substring(1), X);\r\n}", "42": "public static int countOfString(int N)\r\n{\r\n        int Stotal = (int) Math.Pow(2, N);\r\n        int Sequal = 0;\r\n        if (N % 2 == 0)\r\n                Sequal = binomialCoeff(N, N / 2);\r\n        int S1 = (Stotal - Sequal) / 2;\r\n        return S1;\r\n}", "43": "static int longComPre(String []arr, int N)\r\n{\r\n int [][]freq = new int[N][256];\r\n for (int i = 0; i < N; i++)\r\n {\r\n        int M = arr[i].length();\r\n        for (int j = 0; j < M; j++)\r\n        {\r\n        freq[i][arr[i].charAt(j)]++;\r\n        }\r\n }\r\n int maxLen = 0;\r\n for (int j = 0; j < 256; j++)\r\n {\r\n        int minRowVal = Integer.MAX_VALUE;\r\n        for (int i = 0; i < N; i++)\r\n        {\r\n        minRowVal = Math.min(minRowVal, freq[i][j]);\r\n        }\r\n        maxLen += minRowVal;\r\n }\r\n return maxLen;\r\n}", "44": "public int findMinimumChanges(int N, int K, char[] S) {\r\n        int ans = 0;\r\n        for(int i = 0; i < (K + 1) / 2; i++) {\r\n                Map<Character, Integer> mp = new HashMap<Character, Integer>();\r\n                for(int j = i; j < N; j += K) {\r\n                        if (mp.containsKey(S[j])) {\r\n                                mp.put(S[j], mp.get(S[j]) + 1);\r\n                        } else {\r\n                                mp.put(S[j], 1);\r\n                        }\r\n                }\r\n                for(int j = N - i - 1; j >= 0; j -= K) {\r\n                        if (K % 2 == 1 && i == K / 2)\r\n                                break;\r\n                        if (mp.containsKey(S[j])) {\r\n                                mp.put(S[j], mp.get(S[j]) + 1);\r\n                        } else {\r\n                                mp.put(S[j], 1);\r\n                        }\r\n                }\r\n                int curr_max = Integer.MIN_VALUE;\r\n                for(Map.Entry<Character, Integer> p : mp.entrySet()) {\r\n                        curr_max = Math.max(curr_max, p.getValue());\r\n                }\r\n                if ((K % 2 == 1) && i == K / 2)\r\n                        ans += (N / K - curr_max);\r\n                else\r\n                        ans += (N / K * 2 - curr_max);\r\n        }\r\n        return ans;\r\n}", "45": "static void minMaxDigits(String str, int N)\r\n{\r\n        int[] arr = new int[N];\r\n        for(int i = 0; i < N; i++)\r\n                arr[i] = (str.charAt(i) - '0') % 3;\r\n        int zero = 0, one = 0, two = 0;\r\n        for(int i = 0; i < N; i++)\r\n        {\r\n                if (arr[i] == 0)\r\n                        zero++;\r\n                if (arr[i] == 1)\r\n                        one++;\r\n                if (arr[i] == 2)\r\n                        two++;\r\n        }\r\n        int sum = 0;\r\n        for(int i = 0; i < N; i++)\r\n        {\r\n                sum = (sum + arr[i]) % 3;\r\n        }\r\n        if (sum == 0)\r\n        {\r\n                System.out.print(0 + \" \");\r\n        }\r\n        if (sum == 1)\r\n        {\r\n                if ((one != 0) && (N > 1))\r\n                        System.out.print(1 + \" \");\r\n                else if (two > 1 && N > 2)\r\n                        System.out.print(2 + \" \");\r\n                else\r\n                        System.out.print(-1 + \" \");\r\n        }\r\n        if (sum == 2)\r\n        {\r\n                if (two != 0 && N > 1)\r\n                        System.out.print(1 + \" \");\r\n                else if (one > 1 && N > 2)\r\n                        System.out.print(2 + \" \");\r\n                else\r\n                        System.out.print(-1 + \" \");\r\n        }\r\n        if (zero > 0)\r\n                System.out.print(N - 1 + \" \");\r\n        else if (one > 0 && two > 0)\r\n                System.out.print(N - 2 + \" \");\r\n        else if (one > 2 && two > 2)\r\n                System.out.print(N - 3 + \" \");\r\n        else\r\n                System.out.print(-1 + \" \");\r\n}", "46": "public static void DFA(String str, int N) {\n        if (N <= 1) {\n        System.out.println(\"No\");\n        return;\n        }\n        int count = 0;\n        if (str.charAt(0) == 'C') {\n        count++;\n        for (int i = 1; i < N; i++) {\n                if (str.charAt(i) == 'A' && str.charAt(i) == 'B')\n                count++;\n                else\n                break;\n        }\n        }\n        else {\n        System.out.println(\"No\");\n        return;\n        }\n        if (count == N)\n        System.out.println(\"Yes\");\n        else\n        System.out.println(\"No\");\n }", "47": "public static void findWinner(String a, int n)\r\n{\r\n        List<Integer> v = new ArrayList<Integer>();\r\n        int c = 0;\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n        if (a.charAt(i) == '0')\r\n        {\r\n                c++;\r\n        }\r\n        else\r\n        {\r\n                if (c != 0)\r\n                v.add(c);\r\n                c = 0;\r\n        }\r\n        }\r\n        if (c != 0)\r\n        v.add(c);\r\n        if (v.size() == 0)\r\n        {\r\n        System.out.println(\"Player B\");\r\n        return;\r\n        }\r\n        if (v.size() == 1)\r\n        {\r\n        if ((v.get(0) & 1) != 0)\r\n                System.out.println(\"Player A\");\r\n        else\r\n                System.out.println(\"Player B\");\r\n        return;\r\n        }\r\n        int first = Integer.MIN_VALUE;\r\n        int second = Integer.MIN_VALUE;\r\n        for (int i = 0; i < v.size(); i++)\r\n        {\r\n        if (v.get(i) > first) {\r\n                second = first;\r\n                first = v.get(i);\r\n        }\r\n        else if (v.get(i) > second && v.get(i) != first)\r\n                second = v.get(i);\r\n        }\r\n        if ((first & 1) != 0\r\n                && (first + 1) / 2 > second)\r\n        System.out.println(\"Player A\");\r\n        else\r\n        System.out.println(\"Player B\");\r\n}", "48": "public static void countOccurrences(String S, String X, String Y)\r\n{\r\n        int count = 0;\r\n        int N = S.length();\r\n        int A = X.length();\r\n        int B = Y.length();\r\n        int P = Math.min(A, Math.min(N, B));\r\n        for (int i = 0; i < N - P + 1; i++) {\r\n                if (S.substring(i, Math.min(N, B)).equals(Y))\r\n                        count++;\r\n                if (S.substring(i, Math.min(N, A)).equals(X))\r\n                        System.out.print(count + \" \");\r\n        }\r\n}", "49": "static void generatePalindrome(String S)\n{\n        Map<Character, Integer> Hash = new HashMap<Character, Integer>();\n        for (int i = 0; i < S.length(); i++)\n        {\n                char ch = S.charAt(i);\n                if (Hash.containsKey(ch))\n                        Hash.put(ch, Hash.get(ch) + 1);\n                else\n                        Hash.put(ch, 1);\n        }\n        Set<String> st = new HashSet<String>();\n        for (char i = 'a'; i <= 'z'; i++)\n        {\n                if (Hash.containsKey(i) && Hash.get(i) == 2)\n                {\n                        for (char j = 'a'; j <= 'z'; j++)\n                        {\n                                String s = \"\";\n                                if (Hash.containsKey(j) && i != j)\n                                {\n                                        s += i;\n                                        s += j;\n                                        s += i;\n                                        st.add(s);\n                                }\n                        }\n                }\n                if (Hash.containsKey(i) && Hash.get(i) >= 3)\n                {\n                        for (char j = 'a'; j <= 'z'; j++)\n                        {\n                                String s = \"\";\n                                if (Hash.containsKey(j))\n                                {\n                                        s += i;\n                                        s += j;\n                                        s += i;\n                                        st.add(s);\n                                }\n                        }\n                }\n        }\n        for (String ans : st)\n        {\n                System.out.println(ans);\n        }\n}"}}}